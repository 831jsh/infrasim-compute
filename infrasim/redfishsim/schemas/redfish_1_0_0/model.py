# Copyright 2015, EMC, Inc.

# **** generated by Redfish2Restplus
# **** do not edit this file directly, edit json-overlay instead

# The model-names are supposed to look like this for use in the documentor.
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements
# pylint: disable=invalid-name,unused-variable,unused-argument
# pylint: disable=line-too-long
# pylint: disable=bad-continuation
# pylint: disable=unused-import
# pylint: disable=too-many-locals

import flask_restplus as restplus

def fake_import_driver(fake_importer, app_coord, namespace):

    # enumerations
    Chassis_1_0_0_ChassisType = [u'Rack', u'Blade', u'Enclosure', u'StandAlone', u'RackMount', u'Card', u'Cartridge', u'Row', u'Pod', u'Expansion', u'Sidecar', u'Zone', u'Sled', u'Shelf', u'Drawer', u'Module', u'Component', u'Other']

    Chassis_1_0_0_IndicatorLED = [u'Unknown', u'Lit', u'Blinking', u'Off']

    ComputerSystem_1_0_0_BootSource = [u'None', u'Pxe', u'Floppy', u'Cd', u'Usb', u'Hdd', u'BiosSetup', u'Utilities', u'Diags', u'UefiShell', u'UefiTarget']

    ComputerSystem_1_0_0_BootSourceOverrideEnabled = [u'Disabled', u'Once', u'Continuous']

    ComputerSystem_1_0_0_IndicatorLED = [u'Unknown', u'Lit', u'Blinking', u'Off']

    ComputerSystem_1_0_0_PowerState = [u'On', u'Off', u'Unknown', u'Reset']

    ComputerSystem_1_0_0_SystemType = [u'Physical', u'Virtual', u'OS', u'PhysicallyPartitioned', u'VirtuallyPartitioned']

    EventDestination_1_0_0_EventDestinationProtocol = [u'Redfish']

    Event_1_0_0_EventType = [u'StatusChange', u'ResourceUpdated', u'ResourceAdded', u'ResourceRemoved', u'Alert']

    IPAddresses_1_0_0_AddressState = [u'Preferred', u'Deprecated', u'Tentative', u'Failed']

    IPAddresses_1_0_0_IPv4AddressOrigin = [u'Static', u'DHCP', u'BOOTP', u'IPv4LinkLocal']

    IPAddresses_1_0_0_IPv6AddressOrigin = [u'Static', u'DHCPv6', u'LinkLocal', u'SLAAC']

    LogEntry_1_0_0_EventSeverity = [u'OK', u'Warning', u'Critical']

    LogEntry_1_0_0_LogEntryCode = [u'Assert', u'Deassert', u'Lower Non-critical - going low', u'Lower Non-critical - going high', u'Lower Critical - going low', u'Lower Critical - going high', u'Lower Non-recoverable - going low', u'Lower Non-recoverable - going high', u'Upper Non-critical - going low', u'Upper Non-critical - going high', u'Upper Critical - going low', u'Upper Critical - going high', u'Upper Non-recoverable - going low', u'Upper Non-recoverable - going high', u'Transition to Idle', u'Transition to Active', u'Transition to Busy', u'State Deasserted', u'State Asserted', u'Predictive Failure deasserted', u'Predictive Failure asserted', u'Limit Not Exceeded', u'Limit Exceeded', u'Performance Met', u'Performance Lags', u'Transition to OK', u'Transition to Non-Critical from OK', u'Transition to Critical from less severe', u'Transition to Non-recoverable from less severe', u'Transition to Non-Critical from more severe', u'Transition to Critical from Non-recoverable', u'Transition to Non-recoverable', u'Monitor', u'Informational', u'Device Removed / Device Absent', u'Device Inserted / Device Present', u'Device Disabled', u'Device Enabled', u'Transition to Running', u'Transition to In Test', u'Transition to Power Off', u'Transition to On Line', u'Transition to Off Line', u'Transition to Off Duty', u'Transition to Degraded', u'Transition to Power Save', u'Install Error', u'Fully Redundant', u'Redundancy Lost', u'Redundancy Degraded', u'Non-redundant:Sufficient Resources from Redundant', u'Non-redundant:Sufficient Resources from Insufficient Resources', u'Non-redundant:Insufficient Resources', u'Redundancy Degraded from Fully Redundant', u'Redundancy Degraded from Non-redundant', u'D0 Power State', u'D1 Power State', u'D2 Power State', u'D3 Power State']

    LogEntry_1_0_0_LogEntryType = [u'Event', u'SEL', u'Oem']

    LogEntry_1_0_0_SensorType = [u'Platform Security Violation Attempt', u'Temperature', u'Voltage', u'Current', u'Fan', u'Physical Chassis Security', u'Processor', u'Power Supply / Converter', u'PowerUnit', u'CoolingDevice', u'Other Units-based Sensor', u'Memory', u'Drive Slot/Bay', u'POST Memory Resize', u'System Firmware Progress', u'Event Logging Disabled', u'System Event', u'Critical Interrupt', u'Button/Switch', u'Module/Board', u'Microcontroller/Coprocessor', u'Add-in Card', u'Chassis', u'ChipSet', u'Other FRU', u'Cable/Interconnect', u'Terminator', u'SystemBoot/Restart', u'Boot Error', u'BaseOSBoot/InstallationStatus', u'OS Stop/Shutdown', u'Slot/Connector', u'System ACPI PowerState', u'Watchdog', u'Platform Alert', u'Entity Presence', u'Monitor ASIC/IC', u'LAN', u'Management Subsystem Health', u'Battery', u'Session Audit', u'Version Change', u'FRUState']

    LogService_1_0_0_OverWritePolicy = [u'Unknown', u'WrapsWhenFull', u'NeverOverWrites']

    ManagerNetworkProtocol_1_0_0_NotifyIPv6Scope = [u'Link', u'Site', u'Organization']

    Manager_1_0_0_CommandConnectTypesSupported = [u'SSH', u'Telnet', u'IPMI', u'Oem']

    Manager_1_0_0_GraphicalConnectTypesSupported = [u'KVMIP', u'Oem']

    Manager_1_0_0_ManagerType = [u'ManagementController', u'EnclosureManager', u'BMC', u'RackManager', u'AuxiliaryController']

    Manager_1_0_0_SerialConnectTypesSupported = [u'SSH', u'Telnet', u'IPMI', u'Oem']

    MessageRegistry_1_0_0_ParamType = [u'string', u'number']

    PhysicalContext_1_0_0_PhysicalContext = [u'Room', u'Intake', u'Exhaust', u'Front', u'Back', u'Upper', u'Lower', u'CPU', u'GPU', u'Backplane', u'SystemBoard', u'PowerSupply', u'VoltageRegulator', u'StorageDevice', u'NetworkingDevice', u'ComputeBay', u'StorageBay', u'NetworkBay', u'ExpansionBay', u'PowerSupplyBay']

    Power_1_0_0_LineInputVoltageType = [u'Unknown', u'ACLowLine', u'ACMidLine', u'ACHighLine', u'DCNeg48V', u'DC480V']

    Power_1_0_0_PowerLimitException = [u'NoAction', u'HardPowerOff', u'LogEventOnly', u'Oem']

    Power_1_0_0_PowerSupplyType = [u'Unknown', u'AC', u'DC']

    Privileges_1_0_0_PrivilegeType = [u'Login', u'ConfigureManager', u'ConfigureUsers', u'ConfigureSelf', u'ConfigureComponents']

    Processor_1_0_0_InstructionSet = [u'x86', u'x86-64', u'IA-64', u'ARM-A32', u'ARM-A64', u'MIPS32', u'MIPS64', u'OEM']

    Processor_1_0_0_ProcessorArchitecture = [u'x86', u'IA-64', u'ARM', u'MIPS', u'OEM']

    Processor_1_0_0_ProcessorType = [u'CPU', u'GPU', u'FPGA', u'DSP', u'Accelerator', u'OEM']

    Redundancy_1_0_0_RedundancyMode = [u'Failover', u'N+m', u'Sharing', u'Sparing']

    Resource_Health = [u'OK', u'Warning', u'Critical']

    Resource_ResetType = [u'On', u'ForceOff', u'GracefulShutdown', u'GracefulRestart', u'ForceRestart', u'Nmi', u'ForceOn', u'PushPowerButton']

    Resource_State = [u'Enabled', u'Disabled', u'StandbyOffline', u'StandbySpare', u'InTest', u'Starting', u'Absent']

    SerialInterface_1_0_0_BitRate = [u'1200', u'2400', u'4800', u'9600', u'19200', u'38400', u'57600', u'115200', u'230400']

    SerialInterface_1_0_0_ConnectorType = [u'RJ45', u'RJ11', u'DB9 Female', u'DB9 Male', u'DB25 Female', u'DB25 Male', u'USB', u'mUSB', u'uUSB']

    SerialInterface_1_0_0_DataBits = [u'5', u'6', u'7', u'8']

    SerialInterface_1_0_0_FlowControl = [u'None', u'Software', u'Hardware']

    SerialInterface_1_0_0_Parity = [u'None', u'Even', u'Odd', u'Mark', u'Space']

    SerialInterface_1_0_0_PinOut = [u'Cisco', u'Cyclades', u'Digi']

    SerialInterface_1_0_0_SignalType = [u'Rs232', u'Rs485']

    SerialInterface_1_0_0_StopBits = [u'1', u'2']

    SimpleStorage_1_0_0_DeviceOem_Type = [u'Unknown', u'SSD', u'HDD', u'Virtual']

    Switch_1_0_0_Ports_State = [u'None', u'down', u'up']

    TaskService_1_0_0_OverWritePolicy = [u'Manual', u'Oldest']

    Task_1_0_0_TaskState = [u'New', u'Starting', u'Running', u'Suspended', u'Interrupted', u'Pending', u'Stopping', u'Completed', u'Killed', u'Exception', u'Service']

    VirtualMedia_1_0_0_ConnectedVia = [u'NotConnected', u'URI', u'Applet', u'Oem']

    VirtualMedia_1_0_0_MediaType = [u'CD', u'Floppy', u'USBStick', u'DVD']

    fake_importer.start_record(locals())

    #
    # Chassis_1_0_0_Chassis_Actions_Oem
    #


    Chassis_1_0_0_Chassis_Actions_Oem = namespace.model("Chassis_1_0_0_Chassis_Actions_Oem",
    {
    })

    #
    # Chassis_1_0_0_Chassis_Oem_EMC
    #

    Chassis_1_0_0_Chassis_Oem_EMC_VisionID_System = restplus.fields.String(
            readonly=False,
            description="This is the serial number of the baseboard")
    Chassis_1_0_0_Chassis_Oem_EMC_VisionID_Ip = restplus.fields.String(
            readonly=False,
            description="This is the IP address of the system BMC")
    Chassis_1_0_0_Chassis_Oem_EMC_VisionID_Chassis = restplus.fields.String(
            readonly=False,
            description="This is the serial number of the enclosure chassis")

    Chassis_1_0_0_Chassis_Oem_EMC = namespace.model("Chassis_1_0_0_Chassis_Oem_EMC",
    {
        "VisionID_System": Chassis_1_0_0_Chassis_Oem_EMC_VisionID_System,
        "VisionID_Ip": Chassis_1_0_0_Chassis_Oem_EMC_VisionID_Ip,
        "VisionID_Chassis": Chassis_1_0_0_Chassis_Oem_EMC_VisionID_Chassis,
    })

    #
    # Chassis_1_0_0_Reset
    #

    Chassis_1_0_0_Reset_target = restplus.fields.String(
            description="Link to invoke action")
    Chassis_1_0_0_Reset_title = restplus.fields.String(
            description="Friendly action name")

    Chassis_1_0_0_Reset = namespace.model("Chassis_1_0_0_Reset",
    {
        "target": Chassis_1_0_0_Reset_target,
        "title": Chassis_1_0_0_Reset_title,
    })

    #
    # ComputerSystem_1_0_0_BootImage
    #

    ComputerSystem_1_0_0_BootImage_title = restplus.fields.String(
            description="Friendly action name")
    ComputerSystem_1_0_0_BootImage_target = restplus.fields.String(
            description="Link to invoke action")

    ComputerSystem_1_0_0_BootImage = namespace.model("ComputerSystem_1_0_0_BootImage",
    {
        "title": ComputerSystem_1_0_0_BootImage_title,
        "target": ComputerSystem_1_0_0_BootImage_target,
    })

    #
    # ComputerSystem_1_0_0_ComputerSystem_Oem_EMC
    #

    ComputerSystem_1_0_0_ComputerSystem_Oem_EMC_VisionID_Ip = restplus.fields.String(
            readonly=False,
            description="This is the IP address of the system BMC")
    ComputerSystem_1_0_0_ComputerSystem_Oem_EMC_VisionID_System = restplus.fields.String(
            readonly=False,
            description="This is the serial number of the baseboard")
    ComputerSystem_1_0_0_ComputerSystem_Oem_EMC_VisionID_Chassis = restplus.fields.String(
            readonly=False,
            description="This is the serial number of the enclosure chassis")

    ComputerSystem_1_0_0_ComputerSystem_Oem_EMC = namespace.model("ComputerSystem_1_0_0_ComputerSystem_Oem_EMC",
    {
        "VisionID_Ip": ComputerSystem_1_0_0_ComputerSystem_Oem_EMC_VisionID_Ip,
        "VisionID_System": ComputerSystem_1_0_0_ComputerSystem_Oem_EMC_VisionID_System,
        "VisionID_Chassis": ComputerSystem_1_0_0_ComputerSystem_Oem_EMC_VisionID_Chassis,
    })

    #
    # ComputerSystem_1_0_0_Reset
    #

    ComputerSystem_1_0_0_Reset_target = restplus.fields.String(
            description="Link to invoke action")
    ComputerSystem_1_0_0_Reset_title = restplus.fields.String(
            description="Friendly action name")

    ComputerSystem_1_0_0_Reset = namespace.model("ComputerSystem_1_0_0_Reset",
    {
        "target": ComputerSystem_1_0_0_Reset_target,
        "title": ComputerSystem_1_0_0_Reset_title,
    })

    #
    # EthernetInterface_1_0_0_IPv6AddressPolicyEntry
    #

    EthernetInterface_1_0_0_IPv6AddressPolicyEntry_Label = restplus.fields.Float(
            description="The IPv6 Label (as defined in RFC 6724 section 2.1)")
    EthernetInterface_1_0_0_IPv6AddressPolicyEntry_Precedence = restplus.fields.Float(
            description="The IPv6 Precedence (as defined in RFC 6724 section 2.1")
    EthernetInterface_1_0_0_IPv6AddressPolicyEntry_Prefix = restplus.fields.String(
            description="The IPv6 Address Prefix (as defined in RFC 3484 section 2.1)")

    EthernetInterface_1_0_0_IPv6AddressPolicyEntry = namespace.model("EthernetInterface_1_0_0_IPv6AddressPolicyEntry",
    {
        "Label": EthernetInterface_1_0_0_IPv6AddressPolicyEntry_Label,
        "Precedence": EthernetInterface_1_0_0_IPv6AddressPolicyEntry_Precedence,
        "Prefix": EthernetInterface_1_0_0_IPv6AddressPolicyEntry_Prefix,
    })

    #
    # EventDestination_1_0_0_HttpHeaderProperty
    #


    EventDestination_1_0_0_HttpHeaderProperty = namespace.model("EventDestination_1_0_0_HttpHeaderProperty",
    {
    })

    #
    # EventService_1_0_0_EventService_Actions_Oem
    #


    EventService_1_0_0_EventService_Actions_Oem = namespace.model("EventService_1_0_0_EventService_Actions_Oem",
    {
    })

    #
    # EventService_1_0_0_SubmitTestEvent
    #

    EventService_1_0_0_SubmitTestEvent_target = restplus.fields.String(
            description="Link to invoke action")
    EventService_1_0_0_SubmitTestEvent_title = restplus.fields.String(
            description="Friendly action name")

    EventService_1_0_0_SubmitTestEvent = namespace.model("EventService_1_0_0_SubmitTestEvent",
    {
        "target": EventService_1_0_0_SubmitTestEvent_target,
        "title": EventService_1_0_0_SubmitTestEvent_title,
    })

    #
    # JsonSchemaFile_1_0_0_Location
    #

    JsonSchemaFile_1_0_0_Location_ArchiveUri = restplus.fields.String(
            readonly=True,
            description="If the schema is hosted on the service in an archive file, this is the link to the archive file.")
    JsonSchemaFile_1_0_0_Location_ArchiveFile = restplus.fields.String(
            readonly=True,
            description="If the schema is hosted on the service in an archive file, this is the name of the file within the archive.")
    JsonSchemaFile_1_0_0_Location_PublicationUri = restplus.fields.String(
            readonly=True,
            description="Link to publicly available (canonical) URI for schema.")
    JsonSchemaFile_1_0_0_Location_Language = restplus.fields.String(
            readonly=True,
            description="The language code for the file the schema is in.")
    JsonSchemaFile_1_0_0_Location_Uri = restplus.fields.String(
            readonly=True,
            description="Link to locally available URI for schema.")

    JsonSchemaFile_1_0_0_Location = namespace.model("JsonSchemaFile_1_0_0_Location",
    {
        "ArchiveUri": JsonSchemaFile_1_0_0_Location_ArchiveUri,
        "ArchiveFile": JsonSchemaFile_1_0_0_Location_ArchiveFile,
        "PublicationUri": JsonSchemaFile_1_0_0_Location_PublicationUri,
        "Language": JsonSchemaFile_1_0_0_Location_Language,
        "Uri": JsonSchemaFile_1_0_0_Location_Uri,
    })

    #
    # LogEntryCollection_LogEntryCollectionOem
    #

    LogEntryCollection_LogEntryCollectionOem_PolledAt = restplus.fields.String(
            readonly=True,
            description="This is the timestamp at which information on this page was gathered")

    LogEntryCollection_LogEntryCollectionOem = namespace.model("LogEntryCollection_LogEntryCollectionOem",
    {
        "PolledAt": LogEntryCollection_LogEntryCollectionOem_PolledAt,
    })

    #
    # LogEntry_1_0_0_LogEntryOem
    #

    LogEntry_1_0_0_LogEntryOem_PolledAt = restplus.fields.String(
            readonly=True,
            description="This is the timestamp at which information on this page was gathered")

    LogEntry_1_0_0_LogEntryOem = namespace.model("LogEntry_1_0_0_LogEntryOem",
    {
        "PolledAt": LogEntry_1_0_0_LogEntryOem_PolledAt,
    })

    #
    # LogService_1_0_0_ClearLog
    #

    LogService_1_0_0_ClearLog_title = restplus.fields.String(
            description="Friendly action name")
    LogService_1_0_0_ClearLog_target = restplus.fields.String(
            description="Link to invoke action")

    LogService_1_0_0_ClearLog = namespace.model("LogService_1_0_0_ClearLog",
    {
        "title": LogService_1_0_0_ClearLog_title,
        "target": LogService_1_0_0_ClearLog_target,
    })

    #
    # LogService_1_0_0_LogService_Actions_Oem
    #


    LogService_1_0_0_LogService_Actions_Oem = namespace.model("LogService_1_0_0_LogService_Actions_Oem",
    {
    })

    #
    # ManagerNetworkProtocol_1_0_0_Protocol
    #

    ManagerNetworkProtocol_1_0_0_Protocol_ProtocolEnabled = restplus.fields.Boolean(
            description="Indicates if the protocol is enabled or disabled")
    ManagerNetworkProtocol_1_0_0_Protocol_Port = restplus.fields.Float(
            description="Indicates the protocol port.")

    ManagerNetworkProtocol_1_0_0_Protocol = namespace.model("ManagerNetworkProtocol_1_0_0_Protocol",
    {
        "ProtocolEnabled": ManagerNetworkProtocol_1_0_0_Protocol_ProtocolEnabled,
        "Port": ManagerNetworkProtocol_1_0_0_Protocol_Port,
    })

    #
    # Manager_1_0_0_ForceFailover
    #

    Manager_1_0_0_ForceFailover_target = restplus.fields.String(
            description="Link to invoke action")
    Manager_1_0_0_ForceFailover_title = restplus.fields.String(
            description="Friendly action name")

    Manager_1_0_0_ForceFailover = namespace.model("Manager_1_0_0_ForceFailover",
    {
        "target": Manager_1_0_0_ForceFailover_target,
        "title": Manager_1_0_0_ForceFailover_title,
    })

    #
    # Manager_1_0_0_Manager_Actions_Oem
    #


    Manager_1_0_0_Manager_Actions_Oem = namespace.model("Manager_1_0_0_Manager_Actions_Oem",
    {
    })

    #
    # Manager_1_0_0_ModifyRedundancySet
    #

    Manager_1_0_0_ModifyRedundancySet_title = restplus.fields.String(
            description="Friendly action name")
    Manager_1_0_0_ModifyRedundancySet_target = restplus.fields.String(
            description="Link to invoke action")

    Manager_1_0_0_ModifyRedundancySet = namespace.model("Manager_1_0_0_ModifyRedundancySet",
    {
        "title": Manager_1_0_0_ModifyRedundancySet_title,
        "target": Manager_1_0_0_ModifyRedundancySet_target,
    })

    #
    # Manager_1_0_0_Reset
    #

    Manager_1_0_0_Reset_target = restplus.fields.String(
            description="Link to invoke action")
    Manager_1_0_0_Reset_title = restplus.fields.String(
            description="Friendly action name")

    Manager_1_0_0_Reset = namespace.model("Manager_1_0_0_Reset",
    {
        "target": Manager_1_0_0_Reset_target,
        "title": Manager_1_0_0_Reset_title,
    })

    #
    # MessageRegistry_1_0_0_MessageProperty
    #


    MessageRegistry_1_0_0_MessageProperty = namespace.model("MessageRegistry_1_0_0_MessageProperty",
    {
    })

    #
    # Onrack_BootImageParamIpSetting
    #

    Onrack_BootImageParamIpSetting_ipAddr = restplus.fields.String(
            readonly=False,
            description="(Required) This is the assigned static IP address of the network device")
    Onrack_BootImageParamIpSetting_vlanId = restplus.fields.String(
            readonly=False,
            description=" (Optional) This is the VLAN ID represented as a array of integers with values of 0 to 4096")
    Onrack_BootImageParamIpSetting_gateway = restplus.fields.String(
            readonly=False,
            description="(Required) This is the gateway address.")
    Onrack_BootImageParamIpSetting_netmask = restplus.fields.String(
            readonly=False,
            description="(Required) This is the subnet mask")

    Onrack_BootImageParamIpSetting = namespace.model("Onrack_BootImageParamIpSetting",
    {
        "ipAddr": Onrack_BootImageParamIpSetting_ipAddr,
        "vlanId": Onrack_BootImageParamIpSetting_vlanId,
        "gateway": Onrack_BootImageParamIpSetting_gateway,
        "netmask": Onrack_BootImageParamIpSetting_netmask,
    })

    #
    # Onrack_BootImageParamUser
    #

    Onrack_BootImageParamUser_password = restplus.fields.String(
            readonly=False,
            description="(Required) This is the password of user, it should pass the clear text, OnRack will do encryption before storing it into a kickstart file.")
    Onrack_BootImageParamUser_sshKey = restplus.fields.String(
            readonly=False,
            description="(Optional) This is the SSH key that will be appended into the file ~/.ssh/authorized_keys")
    Onrack_BootImageParamUser_uid = restplus.fields.Float(
            readonly=False,
            description="(Required) The unique identifier of user")
    Onrack_BootImageParamUser_name = restplus.fields.String(
            readonly=False,
            description="(Required) This is the name of user")

    Onrack_BootImageParamUser = namespace.model("Onrack_BootImageParamUser",
    {
        "password": Onrack_BootImageParamUser_password,
        "sshKey": Onrack_BootImageParamUser_sshKey,
        "uid": Onrack_BootImageParamUser_uid,
        "name": Onrack_BootImageParamUser_name,
    })

    #
    # Onrack_FilenameRequestModel
    #

    Onrack_FilenameRequestModel_filename = restplus.fields.String(
            readonly=False,
            description="Name of flash image.")

    Onrack_FilenameRequestModel = namespace.model("Onrack_FilenameRequestModel",
    {
        "filename": Onrack_FilenameRequestModel_filename,
    })

    #
    # Onrack_FlashAllModel
    #

    Onrack_FlashAllModel_bios_file = restplus.fields.String(
            readonly=False,
            description="(Required) Name of BIOS image.")
    Onrack_FlashAllModel_megaraid_file = restplus.fields.String(
            readonly=False,
            description="(Required) Name of MegaRaid image.")
    Onrack_FlashAllModel_bmc_file = restplus.fields.String(
            readonly=False,
            description="(Required) Name of BMC image.")

    Onrack_FlashAllModel = namespace.model("Onrack_FlashAllModel",
    {
        "bios-file": Onrack_FlashAllModel_bios_file,
        "megaraid-file": Onrack_FlashAllModel_megaraid_file,
        "bmc-file": Onrack_FlashAllModel_bmc_file,
    })

    #
    # Onrack_MgmtAddNodeModel
    #

    Onrack_MgmtAddNodeModel_user = restplus.fields.String(
            description="(Required) This is the password associated with the management node BMC user name.  It should be passed in clear text.")
    Onrack_MgmtAddNodeModel_password = restplus.fields.String(
            readonly=False,
            description="(Required) This is the password associated with the management node BMC user name.  It should passed in clear text.")
    Onrack_MgmtAddNodeModel_ipaddress = restplus.fields.String(
            readonly=False,
            description="(Required) Management node BMC IP address ")

    Onrack_MgmtAddNodeModel = namespace.model("Onrack_MgmtAddNodeModel",
    {
        "user": Onrack_MgmtAddNodeModel_user,
        "password": Onrack_MgmtAddNodeModel_password,
        "ipaddress": Onrack_MgmtAddNodeModel_ipaddress,
    })

    #
    # Onrack_PDUAddNodeModel
    #

    Onrack_PDUAddNodeModel_community = restplus.fields.String(
            readonly=False,
            description="(Required) This is the SNMP community of the PDU.")
    Onrack_PDUAddNodeModel_ipaddress = restplus.fields.String(
            readonly=False,
            description="(Required) This is the assigned static IP address of the PDU")

    Onrack_PDUAddNodeModel = namespace.model("Onrack_PDUAddNodeModel",
    {
        "community": Onrack_PDUAddNodeModel_community,
        "ipaddress": Onrack_PDUAddNodeModel_ipaddress,
    })

    #
    # Onrack_RefreshNodeActionItemModelRequest
    #

    Onrack_RefreshNodeActionItemModelRequest_reset = restplus.fields.Boolean(
            readonly=True,
            description="When true, initiate an immediate reset of the node as part of the refresh")

    Onrack_RefreshNodeActionItemModelRequest = namespace.model("Onrack_RefreshNodeActionItemModelRequest",
    {
        "reset": Onrack_RefreshNodeActionItemModelRequest_reset,
    })

    #
    # Onrack_SwitchAddNodeModel
    #

    Onrack_SwitchAddNodeModel_community = restplus.fields.String(
            readonly=False,
            description="(Required) This is the SNMP community of the switch.")
    Onrack_SwitchAddNodeModel_ipaddress = restplus.fields.String(
            readonly=False,
            description="(Required) This is the assigned static IP address of the switch")

    Onrack_SwitchAddNodeModel = namespace.model("Onrack_SwitchAddNodeModel",
    {
        "community": Onrack_SwitchAddNodeModel_community,
        "ipaddress": Onrack_SwitchAddNodeModel_ipaddress,
    })

    #
    # PDUMetric_1_0_0_OutletInformation
    #

    PDUMetric_1_0_0_OutletInformation_pduOutOn = restplus.fields.String(
            readonly=True,
            description="This property shall specify the power state of the outlet")
    PDUMetric_1_0_0_OutletInformation_pduOutPFactorValue = restplus.fields.String(
            readonly=True,
            description="")
    PDUMetric_1_0_0_OutletInformation_pduOutName = restplus.fields.String(
            readonly=True,
            description="This property shall specify the outlet name")
    PDUMetric_1_0_0_OutletInformation_pduOutKWHrValue = restplus.fields.String(
            readonly=True,
            description="This property shall specify the KWHr value for this outlet")
    PDUMetric_1_0_0_OutletInformation_pduOutMeanKVAValue = restplus.fields.String(
            description="This property shall specify the mean KVA Value for this outlet")
    PDUMetric_1_0_0_OutletInformation_pduOutRMSAmpsPeak = restplus.fields.String(
            readonly=True,
            description="This property shall specify the peak RMS Amps value for this outlet")
    PDUMetric_1_0_0_OutletInformation_Name = restplus.fields.String(
            readonly=True,
            description="This property shall specify the assigned name of this outlet")
    PDUMetric_1_0_0_OutletInformation_pduOutRMSAmpsValue = restplus.fields.String(
            readonly=True,
            description="This property shall specify the RMS amps value for this outlet")

    PDUMetric_1_0_0_OutletInformation = namespace.model("PDUMetric_1_0_0_OutletInformation",
    {
        "pduOutOn": PDUMetric_1_0_0_OutletInformation_pduOutOn,
        "pduOutPFactorValue": PDUMetric_1_0_0_OutletInformation_pduOutPFactorValue,
        "pduOutName": PDUMetric_1_0_0_OutletInformation_pduOutName,
        "pduOutKWHrValue": PDUMetric_1_0_0_OutletInformation_pduOutKWHrValue,
        "pduOutMeanKVAValue": PDUMetric_1_0_0_OutletInformation_pduOutMeanKVAValue,
        "pduOutRMSAmpsPeak": PDUMetric_1_0_0_OutletInformation_pduOutRMSAmpsPeak,
        "Name": PDUMetric_1_0_0_OutletInformation_Name,
        "pduOutRMSAmpsValue": PDUMetric_1_0_0_OutletInformation_pduOutRMSAmpsValue,
    })

    #
    # PDUMetric_1_0_0_PDUOem
    #

    PDUMetric_1_0_0_PDUOem_PolledAt = restplus.fields.String(
            readonly=True,
            description="This is the timestamp at which information on this page was gathered")

    PDUMetric_1_0_0_PDUOem = namespace.model("PDUMetric_1_0_0_PDUOem",
    {
        "PolledAt": PDUMetric_1_0_0_PDUOem_PolledAt,
    })

    #
    # PDU_1_0_0_PDUs
    #

    PDU_1_0_0_PDUs_NumberOfOutlets = restplus.fields.Float(
            description="")
    PDU_1_0_0_PDUs_PDUId = restplus.fields.String(
            readonly=True,
            description="")
    inner_PDU_1_0_0_PDUs_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    PDU_1_0_0_PDUs_Name = inner_PDU_1_0_0_PDUs_Name


    PDU_1_0_0_PDUs = namespace.model("PDU_1_0_0_PDUs",
    {
        "NumberOfOutlets": PDU_1_0_0_PDUs_NumberOfOutlets,
        "PDUId": PDU_1_0_0_PDUs_PDUId,
        "Name": PDU_1_0_0_PDUs_Name,
    })

    #
    # PDU_1_0_0_VendorInformation
    #

    PDU_1_0_0_VendorInformation_ProductTestTime = restplus.fields.String(
            readonly=True,
            description="")
    PDU_1_0_0_VendorInformation_HWRevision = restplus.fields.String(
            readonly=True,
            description="")
    PDU_1_0_0_VendorInformation_FWRevision = restplus.fields.String(
            readonly=True,
            description="")
    PDU_1_0_0_VendorInformation_UnitName = restplus.fields.String(
            readonly=True,
            description="")
    PDU_1_0_0_VendorInformation_UnitPartNumber = restplus.fields.String(
            readonly=True,
            description="")
    PDU_1_0_0_VendorInformation_ProductSignatrue = restplus.fields.String(
            readonly=True,
            description="")
    PDU_1_0_0_VendorInformation_SerialNumber = restplus.fields.String(
            readonly=True,
            description="")
    PDU_1_0_0_VendorInformation_PlatformData = restplus.fields.String(
            readonly=True,
            description="")
    PDU_1_0_0_VendorInformation_PlatformHWType = restplus.fields.String(
            description="")
    PDU_1_0_0_VendorInformation_ManufactureCode = restplus.fields.String(
            readonly=True,
            description="")

    PDU_1_0_0_VendorInformation = namespace.model("PDU_1_0_0_VendorInformation",
    {
        "ProductTestTime": PDU_1_0_0_VendorInformation_ProductTestTime,
        "HWRevision": PDU_1_0_0_VendorInformation_HWRevision,
        "FWRevision": PDU_1_0_0_VendorInformation_FWRevision,
        "UnitName": PDU_1_0_0_VendorInformation_UnitName,
        "UnitPartNumber": PDU_1_0_0_VendorInformation_UnitPartNumber,
        "ProductSignatrue": PDU_1_0_0_VendorInformation_ProductSignatrue,
        "SerialNumber": PDU_1_0_0_VendorInformation_SerialNumber,
        "PlatformData": PDU_1_0_0_VendorInformation_PlatformData,
        "PlatformHWType": PDU_1_0_0_VendorInformation_PlatformHWType,
        "ManufactureCode": PDU_1_0_0_VendorInformation_ManufactureCode,
    })

    #
    # Power_1_0_0_PowerMetric
    #

    Power_1_0_0_PowerMetric_MinConsumedWatts = restplus.fields.Float(
            readonly=True,
            description="The lowest power consumption level over the measurement window (the last IntervalInMin minutes).")
    Power_1_0_0_PowerMetric_MaxConsumedWatts = restplus.fields.Float(
            readonly=True,
            description="The highest power consumption level that has occured over the measurement window (the last IntervalInMin minutes).")
    Power_1_0_0_PowerMetric_AverageConsumedWatts = restplus.fields.Float(
            readonly=True,
            description="The average power level over the measurement window (the last IntervalInMin minutes).")
    Power_1_0_0_PowerMetric_IntervalInMin = restplus.fields.Float(
            readonly=True,
            description="The time interval (or window) in which the PowerMetrics are measured over.")

    Power_1_0_0_PowerMetric = namespace.model("Power_1_0_0_PowerMetric",
    {
        "MinConsumedWatts": Power_1_0_0_PowerMetric_MinConsumedWatts,
        "MaxConsumedWatts": Power_1_0_0_PowerMetric_MaxConsumedWatts,
        "AverageConsumedWatts": Power_1_0_0_PowerMetric_AverageConsumedWatts,
        "IntervalInMin": Power_1_0_0_PowerMetric_IntervalInMin,
    })

    #
    # Power_1_0_0_PowerOem
    #

    Power_1_0_0_PowerOem_PolledAt = restplus.fields.String(
            readonly=True,
            description="This is the timestamp at which information on this page was gathered")

    Power_1_0_0_PowerOem = namespace.model("Power_1_0_0_PowerOem",
    {
        "PolledAt": Power_1_0_0_PowerOem_PolledAt,
    })

    #
    # Processor_1_0_0_ProcessorId
    #

    Processor_1_0_0_ProcessorId_IdentificationRegisters = restplus.fields.String(
            readonly=True,
            description="The contents of the Identification Registers (CPUID) for this processor")
    Processor_1_0_0_ProcessorId_EffectiveModel = restplus.fields.String(
            readonly=True,
            description="The effective Model for this processor")
    Processor_1_0_0_ProcessorId_Step = restplus.fields.String(
            readonly=True,
            description="The Step value for this processor")
    Processor_1_0_0_ProcessorId_MicrocodeInfo = restplus.fields.String(
            readonly=True,
            description="The Microcode Information for this processor")
    Processor_1_0_0_ProcessorId_EffectiveFamily = restplus.fields.String(
            readonly=True,
            description="The effective Family for this processor")
    Processor_1_0_0_ProcessorId_VendorId = restplus.fields.String(
            readonly=True,
            description="The Vendor Identification for this processor")

    Processor_1_0_0_ProcessorId = namespace.model("Processor_1_0_0_ProcessorId",
    {
        "IdentificationRegisters": Processor_1_0_0_ProcessorId_IdentificationRegisters,
        "EffectiveModel": Processor_1_0_0_ProcessorId_EffectiveModel,
        "Step": Processor_1_0_0_ProcessorId_Step,
        "MicrocodeInfo": Processor_1_0_0_ProcessorId_MicrocodeInfo,
        "EffectiveFamily": Processor_1_0_0_ProcessorId_EffectiveFamily,
        "VendorId": Processor_1_0_0_ProcessorId_VendorId,
    })

    #
    # Resource_Oem
    #


    Resource_Oem = namespace.model("Resource_Oem",
    {
    })

    #
    # Resource_ResourceCollection
    #

    inner_Resource_ResourceCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Resource_ResourceCollection_odata_type = inner_Resource_ResourceCollection_odata_type

    inner_Resource_ResourceCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Resource_ResourceCollection_odata_context = inner_Resource_ResourceCollection_odata_context

    inner_Resource_ResourceCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Resource_ResourceCollection_odata_id = inner_Resource_ResourceCollection_odata_id


    Resource_ResourceCollection = namespace.model("Resource_ResourceCollection",
    {
        "@odata.type": Resource_ResourceCollection_odata_type,
        "@odata.context": Resource_ResourceCollection_odata_context,
        "@odata.id": Resource_ResourceCollection_odata_id,
    })

    #
    # SimpleStorage_1_0_0_DeviceOem
    #

    SimpleStorage_1_0_0_DeviceOem_Type = restplus.fields.String(
            description="The storage device type ")
    SimpleStorage_1_0_0_DeviceOem_Capacity = restplus.fields.String(
            readonly=True,
            description="The capacity of this storage device")
    SimpleStorage_1_0_0_DeviceOem_SerialNumber = restplus.fields.String(
            readonly=True,
            description="The serial number for this storage device")

    SimpleStorage_1_0_0_DeviceOem = namespace.model("SimpleStorage_1_0_0_DeviceOem",
    {
        "Type": SimpleStorage_1_0_0_DeviceOem_Type,
        "Capacity": SimpleStorage_1_0_0_DeviceOem_Capacity,
        "SerialNumber": SimpleStorage_1_0_0_DeviceOem_SerialNumber,
    })

    #
    # SimpleStorage_1_0_0_StatusOem
    #

    SimpleStorage_1_0_0_StatusOem_Status = restplus.fields.String(
            readonly=True,
            description="The physical status of the storage device")
    SimpleStorage_1_0_0_StatusOem_Name = restplus.fields.String(
            readonly=True,
            description="The physical name of the of the storage device")

    SimpleStorage_1_0_0_StatusOem = namespace.model("SimpleStorage_1_0_0_StatusOem",
    {
        "Status": SimpleStorage_1_0_0_StatusOem_Status,
        "Name": SimpleStorage_1_0_0_StatusOem_Name,
    })

    #
    # SimpleStorage_1_0_0_VirtualDevice
    #

    SimpleStorage_1_0_0_VirtualDevice_Type = restplus.fields.String(
            readonly=True,
            description="The RAID type of this virtual storage device")
    SimpleStorage_1_0_0_VirtualDevice_Access = restplus.fields.String(
            readonly=True,
            description="The access permissions of this virtual storage device")
    SimpleStorage_1_0_0_VirtualDevice_Size = restplus.fields.String(
            readonly=True,
            description="The size of this virtual storage device")
    SimpleStorage_1_0_0_VirtualDevice_State = restplus.fields.String(
            readonly=True,
            description="The state of this virtual storage device")
    SimpleStorage_1_0_0_VirtualDevice_Name = restplus.fields.String(
            readonly=True,
            description="The name of the virtual storage device.")
    SimpleStorage_1_0_0_VirtualDevice_DriveIndex = restplus.fields.String(
            readonly=True,
            description="")

    SimpleStorage_1_0_0_VirtualDevice = namespace.model("SimpleStorage_1_0_0_VirtualDevice",
    {
        "Type": SimpleStorage_1_0_0_VirtualDevice_Type,
        "Access": SimpleStorage_1_0_0_VirtualDevice_Access,
        "Size": SimpleStorage_1_0_0_VirtualDevice_Size,
        "State": SimpleStorage_1_0_0_VirtualDevice_State,
        "Name": SimpleStorage_1_0_0_VirtualDevice_Name,
        "DriveIndex": SimpleStorage_1_0_0_VirtualDevice_DriveIndex,
    })

    #
    # Task_1_0_0_TaskOem
    #

    Task_1_0_0_TaskOem_SystemId = restplus.fields.String(
            description="System identifier")

    Task_1_0_0_TaskOem = namespace.model("Task_1_0_0_TaskOem",
    {
        "SystemId": Task_1_0_0_TaskOem_SystemId,
    })

    #
    # Thermal_1_0_0_ThermalOem
    #

    Thermal_1_0_0_ThermalOem_PolledAt = restplus.fields.String(
            readonly=True,
            description="This is the timestamp at which information on this page was gathered")

    Thermal_1_0_0_ThermalOem = namespace.model("Thermal_1_0_0_ThermalOem",
    {
        "PolledAt": Thermal_1_0_0_ThermalOem_PolledAt,
    })

    #
    # VLanNetworkInterface_1_0_0_VLAN
    #

    VLanNetworkInterface_1_0_0_VLAN_VLANEnable = restplus.fields.Boolean(
            description="This indicates if this VLAN is enabled.")
    inner_VLanNetworkInterface_1_0_0_VLAN_VLANId = restplus.fields.Float(
            )
    VLanNetworkInterface_1_0_0_VLAN_VLANId = inner_VLanNetworkInterface_1_0_0_VLAN_VLANId


    VLanNetworkInterface_1_0_0_VLAN = namespace.model("VLanNetworkInterface_1_0_0_VLAN",
    {
        "VLANEnable": VLanNetworkInterface_1_0_0_VLAN_VLANEnable,
        "VLANId": VLanNetworkInterface_1_0_0_VLAN_VLANId,
    })

    #
    # odata_4_0_0_idRef
    #

    inner_odata_4_0_0_idRef_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    odata_4_0_0_idRef_odata_id = inner_odata_4_0_0_idRef_odata_id


    odata_4_0_0_idRef = namespace.model("odata_4_0_0_idRef",
    {
        "@odata.id": odata_4_0_0_idRef_odata_id,
    })

    #
    # ChassisCollection_ChassisCollection
    #

    inner_ChassisCollection_ChassisCollection_Members = odata_4_0_0_idRef
    ChassisCollection_ChassisCollection_Members = restplus.fields.Nested(inner_ChassisCollection_ChassisCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_ChassisCollection_ChassisCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    ChassisCollection_ChassisCollection_Name = inner_ChassisCollection_ChassisCollection_Name

    inner_ChassisCollection_ChassisCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    ChassisCollection_ChassisCollection_Description = inner_ChassisCollection_ChassisCollection_Description

    inner_ChassisCollection_ChassisCollection_Oem = Resource_Oem
    ChassisCollection_ChassisCollection_Oem = restplus.fields.Nested(inner_ChassisCollection_ChassisCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_ChassisCollection_ChassisCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    ChassisCollection_ChassisCollection_odata_context = inner_ChassisCollection_ChassisCollection_odata_context

    inner_ChassisCollection_ChassisCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    ChassisCollection_ChassisCollection_odata_type = inner_ChassisCollection_ChassisCollection_odata_type

    inner_ChassisCollection_ChassisCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    ChassisCollection_ChassisCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_ChassisCollection_ChassisCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_ChassisCollection_ChassisCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    ChassisCollection_ChassisCollection_odata_id = inner_ChassisCollection_ChassisCollection_odata_id

    inner_ChassisCollection_ChassisCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    ChassisCollection_ChassisCollection_Membersodata_count = inner_ChassisCollection_ChassisCollection_Membersodata_count


    ChassisCollection_ChassisCollection = namespace.model("ChassisCollection_ChassisCollection",
    {
        "Name": ChassisCollection_ChassisCollection_Name,
        "Members": ChassisCollection_ChassisCollection_Members,
        "Description": ChassisCollection_ChassisCollection_Description,
        "Oem": ChassisCollection_ChassisCollection_Oem,
        "@odata.context": ChassisCollection_ChassisCollection_odata_context,
        "@odata.type": ChassisCollection_ChassisCollection_odata_type,
        "Members@odata.navigationLink": ChassisCollection_ChassisCollection_Membersodata_navigationLink,
        "@odata.id": ChassisCollection_ChassisCollection_odata_id,
        "Members@odata.count": ChassisCollection_ChassisCollection_Membersodata_count,
    })

    #
    # Chassis_1_0_0_Chassis_Actions
    #

    Chassis_1_0_0_Chassis_Actions_Oem = restplus.fields.Nested(Chassis_1_0_0_Chassis_Actions_Oem,
            )
    inner_Chassis_1_0_0_Chassis_Actions_Chassis_Reset = ComputerSystem_1_0_0_Reset
    Chassis_1_0_0_Chassis_Actions_Chassis_Reset = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Actions_Chassis_Reset,
            attribute="#Chassis_Reset")


    Chassis_1_0_0_Chassis_Actions = namespace.model("Chassis_1_0_0_Chassis_Actions",
    {
        "Oem": Chassis_1_0_0_Chassis_Actions_Oem,
        "#Chassis.Reset": Chassis_1_0_0_Chassis_Actions_Chassis_Reset,
    })

    #
    # Chassis_1_0_0_Chassis_Links
    #

    inner_Chassis_1_0_0_Chassis_Links_ManagedBy = odata_4_0_0_idRef
    Chassis_1_0_0_Chassis_Links_ManagedBy = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Links_ManagedBy, as_list=True,
            readonly=True,
            description="An array of references to the managers contained in this chassis.")

    inner_Chassis_1_0_0_Chassis_Links_PoweredBy = odata_4_0_0_idRef
    Chassis_1_0_0_Chassis_Links_PoweredBy = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Links_PoweredBy, as_list=True,
            readonly=True,
            description="An array of ID[s] of resources that power this chassis. Normally the ID will be a chassis or a specific set of powerSupplies")

    inner_Chassis_1_0_0_Chassis_Links_Contains = odata_4_0_0_idRef
    Chassis_1_0_0_Chassis_Links_Contains = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Links_Contains, as_list=True,
            readonly=True,
            description="An array of references to any other chassis that this chassis has in it.")

    inner_Chassis_1_0_0_Chassis_Links_CooledBy = odata_4_0_0_idRef
    Chassis_1_0_0_Chassis_Links_CooledBy = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Links_CooledBy, as_list=True,
            readonly=True,
            description="An array of ID[s] of resources that cool this chassis. Normally the ID will be a chassis or a specific set of fans.")

    inner_Chassis_1_0_0_Chassis_Links_ComputerSystems = odata_4_0_0_idRef
    Chassis_1_0_0_Chassis_Links_ComputerSystems = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Links_ComputerSystems, as_list=True,
            readonly=True,
            description="An array of references to the computer systems contained in this chassis.  This will only reference ComputerSystems that are directly and wholly contained in this chassis.")

    inner_Chassis_1_0_0_Chassis_Links_PoweredByodata_navigationLink = odata_4_0_0_idRef
    Chassis_1_0_0_Chassis_Links_PoweredByodata_navigationLink = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Links_PoweredByodata_navigationLink,
            attribute="PoweredByodata_navigationLink")

    inner_Chassis_1_0_0_Chassis_Links_ComputerSystemsodata_navigationLink = odata_4_0_0_idRef
    Chassis_1_0_0_Chassis_Links_ComputerSystemsodata_navigationLink = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Links_ComputerSystemsodata_navigationLink,
            attribute="ComputerSystemsodata_navigationLink")

    inner_Chassis_1_0_0_Chassis_Links_ManagedByodata_navigationLink = odata_4_0_0_idRef
    Chassis_1_0_0_Chassis_Links_ManagedByodata_navigationLink = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Links_ManagedByodata_navigationLink,
            attribute="ManagedByodata_navigationLink")

    inner_Chassis_1_0_0_Chassis_Links_ContainedBy = odata_4_0_0_idRef
    Chassis_1_0_0_Chassis_Links_ContainedBy = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Links_ContainedBy,
            readonly=True,
            description="A reference to the chassis that this chassis is contained by.")

    inner_Chassis_1_0_0_Chassis_Links_ComputerSystemsodata_count = restplus.fields.Float(
            attribute="ComputerSystemsodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Chassis_1_0_0_Chassis_Links_ComputerSystemsodata_count = inner_Chassis_1_0_0_Chassis_Links_ComputerSystemsodata_count

    inner_Chassis_1_0_0_Chassis_Links_Containsodata_count = restplus.fields.Float(
            attribute="Containsodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Chassis_1_0_0_Chassis_Links_Containsodata_count = inner_Chassis_1_0_0_Chassis_Links_Containsodata_count

    inner_Chassis_1_0_0_Chassis_Links_CooledByodata_navigationLink = odata_4_0_0_idRef
    Chassis_1_0_0_Chassis_Links_CooledByodata_navigationLink = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Links_CooledByodata_navigationLink,
            attribute="CooledByodata_navigationLink")

    inner_Chassis_1_0_0_Chassis_Links_PoweredByodata_count = restplus.fields.Float(
            attribute="PoweredByodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Chassis_1_0_0_Chassis_Links_PoweredByodata_count = inner_Chassis_1_0_0_Chassis_Links_PoweredByodata_count

    inner_Chassis_1_0_0_Chassis_Links_ManagedByodata_count = restplus.fields.Float(
            attribute="ManagedByodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Chassis_1_0_0_Chassis_Links_ManagedByodata_count = inner_Chassis_1_0_0_Chassis_Links_ManagedByodata_count

    inner_Chassis_1_0_0_Chassis_Links_CooledByodata_count = restplus.fields.Float(
            attribute="CooledByodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Chassis_1_0_0_Chassis_Links_CooledByodata_count = inner_Chassis_1_0_0_Chassis_Links_CooledByodata_count

    inner_Chassis_1_0_0_Chassis_Links_Oem = Resource_Oem
    Chassis_1_0_0_Chassis_Links_Oem = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Links_Oem,
            description="Oem extension object.")

    inner_Chassis_1_0_0_Chassis_Links_Containsodata_navigationLink = odata_4_0_0_idRef
    Chassis_1_0_0_Chassis_Links_Containsodata_navigationLink = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Links_Containsodata_navigationLink,
            attribute="Containsodata_navigationLink")


    Chassis_1_0_0_Chassis_Links = namespace.model("Chassis_1_0_0_Chassis_Links",
    {
        "PoweredBy@odata.navigationLink": Chassis_1_0_0_Chassis_Links_PoweredByodata_navigationLink,
        "ComputerSystems@odata.navigationLink": Chassis_1_0_0_Chassis_Links_ComputerSystemsodata_navigationLink,
        "ManagedBy": Chassis_1_0_0_Chassis_Links_ManagedBy,
        "ManagedBy@odata.navigationLink": Chassis_1_0_0_Chassis_Links_ManagedByodata_navigationLink,
        "ContainedBy": Chassis_1_0_0_Chassis_Links_ContainedBy,
        "ComputerSystems@odata.count": Chassis_1_0_0_Chassis_Links_ComputerSystemsodata_count,
        "Contains@odata.count": Chassis_1_0_0_Chassis_Links_Containsodata_count,
        "CooledBy@odata.navigationLink": Chassis_1_0_0_Chassis_Links_CooledByodata_navigationLink,
        "PoweredBy@odata.count": Chassis_1_0_0_Chassis_Links_PoweredByodata_count,
        "PoweredBy": Chassis_1_0_0_Chassis_Links_PoweredBy,
        "ManagedBy@odata.count": Chassis_1_0_0_Chassis_Links_ManagedByodata_count,
        "Contains": Chassis_1_0_0_Chassis_Links_Contains,
        "CooledBy": Chassis_1_0_0_Chassis_Links_CooledBy,
        "CooledBy@odata.count": Chassis_1_0_0_Chassis_Links_CooledByodata_count,
        "Oem": Chassis_1_0_0_Chassis_Links_Oem,
        "Contains@odata.navigationLink": Chassis_1_0_0_Chassis_Links_Containsodata_navigationLink,
        "ComputerSystems": Chassis_1_0_0_Chassis_Links_ComputerSystems,
    })

    #
    # Chassis_1_0_0_Chassis_Oem
    #

    Chassis_1_0_0_Chassis_Oem_EMC = restplus.fields.Nested(Chassis_1_0_0_Chassis_Oem_EMC,
            )

    Chassis_1_0_0_Chassis_Oem = namespace.model("Chassis_1_0_0_Chassis_Oem",
    {
        "EMC": Chassis_1_0_0_Chassis_Oem_EMC,
    })

    #
    # ComputerSystemCollection_ComputerSystemCollection
    #

    inner_ComputerSystemCollection_ComputerSystemCollection_Members = odata_4_0_0_idRef
    ComputerSystemCollection_ComputerSystemCollection_Members = restplus.fields.Nested(inner_ComputerSystemCollection_ComputerSystemCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_ComputerSystemCollection_ComputerSystemCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    ComputerSystemCollection_ComputerSystemCollection_Description = inner_ComputerSystemCollection_ComputerSystemCollection_Description

    inner_ComputerSystemCollection_ComputerSystemCollection_Oem = Resource_Oem
    ComputerSystemCollection_ComputerSystemCollection_Oem = restplus.fields.Nested(inner_ComputerSystemCollection_ComputerSystemCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_ComputerSystemCollection_ComputerSystemCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    ComputerSystemCollection_ComputerSystemCollection_odata_type = inner_ComputerSystemCollection_ComputerSystemCollection_odata_type

    inner_ComputerSystemCollection_ComputerSystemCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    ComputerSystemCollection_ComputerSystemCollection_Name = inner_ComputerSystemCollection_ComputerSystemCollection_Name

    inner_ComputerSystemCollection_ComputerSystemCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    ComputerSystemCollection_ComputerSystemCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_ComputerSystemCollection_ComputerSystemCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_ComputerSystemCollection_ComputerSystemCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    ComputerSystemCollection_ComputerSystemCollection_Membersodata_count = inner_ComputerSystemCollection_ComputerSystemCollection_Membersodata_count

    inner_ComputerSystemCollection_ComputerSystemCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    ComputerSystemCollection_ComputerSystemCollection_odata_context = inner_ComputerSystemCollection_ComputerSystemCollection_odata_context

    inner_ComputerSystemCollection_ComputerSystemCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    ComputerSystemCollection_ComputerSystemCollection_odata_id = inner_ComputerSystemCollection_ComputerSystemCollection_odata_id


    ComputerSystemCollection_ComputerSystemCollection = namespace.model("ComputerSystemCollection_ComputerSystemCollection",
    {
        "Description": ComputerSystemCollection_ComputerSystemCollection_Description,
        "Oem": ComputerSystemCollection_ComputerSystemCollection_Oem,
        "Members": ComputerSystemCollection_ComputerSystemCollection_Members,
        "@odata.type": ComputerSystemCollection_ComputerSystemCollection_odata_type,
        "Name": ComputerSystemCollection_ComputerSystemCollection_Name,
        "Members@odata.navigationLink": ComputerSystemCollection_ComputerSystemCollection_Membersodata_navigationLink,
        "Members@odata.count": ComputerSystemCollection_ComputerSystemCollection_Membersodata_count,
        "@odata.context": ComputerSystemCollection_ComputerSystemCollection_odata_context,
        "@odata.id": ComputerSystemCollection_ComputerSystemCollection_odata_id,
    })

    #
    # ComputerSystem_1_0_0_Boot
    #

    ComputerSystem_1_0_0_Boot_UefiTargetBootSourceOverride = restplus.fields.String(
            readonly=False,
            description="This property is the Uefi Device Path of the device to boot from when BootSourceOverrideSupported is UefiTarget.")
    inner_ComputerSystem_1_0_0_Boot_BootSourceOverrideTarget = restplus.fields.String(
            enum=ComputerSystem_1_0_0_BootSource,
            description="None: Boot from the normal boot device, Usb: Boot from a USB device as specified by the system BIOS, Floppy: Boot from the floppy disk drive, BiosSetup: Boot to the BIOS Setup Utility, Utilities: Boot the manufacturer's Utilities program(s), Cd: Boot from the CD/DVD disc, Diags: Boot the manufacturer's Diagnostics program, Hdd: Boot from a hard drive, UefiShell: Boot to the UEFI Shell, UefiTarget: Boot to the UEFI Device specified in the UefiTargetBootSourceOverride property, Pxe: Boot from the Pre-Boot EXecution (PXE) environment")
    ComputerSystem_1_0_0_Boot_BootSourceOverrideTarget = inner_ComputerSystem_1_0_0_Boot_BootSourceOverrideTarget

    inner_ComputerSystem_1_0_0_Boot_BootSourceOverrideEnabled = restplus.fields.String(
            enum=ComputerSystem_1_0_0_BootSourceOverrideEnabled,
            description="Disabled: The system will boot as normal, Continuous: The system will boot to the target specified in the BootSourceOverrideTarget until this property is set to Disabled., Once: On its next boot cycle, the system will boot (one time) to the Boot Source Override Target.")
    ComputerSystem_1_0_0_Boot_BootSourceOverrideEnabled = inner_ComputerSystem_1_0_0_Boot_BootSourceOverrideEnabled


    ComputerSystem_1_0_0_Boot = namespace.model("ComputerSystem_1_0_0_Boot",
    {
        "BootSourceOverrideTarget": ComputerSystem_1_0_0_Boot_BootSourceOverrideTarget,
        "BootSourceOverrideEnabled": ComputerSystem_1_0_0_Boot_BootSourceOverrideEnabled,
        "UefiTargetBootSourceOverride": ComputerSystem_1_0_0_Boot_UefiTargetBootSourceOverride,
    })

    #
    # ComputerSystem_1_0_0_ComputerSystem_Actions_Oem
    #

    inner_ComputerSystem_1_0_0_ComputerSystem_Actions_Oem_OnRack_BootImage = ComputerSystem_1_0_0_BootImage
    ComputerSystem_1_0_0_ComputerSystem_Actions_Oem_OnRack_BootImage = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_Actions_Oem_OnRack_BootImage,
            attribute="OnRack_BootImage",
            description="This is a reference to the system load boot image action.")


    ComputerSystem_1_0_0_ComputerSystem_Actions_Oem = namespace.model("ComputerSystem_1_0_0_ComputerSystem_Actions_Oem",
    {
        "OnRack.BootImage": ComputerSystem_1_0_0_ComputerSystem_Actions_Oem_OnRack_BootImage,
    })

    #
    # ComputerSystem_1_0_0_ComputerSystem_Links
    #

    inner_ComputerSystem_1_0_0_ComputerSystem_Links_PoweredBy = odata_4_0_0_idRef
    ComputerSystem_1_0_0_ComputerSystem_Links_PoweredBy = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_Links_PoweredBy, as_list=True,
            readonly=True,
            description="An array of ID[s] of resources that power this computer system. Normally the ID will be a chassis or a specific set of powerSupplies")

    inner_ComputerSystem_1_0_0_ComputerSystem_Links_CooledBy = odata_4_0_0_idRef
    ComputerSystem_1_0_0_ComputerSystem_Links_CooledBy = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_Links_CooledBy, as_list=True,
            readonly=True,
            description="An array of ID[s] of resources that cool this computer system. Normally the ID will be a chassis or a specific set of fans.")

    inner_ComputerSystem_1_0_0_ComputerSystem_Links_ManagedBy = odata_4_0_0_idRef
    ComputerSystem_1_0_0_ComputerSystem_Links_ManagedBy = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_Links_ManagedBy, as_list=True,
            readonly=True,
            description="An array of references to the Managers responsible for this system")

    inner_ComputerSystem_1_0_0_ComputerSystem_Links_Chassis = odata_4_0_0_idRef
    ComputerSystem_1_0_0_ComputerSystem_Links_Chassis = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_Links_Chassis, as_list=True,
            readonly=True,
            description="An array of references to the chassis in which this system is contained")

    inner_ComputerSystem_1_0_0_ComputerSystem_Links_Oem = Resource_Oem
    ComputerSystem_1_0_0_ComputerSystem_Links_Oem = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_Links_Oem,
            description="Oem extension object.")

    inner_ComputerSystem_1_0_0_ComputerSystem_Links_ManagedByodata_navigationLink = odata_4_0_0_idRef
    ComputerSystem_1_0_0_ComputerSystem_Links_ManagedByodata_navigationLink = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_Links_ManagedByodata_navigationLink,
            attribute="ManagedByodata_navigationLink")

    inner_ComputerSystem_1_0_0_ComputerSystem_Links_ManagedByodata_count = restplus.fields.Float(
            attribute="ManagedByodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    ComputerSystem_1_0_0_ComputerSystem_Links_ManagedByodata_count = inner_ComputerSystem_1_0_0_ComputerSystem_Links_ManagedByodata_count

    inner_ComputerSystem_1_0_0_ComputerSystem_Links_CooledByodata_navigationLink = odata_4_0_0_idRef
    ComputerSystem_1_0_0_ComputerSystem_Links_CooledByodata_navigationLink = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_Links_CooledByodata_navigationLink,
            attribute="CooledByodata_navigationLink")

    inner_ComputerSystem_1_0_0_ComputerSystem_Links_CooledByodata_count = restplus.fields.Float(
            attribute="CooledByodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    ComputerSystem_1_0_0_ComputerSystem_Links_CooledByodata_count = inner_ComputerSystem_1_0_0_ComputerSystem_Links_CooledByodata_count

    inner_ComputerSystem_1_0_0_ComputerSystem_Links_Chassisodata_navigationLink = odata_4_0_0_idRef
    ComputerSystem_1_0_0_ComputerSystem_Links_Chassisodata_navigationLink = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_Links_Chassisodata_navigationLink,
            attribute="Chassisodata_navigationLink")

    inner_ComputerSystem_1_0_0_ComputerSystem_Links_Chassisodata_count = restplus.fields.Float(
            attribute="Chassisodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    ComputerSystem_1_0_0_ComputerSystem_Links_Chassisodata_count = inner_ComputerSystem_1_0_0_ComputerSystem_Links_Chassisodata_count

    inner_ComputerSystem_1_0_0_ComputerSystem_Links_PoweredByodata_count = restplus.fields.Float(
            attribute="PoweredByodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    ComputerSystem_1_0_0_ComputerSystem_Links_PoweredByodata_count = inner_ComputerSystem_1_0_0_ComputerSystem_Links_PoweredByodata_count

    inner_ComputerSystem_1_0_0_ComputerSystem_Links_PoweredByodata_navigationLink = odata_4_0_0_idRef
    ComputerSystem_1_0_0_ComputerSystem_Links_PoweredByodata_navigationLink = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_Links_PoweredByodata_navigationLink,
            attribute="PoweredByodata_navigationLink")


    ComputerSystem_1_0_0_ComputerSystem_Links = namespace.model("ComputerSystem_1_0_0_ComputerSystem_Links",
    {
        "Oem": ComputerSystem_1_0_0_ComputerSystem_Links_Oem,
        "ManagedBy@odata.navigationLink": ComputerSystem_1_0_0_ComputerSystem_Links_ManagedByodata_navigationLink,
        "PoweredBy": ComputerSystem_1_0_0_ComputerSystem_Links_PoweredBy,
        "ManagedBy@odata.count": ComputerSystem_1_0_0_ComputerSystem_Links_ManagedByodata_count,
        "CooledBy@odata.navigationLink": ComputerSystem_1_0_0_ComputerSystem_Links_CooledByodata_navigationLink,
        "CooledBy@odata.count": ComputerSystem_1_0_0_ComputerSystem_Links_CooledByodata_count,
        "CooledBy": ComputerSystem_1_0_0_ComputerSystem_Links_CooledBy,
        "ManagedBy": ComputerSystem_1_0_0_ComputerSystem_Links_ManagedBy,
        "Chassis@odata.navigationLink": ComputerSystem_1_0_0_ComputerSystem_Links_Chassisodata_navigationLink,
        "Chassis@odata.count": ComputerSystem_1_0_0_ComputerSystem_Links_Chassisodata_count,
        "PoweredBy@odata.count": ComputerSystem_1_0_0_ComputerSystem_Links_PoweredByodata_count,
        "PoweredBy@odata.navigationLink": ComputerSystem_1_0_0_ComputerSystem_Links_PoweredByodata_navigationLink,
        "Chassis": ComputerSystem_1_0_0_ComputerSystem_Links_Chassis,
    })

    #
    # ComputerSystem_1_0_0_ComputerSystem_Oem
    #

    ComputerSystem_1_0_0_ComputerSystem_Oem_EMC = restplus.fields.Nested(ComputerSystem_1_0_0_ComputerSystem_Oem_EMC,
            )

    ComputerSystem_1_0_0_ComputerSystem_Oem = namespace.model("ComputerSystem_1_0_0_ComputerSystem_Oem",
    {
        "EMC": ComputerSystem_1_0_0_ComputerSystem_Oem_EMC,
    })

    #
    # EthernetInterfaceCollection_EthernetInterfaceCollection
    #

    inner_EthernetInterfaceCollection_EthernetInterfaceCollection_Members = odata_4_0_0_idRef
    EthernetInterfaceCollection_EthernetInterfaceCollection_Members = restplus.fields.Nested(inner_EthernetInterfaceCollection_EthernetInterfaceCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_EthernetInterfaceCollection_EthernetInterfaceCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    EthernetInterfaceCollection_EthernetInterfaceCollection_Description = inner_EthernetInterfaceCollection_EthernetInterfaceCollection_Description

    inner_EthernetInterfaceCollection_EthernetInterfaceCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    EthernetInterfaceCollection_EthernetInterfaceCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_EthernetInterfaceCollection_EthernetInterfaceCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_EthernetInterfaceCollection_EthernetInterfaceCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    EthernetInterfaceCollection_EthernetInterfaceCollection_Name = inner_EthernetInterfaceCollection_EthernetInterfaceCollection_Name

    inner_EthernetInterfaceCollection_EthernetInterfaceCollection_Oem = Resource_Oem
    EthernetInterfaceCollection_EthernetInterfaceCollection_Oem = restplus.fields.Nested(inner_EthernetInterfaceCollection_EthernetInterfaceCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_EthernetInterfaceCollection_EthernetInterfaceCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    EthernetInterfaceCollection_EthernetInterfaceCollection_odata_type = inner_EthernetInterfaceCollection_EthernetInterfaceCollection_odata_type

    inner_EthernetInterfaceCollection_EthernetInterfaceCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    EthernetInterfaceCollection_EthernetInterfaceCollection_odata_id = inner_EthernetInterfaceCollection_EthernetInterfaceCollection_odata_id

    inner_EthernetInterfaceCollection_EthernetInterfaceCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    EthernetInterfaceCollection_EthernetInterfaceCollection_odata_context = inner_EthernetInterfaceCollection_EthernetInterfaceCollection_odata_context

    inner_EthernetInterfaceCollection_EthernetInterfaceCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    EthernetInterfaceCollection_EthernetInterfaceCollection_Membersodata_count = inner_EthernetInterfaceCollection_EthernetInterfaceCollection_Membersodata_count


    EthernetInterfaceCollection_EthernetInterfaceCollection = namespace.model("EthernetInterfaceCollection_EthernetInterfaceCollection",
    {
        "Description": EthernetInterfaceCollection_EthernetInterfaceCollection_Description,
        "Members": EthernetInterfaceCollection_EthernetInterfaceCollection_Members,
        "Members@odata.navigationLink": EthernetInterfaceCollection_EthernetInterfaceCollection_Membersodata_navigationLink,
        "Name": EthernetInterfaceCollection_EthernetInterfaceCollection_Name,
        "Oem": EthernetInterfaceCollection_EthernetInterfaceCollection_Oem,
        "@odata.type": EthernetInterfaceCollection_EthernetInterfaceCollection_odata_type,
        "@odata.id": EthernetInterfaceCollection_EthernetInterfaceCollection_odata_id,
        "@odata.context": EthernetInterfaceCollection_EthernetInterfaceCollection_odata_context,
        "Members@odata.count": EthernetInterfaceCollection_EthernetInterfaceCollection_Membersodata_count,
    })

    #
    # EventDestinationCollection_EventDestinationCollection
    #

    inner_EventDestinationCollection_EventDestinationCollection_Members = odata_4_0_0_idRef
    EventDestinationCollection_EventDestinationCollection_Members = restplus.fields.Nested(inner_EventDestinationCollection_EventDestinationCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_EventDestinationCollection_EventDestinationCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    EventDestinationCollection_EventDestinationCollection_Description = inner_EventDestinationCollection_EventDestinationCollection_Description

    inner_EventDestinationCollection_EventDestinationCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    EventDestinationCollection_EventDestinationCollection_Name = inner_EventDestinationCollection_EventDestinationCollection_Name

    inner_EventDestinationCollection_EventDestinationCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    EventDestinationCollection_EventDestinationCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_EventDestinationCollection_EventDestinationCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_EventDestinationCollection_EventDestinationCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    EventDestinationCollection_EventDestinationCollection_Membersodata_count = inner_EventDestinationCollection_EventDestinationCollection_Membersodata_count

    inner_EventDestinationCollection_EventDestinationCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    EventDestinationCollection_EventDestinationCollection_odata_type = inner_EventDestinationCollection_EventDestinationCollection_odata_type

    inner_EventDestinationCollection_EventDestinationCollection_Oem = Resource_Oem
    EventDestinationCollection_EventDestinationCollection_Oem = restplus.fields.Nested(inner_EventDestinationCollection_EventDestinationCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_EventDestinationCollection_EventDestinationCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    EventDestinationCollection_EventDestinationCollection_odata_id = inner_EventDestinationCollection_EventDestinationCollection_odata_id

    inner_EventDestinationCollection_EventDestinationCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    EventDestinationCollection_EventDestinationCollection_odata_context = inner_EventDestinationCollection_EventDestinationCollection_odata_context


    EventDestinationCollection_EventDestinationCollection = namespace.model("EventDestinationCollection_EventDestinationCollection",
    {
        "Description": EventDestinationCollection_EventDestinationCollection_Description,
        "Name": EventDestinationCollection_EventDestinationCollection_Name,
        "Members@odata.navigationLink": EventDestinationCollection_EventDestinationCollection_Membersodata_navigationLink,
        "Members@odata.count": EventDestinationCollection_EventDestinationCollection_Membersodata_count,
        "@odata.type": EventDestinationCollection_EventDestinationCollection_odata_type,
        "Oem": EventDestinationCollection_EventDestinationCollection_Oem,
        "@odata.id": EventDestinationCollection_EventDestinationCollection_odata_id,
        "Members": EventDestinationCollection_EventDestinationCollection_Members,
        "@odata.context": EventDestinationCollection_EventDestinationCollection_odata_context,
    })

    #
    # EventDestination_1_0_0_EventDestination
    #

    EventDestination_1_0_0_EventDestination_Context = restplus.fields.String(
            description="A client-supplied string that is stored with the event destination subscription.")
    EventDestination_1_0_0_EventDestination_Destination = restplus.fields.String(
            readonly=True,
            description="The URI of the destination Event Service.")
    inner_EventDestination_1_0_0_EventDestination_EventTypes = restplus.fields.String(
            enum=Event_1_0_0_EventType,
            readonly=True,
            description="This property shall contain the types of events that shall be sent to the desination.")
    EventDestination_1_0_0_EventDestination_EventTypes = restplus.fields.List(inner_EventDestination_1_0_0_EventDestination_EventTypes,
            readonly=True,
            description="This property shall contain the types of events that shall be sent to the desination.")

    inner_EventDestination_1_0_0_EventDestination_HttpHeaders = EventDestination_1_0_0_HttpHeaderProperty
    EventDestination_1_0_0_EventDestination_HttpHeaders = restplus.fields.Nested(inner_EventDestination_1_0_0_EventDestination_HttpHeaders, as_list=True,
            description="This is for setting HTTP headers, such as authorization information.  This object will be null on a GET.")

    inner_EventDestination_1_0_0_EventDestination_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    EventDestination_1_0_0_EventDestination_Name = inner_EventDestination_1_0_0_EventDestination_Name

    inner_EventDestination_1_0_0_EventDestination_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    EventDestination_1_0_0_EventDestination_Description = inner_EventDestination_1_0_0_EventDestination_Description

    inner_EventDestination_1_0_0_EventDestination_Oem = Resource_Oem
    EventDestination_1_0_0_EventDestination_Oem = restplus.fields.Nested(inner_EventDestination_1_0_0_EventDestination_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_EventDestination_1_0_0_EventDestination_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    EventDestination_1_0_0_EventDestination_odata_type = inner_EventDestination_1_0_0_EventDestination_odata_type

    inner_EventDestination_1_0_0_EventDestination_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    EventDestination_1_0_0_EventDestination_odata_id = inner_EventDestination_1_0_0_EventDestination_odata_id

    inner_EventDestination_1_0_0_EventDestination_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    EventDestination_1_0_0_EventDestination_Id = inner_EventDestination_1_0_0_EventDestination_Id

    inner_EventDestination_1_0_0_EventDestination_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    EventDestination_1_0_0_EventDestination_odata_context = inner_EventDestination_1_0_0_EventDestination_odata_context

    inner_EventDestination_1_0_0_EventDestination_Protocol = restplus.fields.String(
            enum=EventDestination_1_0_0_EventDestinationProtocol)
    EventDestination_1_0_0_EventDestination_Protocol = inner_EventDestination_1_0_0_EventDestination_Protocol


    EventDestination_1_0_0_EventDestination = namespace.model("EventDestination_1_0_0_EventDestination",
    {
        "Name": EventDestination_1_0_0_EventDestination_Name,
        "Description": EventDestination_1_0_0_EventDestination_Description,
        "Oem": EventDestination_1_0_0_EventDestination_Oem,
        "EventTypes": EventDestination_1_0_0_EventDestination_EventTypes,
        "@odata.type": EventDestination_1_0_0_EventDestination_odata_type,
        "@odata.id": EventDestination_1_0_0_EventDestination_odata_id,
        "Context": EventDestination_1_0_0_EventDestination_Context,
        "Destination": EventDestination_1_0_0_EventDestination_Destination,
        "Id": EventDestination_1_0_0_EventDestination_Id,
        "HttpHeaders": EventDestination_1_0_0_EventDestination_HttpHeaders,
        "@odata.context": EventDestination_1_0_0_EventDestination_odata_context,
        "Protocol": EventDestination_1_0_0_EventDestination_Protocol,
    })

    #
    # EventService_1_0_0_EventService_Actions
    #

    EventService_1_0_0_EventService_Actions_Oem = restplus.fields.Nested(EventService_1_0_0_EventService_Actions_Oem,
            )
    inner_EventService_1_0_0_EventService_Actions_EventService_SubmitTestEvent = EventService_1_0_0_SubmitTestEvent
    EventService_1_0_0_EventService_Actions_EventService_SubmitTestEvent = restplus.fields.Nested(inner_EventService_1_0_0_EventService_Actions_EventService_SubmitTestEvent,
            attribute="#EventService_SubmitTestEvent")


    EventService_1_0_0_EventService_Actions = namespace.model("EventService_1_0_0_EventService_Actions",
    {
        "#EventService.SubmitTestEvent": EventService_1_0_0_EventService_Actions_EventService_SubmitTestEvent,
        "Oem": EventService_1_0_0_EventService_Actions_Oem,
    })

    #
    # Event_1_0_0_EventRecord
    #

    Event_1_0_0_EventRecord_MessageId = restplus.fields.String(
            readonly=True,
            description="This is the key for this message which can be used to look up the message in a message registry.")
    Event_1_0_0_EventRecord_Severity = restplus.fields.String(
            readonly=True,
            description="This is the severity of the event.")
    Event_1_0_0_EventRecord_EventId = restplus.fields.String(
            readonly=True,
            description="This is a unique instance identifier of an event.")
    Event_1_0_0_EventRecord_EventTimestamp = restplus.fields.String(
            readonly=True,
            description="This is time the event occurred.")
    Event_1_0_0_EventRecord_Message = restplus.fields.String(
            readonly=True,
            description="This is the human readable message, if provided.")
    Event_1_0_0_EventRecord_MemberId = restplus.fields.String(
            description="This is the identifier for the member within the collection.")
    Event_1_0_0_EventRecord_Context = restplus.fields.String(
            readonly=True,
            description="A context can be supplied at subscription time.  This property is the context value supplied by the subscriber.")
    inner_Event_1_0_0_EventRecord_MessageArgs = restplus.fields.String(
            readonly=True,
            description="This array of message arguments are substituted for the arguments in the message when looked up in the message registry.")
    Event_1_0_0_EventRecord_MessageArgs = restplus.fields.List(inner_Event_1_0_0_EventRecord_MessageArgs,
            readonly=True,
            description="This array of message arguments are substituted for the arguments in the message when looked up in the message registry.")

    inner_Event_1_0_0_EventRecord_OriginOfCondition = odata_4_0_0_idRef
    Event_1_0_0_EventRecord_OriginOfCondition = restplus.fields.Nested(inner_Event_1_0_0_EventRecord_OriginOfCondition,
            readonly=True,
            description="This indicates the resource that originated the condition that caused the event to be generated.")

    inner_Event_1_0_0_EventRecord_EventType = restplus.fields.String(
            enum=Event_1_0_0_EventType,
            description="Alert: A condition exists which requires attention, ResourceRemoved: A resource has been removed, ResourceUpdated: The value of this resource has been updated, StatusChange: The status of this resource has changed, ResourceAdded: A resource has been added")
    Event_1_0_0_EventRecord_EventType = inner_Event_1_0_0_EventRecord_EventType

    inner_Event_1_0_0_EventRecord_Oem = Resource_Oem
    Event_1_0_0_EventRecord_Oem = restplus.fields.Nested(inner_Event_1_0_0_EventRecord_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")


    Event_1_0_0_EventRecord = namespace.model("Event_1_0_0_EventRecord",
    {
        "MessageId": Event_1_0_0_EventRecord_MessageId,
        "Severity": Event_1_0_0_EventRecord_Severity,
        "OriginOfCondition": Event_1_0_0_EventRecord_OriginOfCondition,
        "EventType": Event_1_0_0_EventRecord_EventType,
        "EventId": Event_1_0_0_EventRecord_EventId,
        "MessageArgs": Event_1_0_0_EventRecord_MessageArgs,
        "EventTimestamp": Event_1_0_0_EventRecord_EventTimestamp,
        "Message": Event_1_0_0_EventRecord_Message,
        "MemberId": Event_1_0_0_EventRecord_MemberId,
        "Oem": Event_1_0_0_EventRecord_Oem,
        "Context": Event_1_0_0_EventRecord_Context,
    })

    #
    # IPAddresses_1_0_0_IPv4Address
    #

    IPAddresses_1_0_0_IPv4Address_Gateway = restplus.fields.String(
            description="This is the IPv4 gateway for this address.")
    IPAddresses_1_0_0_IPv4Address_Address = restplus.fields.String(
            description="This is the IPv4 Address.")
    inner_IPAddresses_1_0_0_IPv4Address_SubnetMask = restplus.fields.String(
            )
    IPAddresses_1_0_0_IPv4Address_SubnetMask = inner_IPAddresses_1_0_0_IPv4Address_SubnetMask

    inner_IPAddresses_1_0_0_IPv4Address_AddressOrigin = restplus.fields.String(
            enum=IPAddresses_1_0_0_IPv4AddressOrigin,
            description="DHCP: Address is provided by a DHCPv4 service, Static: A static address as configured by the user, BOOTP: Address is provided by a BOOTP service, IPv4LinkLocal: Address is valid only for this network segment (link)")
    IPAddresses_1_0_0_IPv4Address_AddressOrigin = inner_IPAddresses_1_0_0_IPv4Address_AddressOrigin

    inner_IPAddresses_1_0_0_IPv4Address_Oem = Resource_Oem
    IPAddresses_1_0_0_IPv4Address_Oem = restplus.fields.Nested(inner_IPAddresses_1_0_0_IPv4Address_Oem,
            )


    IPAddresses_1_0_0_IPv4Address = namespace.model("IPAddresses_1_0_0_IPv4Address",
    {
        "SubnetMask": IPAddresses_1_0_0_IPv4Address_SubnetMask,
        "AddressOrigin": IPAddresses_1_0_0_IPv4Address_AddressOrigin,
        "Gateway": IPAddresses_1_0_0_IPv4Address_Gateway,
        "Oem": IPAddresses_1_0_0_IPv4Address_Oem,
        "Address": IPAddresses_1_0_0_IPv4Address_Address,
    })

    #
    # IPAddresses_1_0_0_IPv6Address
    #

    IPAddresses_1_0_0_IPv6Address_Address = restplus.fields.String(
            description="This is the IPv6 Address.")
    inner_IPAddresses_1_0_0_IPv6Address_Oem = Resource_Oem
    IPAddresses_1_0_0_IPv6Address_Oem = restplus.fields.Nested(inner_IPAddresses_1_0_0_IPv6Address_Oem,
            )

    inner_IPAddresses_1_0_0_IPv6Address_AddressState = restplus.fields.String(
            enum=IPAddresses_1_0_0_AddressState,
            description="Failed: This address has failed Duplicate Address Detection testing as defined in RFC 4862 section 5.4 and is not currently in use., Deprecated: This address is currently within it's valid lifetime, but is now outside of it's preferred lifetime as defined in RFC 4862., Preferred: This address is currently within both it's valid and preferred lifetimes as defined in RFC 4862., Tentative: This address is currently undergoing Duplicate Address Detection testing as defined in RFC 4862 section 5.4.")
    IPAddresses_1_0_0_IPv6Address_AddressState = inner_IPAddresses_1_0_0_IPv6Address_AddressState

    inner_IPAddresses_1_0_0_IPv6Address_PrefixLength = restplus.fields.Float(
            )
    IPAddresses_1_0_0_IPv6Address_PrefixLength = inner_IPAddresses_1_0_0_IPv6Address_PrefixLength

    inner_IPAddresses_1_0_0_IPv6Address_AddressOrigin = restplus.fields.String(
            enum=IPAddresses_1_0_0_IPv6AddressOrigin,
            description="LinkLocal: Address is valid only for this network segment (link), DHCPv6: Address is provided by a DHCPv6 service, Static: A static address as configured by the user, SLAAC: Address is provided by a Stateless Address AutoConfiguration (SLAAC) service")
    IPAddresses_1_0_0_IPv6Address_AddressOrigin = inner_IPAddresses_1_0_0_IPv6Address_AddressOrigin


    IPAddresses_1_0_0_IPv6Address = namespace.model("IPAddresses_1_0_0_IPv6Address",
    {
        "Oem": IPAddresses_1_0_0_IPv6Address_Oem,
        "AddressState": IPAddresses_1_0_0_IPv6Address_AddressState,
        "Address": IPAddresses_1_0_0_IPv6Address_Address,
        "PrefixLength": IPAddresses_1_0_0_IPv6Address_PrefixLength,
        "AddressOrigin": IPAddresses_1_0_0_IPv6Address_AddressOrigin,
    })

    #
    # IPAddresses_1_0_0_IPv6StaticAddress
    #

    IPAddresses_1_0_0_IPv6StaticAddress_Address = restplus.fields.String(
            description="A valid IPv6 address.")
    inner_IPAddresses_1_0_0_IPv6StaticAddress_Oem = Resource_Oem
    IPAddresses_1_0_0_IPv6StaticAddress_Oem = restplus.fields.Nested(inner_IPAddresses_1_0_0_IPv6StaticAddress_Oem,
            )

    inner_IPAddresses_1_0_0_IPv6StaticAddress_PrefixLength = restplus.fields.Float(
            )
    IPAddresses_1_0_0_IPv6StaticAddress_PrefixLength = inner_IPAddresses_1_0_0_IPv6StaticAddress_PrefixLength


    IPAddresses_1_0_0_IPv6StaticAddress = namespace.model("IPAddresses_1_0_0_IPv6StaticAddress",
    {
        "Oem": IPAddresses_1_0_0_IPv6StaticAddress_Oem,
        "Address": IPAddresses_1_0_0_IPv6StaticAddress_Address,
        "PrefixLength": IPAddresses_1_0_0_IPv6StaticAddress_PrefixLength,
    })

    #
    # JsonSchemaFileCollection_JsonSchemaFileCollection
    #

    inner_JsonSchemaFileCollection_JsonSchemaFileCollection_Members = odata_4_0_0_idRef
    JsonSchemaFileCollection_JsonSchemaFileCollection_Members = restplus.fields.Nested(inner_JsonSchemaFileCollection_JsonSchemaFileCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_JsonSchemaFileCollection_JsonSchemaFileCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    JsonSchemaFileCollection_JsonSchemaFileCollection_odata_type = inner_JsonSchemaFileCollection_JsonSchemaFileCollection_odata_type

    inner_JsonSchemaFileCollection_JsonSchemaFileCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    JsonSchemaFileCollection_JsonSchemaFileCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_JsonSchemaFileCollection_JsonSchemaFileCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_JsonSchemaFileCollection_JsonSchemaFileCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    JsonSchemaFileCollection_JsonSchemaFileCollection_odata_id = inner_JsonSchemaFileCollection_JsonSchemaFileCollection_odata_id

    inner_JsonSchemaFileCollection_JsonSchemaFileCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    JsonSchemaFileCollection_JsonSchemaFileCollection_Membersodata_count = inner_JsonSchemaFileCollection_JsonSchemaFileCollection_Membersodata_count

    inner_JsonSchemaFileCollection_JsonSchemaFileCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    JsonSchemaFileCollection_JsonSchemaFileCollection_odata_context = inner_JsonSchemaFileCollection_JsonSchemaFileCollection_odata_context

    inner_JsonSchemaFileCollection_JsonSchemaFileCollection_Oem = Resource_Oem
    JsonSchemaFileCollection_JsonSchemaFileCollection_Oem = restplus.fields.Nested(inner_JsonSchemaFileCollection_JsonSchemaFileCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_JsonSchemaFileCollection_JsonSchemaFileCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    JsonSchemaFileCollection_JsonSchemaFileCollection_Description = inner_JsonSchemaFileCollection_JsonSchemaFileCollection_Description

    inner_JsonSchemaFileCollection_JsonSchemaFileCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    JsonSchemaFileCollection_JsonSchemaFileCollection_Name = inner_JsonSchemaFileCollection_JsonSchemaFileCollection_Name


    JsonSchemaFileCollection_JsonSchemaFileCollection = namespace.model("JsonSchemaFileCollection_JsonSchemaFileCollection",
    {
        "@odata.type": JsonSchemaFileCollection_JsonSchemaFileCollection_odata_type,
        "Members@odata.navigationLink": JsonSchemaFileCollection_JsonSchemaFileCollection_Membersodata_navigationLink,
        "@odata.id": JsonSchemaFileCollection_JsonSchemaFileCollection_odata_id,
        "Members@odata.count": JsonSchemaFileCollection_JsonSchemaFileCollection_Membersodata_count,
        "Members": JsonSchemaFileCollection_JsonSchemaFileCollection_Members,
        "@odata.context": JsonSchemaFileCollection_JsonSchemaFileCollection_odata_context,
        "Oem": JsonSchemaFileCollection_JsonSchemaFileCollection_Oem,
        "Description": JsonSchemaFileCollection_JsonSchemaFileCollection_Description,
        "Name": JsonSchemaFileCollection_JsonSchemaFileCollection_Name,
    })

    #
    # JsonSchemaFile_1_0_0_JsonSchemaFile
    #

    JsonSchemaFile_1_0_0_JsonSchemaFile_Schema = restplus.fields.String(
            readonly=True,
            description="The type name this schema describes.")
    inner_JsonSchemaFile_1_0_0_JsonSchemaFile_Location = JsonSchemaFile_1_0_0_Location
    JsonSchemaFile_1_0_0_JsonSchemaFile_Location = restplus.fields.Nested(inner_JsonSchemaFile_1_0_0_JsonSchemaFile_Location, as_list=True,
            readonly=True,
            description="Location information for this schema file.")

    inner_JsonSchemaFile_1_0_0_JsonSchemaFile_Languages = restplus.fields.String(
            readonly=True,
            description="Language codes for the schemas available.")
    JsonSchemaFile_1_0_0_JsonSchemaFile_Languages = restplus.fields.List(inner_JsonSchemaFile_1_0_0_JsonSchemaFile_Languages,
            readonly=True,
            description="Language codes for the schemas available.")

    inner_JsonSchemaFile_1_0_0_JsonSchemaFile_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    JsonSchemaFile_1_0_0_JsonSchemaFile_odata_type = inner_JsonSchemaFile_1_0_0_JsonSchemaFile_odata_type

    inner_JsonSchemaFile_1_0_0_JsonSchemaFile_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    JsonSchemaFile_1_0_0_JsonSchemaFile_odata_id = inner_JsonSchemaFile_1_0_0_JsonSchemaFile_odata_id

    inner_JsonSchemaFile_1_0_0_JsonSchemaFile_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    JsonSchemaFile_1_0_0_JsonSchemaFile_Id = inner_JsonSchemaFile_1_0_0_JsonSchemaFile_Id

    inner_JsonSchemaFile_1_0_0_JsonSchemaFile_Oem = Resource_Oem
    JsonSchemaFile_1_0_0_JsonSchemaFile_Oem = restplus.fields.Nested(inner_JsonSchemaFile_1_0_0_JsonSchemaFile_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_JsonSchemaFile_1_0_0_JsonSchemaFile_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    JsonSchemaFile_1_0_0_JsonSchemaFile_Description = inner_JsonSchemaFile_1_0_0_JsonSchemaFile_Description

    inner_JsonSchemaFile_1_0_0_JsonSchemaFile_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    JsonSchemaFile_1_0_0_JsonSchemaFile_odata_context = inner_JsonSchemaFile_1_0_0_JsonSchemaFile_odata_context

    inner_JsonSchemaFile_1_0_0_JsonSchemaFile_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    JsonSchemaFile_1_0_0_JsonSchemaFile_Name = inner_JsonSchemaFile_1_0_0_JsonSchemaFile_Name


    JsonSchemaFile_1_0_0_JsonSchemaFile = namespace.model("JsonSchemaFile_1_0_0_JsonSchemaFile",
    {
        "Schema": JsonSchemaFile_1_0_0_JsonSchemaFile_Schema,
        "@odata.type": JsonSchemaFile_1_0_0_JsonSchemaFile_odata_type,
        "@odata.id": JsonSchemaFile_1_0_0_JsonSchemaFile_odata_id,
        "Id": JsonSchemaFile_1_0_0_JsonSchemaFile_Id,
        "Oem": JsonSchemaFile_1_0_0_JsonSchemaFile_Oem,
        "Location": JsonSchemaFile_1_0_0_JsonSchemaFile_Location,
        "Languages": JsonSchemaFile_1_0_0_JsonSchemaFile_Languages,
        "Description": JsonSchemaFile_1_0_0_JsonSchemaFile_Description,
        "@odata.context": JsonSchemaFile_1_0_0_JsonSchemaFile_odata_context,
        "Name": JsonSchemaFile_1_0_0_JsonSchemaFile_Name,
    })

    #
    # LogEntry_1_0_0_LogEntry_Links
    #

    inner_LogEntry_1_0_0_LogEntry_Links_Oem = Resource_Oem
    LogEntry_1_0_0_LogEntry_Links_Oem = restplus.fields.Nested(inner_LogEntry_1_0_0_LogEntry_Links_Oem,
            description="Oem extension object.")

    inner_LogEntry_1_0_0_LogEntry_Links_OriginOfCondition = odata_4_0_0_idRef
    LogEntry_1_0_0_LogEntry_Links_OriginOfCondition = restplus.fields.Nested(inner_LogEntry_1_0_0_LogEntry_Links_OriginOfCondition,
            readonly=True,
            description="This is the URI of the resource that caused the log entry")


    LogEntry_1_0_0_LogEntry_Links = namespace.model("LogEntry_1_0_0_LogEntry_Links",
    {
        "Oem": LogEntry_1_0_0_LogEntry_Links_Oem,
        "OriginOfCondition": LogEntry_1_0_0_LogEntry_Links_OriginOfCondition,
    })

    #
    # LogServiceCollection_LogServiceCollection
    #

    inner_LogServiceCollection_LogServiceCollection_Members = odata_4_0_0_idRef
    LogServiceCollection_LogServiceCollection_Members = restplus.fields.Nested(inner_LogServiceCollection_LogServiceCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_LogServiceCollection_LogServiceCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    LogServiceCollection_LogServiceCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_LogServiceCollection_LogServiceCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_LogServiceCollection_LogServiceCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    LogServiceCollection_LogServiceCollection_odata_id = inner_LogServiceCollection_LogServiceCollection_odata_id

    inner_LogServiceCollection_LogServiceCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    LogServiceCollection_LogServiceCollection_odata_context = inner_LogServiceCollection_LogServiceCollection_odata_context

    inner_LogServiceCollection_LogServiceCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    LogServiceCollection_LogServiceCollection_Name = inner_LogServiceCollection_LogServiceCollection_Name

    inner_LogServiceCollection_LogServiceCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    LogServiceCollection_LogServiceCollection_odata_type = inner_LogServiceCollection_LogServiceCollection_odata_type

    inner_LogServiceCollection_LogServiceCollection_Oem = Resource_Oem
    LogServiceCollection_LogServiceCollection_Oem = restplus.fields.Nested(inner_LogServiceCollection_LogServiceCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_LogServiceCollection_LogServiceCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    LogServiceCollection_LogServiceCollection_Description = inner_LogServiceCollection_LogServiceCollection_Description

    inner_LogServiceCollection_LogServiceCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    LogServiceCollection_LogServiceCollection_Membersodata_count = inner_LogServiceCollection_LogServiceCollection_Membersodata_count


    LogServiceCollection_LogServiceCollection = namespace.model("LogServiceCollection_LogServiceCollection",
    {
        "Members": LogServiceCollection_LogServiceCollection_Members,
        "Members@odata.navigationLink": LogServiceCollection_LogServiceCollection_Membersodata_navigationLink,
        "@odata.id": LogServiceCollection_LogServiceCollection_odata_id,
        "@odata.context": LogServiceCollection_LogServiceCollection_odata_context,
        "Name": LogServiceCollection_LogServiceCollection_Name,
        "@odata.type": LogServiceCollection_LogServiceCollection_odata_type,
        "Oem": LogServiceCollection_LogServiceCollection_Oem,
        "Description": LogServiceCollection_LogServiceCollection_Description,
        "Members@odata.count": LogServiceCollection_LogServiceCollection_Membersodata_count,
    })

    #
    # LogService_1_0_0_LogService_Actions
    #

    LogService_1_0_0_LogService_Actions_Oem = restplus.fields.Nested(LogService_1_0_0_LogService_Actions_Oem,
            )
    inner_LogService_1_0_0_LogService_Actions_LogService_ClearLog = LogService_1_0_0_ClearLog
    LogService_1_0_0_LogService_Actions_LogService_ClearLog = restplus.fields.Nested(inner_LogService_1_0_0_LogService_Actions_LogService_ClearLog,
            attribute="#LogService_ClearLog")


    LogService_1_0_0_LogService_Actions = namespace.model("LogService_1_0_0_LogService_Actions",
    {
        "Oem": LogService_1_0_0_LogService_Actions_Oem,
        "#LogService.ClearLog": LogService_1_0_0_LogService_Actions_LogService_ClearLog,
    })

    #
    # ManagerAccountCollection_ManagerAccountCollection
    #

    inner_ManagerAccountCollection_ManagerAccountCollection_Members = odata_4_0_0_idRef
    ManagerAccountCollection_ManagerAccountCollection_Members = restplus.fields.Nested(inner_ManagerAccountCollection_ManagerAccountCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_ManagerAccountCollection_ManagerAccountCollection_Oem = Resource_Oem
    ManagerAccountCollection_ManagerAccountCollection_Oem = restplus.fields.Nested(inner_ManagerAccountCollection_ManagerAccountCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_ManagerAccountCollection_ManagerAccountCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    ManagerAccountCollection_ManagerAccountCollection_odata_context = inner_ManagerAccountCollection_ManagerAccountCollection_odata_context

    inner_ManagerAccountCollection_ManagerAccountCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    ManagerAccountCollection_ManagerAccountCollection_Membersodata_count = inner_ManagerAccountCollection_ManagerAccountCollection_Membersodata_count

    inner_ManagerAccountCollection_ManagerAccountCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    ManagerAccountCollection_ManagerAccountCollection_Name = inner_ManagerAccountCollection_ManagerAccountCollection_Name

    inner_ManagerAccountCollection_ManagerAccountCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    ManagerAccountCollection_ManagerAccountCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_ManagerAccountCollection_ManagerAccountCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_ManagerAccountCollection_ManagerAccountCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    ManagerAccountCollection_ManagerAccountCollection_odata_type = inner_ManagerAccountCollection_ManagerAccountCollection_odata_type

    inner_ManagerAccountCollection_ManagerAccountCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    ManagerAccountCollection_ManagerAccountCollection_odata_id = inner_ManagerAccountCollection_ManagerAccountCollection_odata_id

    inner_ManagerAccountCollection_ManagerAccountCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    ManagerAccountCollection_ManagerAccountCollection_Description = inner_ManagerAccountCollection_ManagerAccountCollection_Description


    ManagerAccountCollection_ManagerAccountCollection = namespace.model("ManagerAccountCollection_ManagerAccountCollection",
    {
        "Oem": ManagerAccountCollection_ManagerAccountCollection_Oem,
        "@odata.context": ManagerAccountCollection_ManagerAccountCollection_odata_context,
        "Members@odata.count": ManagerAccountCollection_ManagerAccountCollection_Membersodata_count,
        "Name": ManagerAccountCollection_ManagerAccountCollection_Name,
        "Members@odata.navigationLink": ManagerAccountCollection_ManagerAccountCollection_Membersodata_navigationLink,
        "@odata.type": ManagerAccountCollection_ManagerAccountCollection_odata_type,
        "@odata.id": ManagerAccountCollection_ManagerAccountCollection_odata_id,
        "Members": ManagerAccountCollection_ManagerAccountCollection_Members,
        "Description": ManagerAccountCollection_ManagerAccountCollection_Description,
    })

    #
    # ManagerAccount_1_0_0_ManagerAccount_Links
    #

    inner_ManagerAccount_1_0_0_ManagerAccount_Links_Role = odata_4_0_0_idRef
    ManagerAccount_1_0_0_ManagerAccount_Links_Role = restplus.fields.Nested(inner_ManagerAccount_1_0_0_ManagerAccount_Links_Role,
            readonly=True,
            description="A reference to the Role object defining Privileges for this account--returned when the resource is read. The ID of the role is the same as property RoleId.")

    inner_ManagerAccount_1_0_0_ManagerAccount_Links_Oem = Resource_Oem
    ManagerAccount_1_0_0_ManagerAccount_Links_Oem = restplus.fields.Nested(inner_ManagerAccount_1_0_0_ManagerAccount_Links_Oem,
            description="Oem extension object.")


    ManagerAccount_1_0_0_ManagerAccount_Links = namespace.model("ManagerAccount_1_0_0_ManagerAccount_Links",
    {
        "Role": ManagerAccount_1_0_0_ManagerAccount_Links_Role,
        "Oem": ManagerAccount_1_0_0_ManagerAccount_Links_Oem,
    })

    #
    # ManagerCollection_ManagerCollection
    #

    inner_ManagerCollection_ManagerCollection_Members = odata_4_0_0_idRef
    ManagerCollection_ManagerCollection_Members = restplus.fields.Nested(inner_ManagerCollection_ManagerCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_ManagerCollection_ManagerCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    ManagerCollection_ManagerCollection_Description = inner_ManagerCollection_ManagerCollection_Description

    inner_ManagerCollection_ManagerCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    ManagerCollection_ManagerCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_ManagerCollection_ManagerCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_ManagerCollection_ManagerCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    ManagerCollection_ManagerCollection_Name = inner_ManagerCollection_ManagerCollection_Name

    inner_ManagerCollection_ManagerCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    ManagerCollection_ManagerCollection_odata_type = inner_ManagerCollection_ManagerCollection_odata_type

    inner_ManagerCollection_ManagerCollection_Oem = Resource_Oem
    ManagerCollection_ManagerCollection_Oem = restplus.fields.Nested(inner_ManagerCollection_ManagerCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_ManagerCollection_ManagerCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    ManagerCollection_ManagerCollection_odata_id = inner_ManagerCollection_ManagerCollection_odata_id

    inner_ManagerCollection_ManagerCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    ManagerCollection_ManagerCollection_Membersodata_count = inner_ManagerCollection_ManagerCollection_Membersodata_count

    inner_ManagerCollection_ManagerCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    ManagerCollection_ManagerCollection_odata_context = inner_ManagerCollection_ManagerCollection_odata_context


    ManagerCollection_ManagerCollection = namespace.model("ManagerCollection_ManagerCollection",
    {
        "Description": ManagerCollection_ManagerCollection_Description,
        "Members@odata.navigationLink": ManagerCollection_ManagerCollection_Membersodata_navigationLink,
        "Name": ManagerCollection_ManagerCollection_Name,
        "@odata.type": ManagerCollection_ManagerCollection_odata_type,
        "Oem": ManagerCollection_ManagerCollection_Oem,
        "@odata.id": ManagerCollection_ManagerCollection_odata_id,
        "Members@odata.count": ManagerCollection_ManagerCollection_Membersodata_count,
        "Members": ManagerCollection_ManagerCollection_Members,
        "@odata.context": ManagerCollection_ManagerCollection_odata_context,
    })

    #
    # ManagerNetworkProtocol_1_0_0_SSDProtocol
    #

    ManagerNetworkProtocol_1_0_0_SSDProtocol_NotifyTTL = restplus.fields.Float(
            description="Indicates the time to live hop count for SSDPs Notify messages.")
    ManagerNetworkProtocol_1_0_0_SSDProtocol_Port = restplus.fields.Float(
            description="Indicates the protocol port.")
    ManagerNetworkProtocol_1_0_0_SSDProtocol_ProtocolEnabled = restplus.fields.Boolean(
            description="Indicates if the protocol is enabled or disabled")
    ManagerNetworkProtocol_1_0_0_SSDProtocol_NotifyMulticastIntervalSeconds = restplus.fields.Float(
            description="Indicates how often the Multicast is done from this service for SSDP.")
    inner_ManagerNetworkProtocol_1_0_0_SSDProtocol_NotifyIPv6Scope = restplus.fields.String(
            enum=ManagerNetworkProtocol_1_0_0_NotifyIPv6Scope,
            description="Organization: SSDP Notify messages are sent to addresses in the IPv6 Local Organization scope, Link: SSDP Notify messages are sent to addresses in the IPv6 Local Link scope, Site: SSDP Notify messages are sent to addresses in the IPv6 Local Site scope")
    ManagerNetworkProtocol_1_0_0_SSDProtocol_NotifyIPv6Scope = inner_ManagerNetworkProtocol_1_0_0_SSDProtocol_NotifyIPv6Scope


    ManagerNetworkProtocol_1_0_0_SSDProtocol = namespace.model("ManagerNetworkProtocol_1_0_0_SSDProtocol",
    {
        "NotifyTTL": ManagerNetworkProtocol_1_0_0_SSDProtocol_NotifyTTL,
        "Port": ManagerNetworkProtocol_1_0_0_SSDProtocol_Port,
        "ProtocolEnabled": ManagerNetworkProtocol_1_0_0_SSDProtocol_ProtocolEnabled,
        "NotifyMulticastIntervalSeconds": ManagerNetworkProtocol_1_0_0_SSDProtocol_NotifyMulticastIntervalSeconds,
        "NotifyIPv6Scope": ManagerNetworkProtocol_1_0_0_SSDProtocol_NotifyIPv6Scope,
    })

    #
    # Manager_1_0_0_CommandShell
    #

    Manager_1_0_0_CommandShell_ServiceEnabled = restplus.fields.Boolean(
            description="Indicates if the service is enabled for this manager.")
    Manager_1_0_0_CommandShell_MaxConcurrentSessions = restplus.fields.Float(
            readonly=True,
            description="Indicates the maximum number of service sessions, regardless of protocol, this manager is able to support.")
    inner_Manager_1_0_0_CommandShell_ConnectTypesSupported = restplus.fields.String(
            enum=Manager_1_0_0_CommandConnectTypesSupported,
            readonly=True,
            description="This object is used to enumerate the Command Shell connection types allowed by the implementation.")
    Manager_1_0_0_CommandShell_ConnectTypesSupported = restplus.fields.List(inner_Manager_1_0_0_CommandShell_ConnectTypesSupported,
            readonly=True,
            description="This object is used to enumerate the Command Shell connection types allowed by the implementation.")


    Manager_1_0_0_CommandShell = namespace.model("Manager_1_0_0_CommandShell",
    {
        "ServiceEnabled": Manager_1_0_0_CommandShell_ServiceEnabled,
        "MaxConcurrentSessions": Manager_1_0_0_CommandShell_MaxConcurrentSessions,
        "ConnectTypesSupported": Manager_1_0_0_CommandShell_ConnectTypesSupported,
    })

    #
    # Manager_1_0_0_GraphicalConsole
    #

    Manager_1_0_0_GraphicalConsole_ServiceEnabled = restplus.fields.Boolean(
            description="Indicates if the service is enabled for this manager.")
    Manager_1_0_0_GraphicalConsole_MaxConcurrentSessions = restplus.fields.Float(
            readonly=True,
            description="Indicates the maximum number of service sessions, regardless of protocol, this manager is able to support.")
    inner_Manager_1_0_0_GraphicalConsole_ConnectTypesSupported = restplus.fields.String(
            enum=Manager_1_0_0_GraphicalConnectTypesSupported,
            readonly=True,
            description="This object is used to enumerate the Graphical Console connection types allowed by the implementation.")
    Manager_1_0_0_GraphicalConsole_ConnectTypesSupported = restplus.fields.List(inner_Manager_1_0_0_GraphicalConsole_ConnectTypesSupported,
            readonly=True,
            description="This object is used to enumerate the Graphical Console connection types allowed by the implementation.")


    Manager_1_0_0_GraphicalConsole = namespace.model("Manager_1_0_0_GraphicalConsole",
    {
        "ServiceEnabled": Manager_1_0_0_GraphicalConsole_ServiceEnabled,
        "MaxConcurrentSessions": Manager_1_0_0_GraphicalConsole_MaxConcurrentSessions,
        "ConnectTypesSupported": Manager_1_0_0_GraphicalConsole_ConnectTypesSupported,
    })

    #
    # Manager_1_0_0_Manager_Actions
    #

    Manager_1_0_0_Manager_Actions_Oem = restplus.fields.Nested(Manager_1_0_0_Manager_Actions_Oem,
            )
    inner_Manager_1_0_0_Manager_Actions_Manager_ModifyRedundancySet = Manager_1_0_0_ModifyRedundancySet
    Manager_1_0_0_Manager_Actions_Manager_ModifyRedundancySet = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Actions_Manager_ModifyRedundancySet,
            attribute="#Manager_ModifyRedundancySet")

    inner_Manager_1_0_0_Manager_Actions_Manager_ForceFailover = Manager_1_0_0_ForceFailover
    Manager_1_0_0_Manager_Actions_Manager_ForceFailover = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Actions_Manager_ForceFailover,
            attribute="#Manager_ForceFailover")

    inner_Manager_1_0_0_Manager_Actions_Manager_Reset = ComputerSystem_1_0_0_Reset
    Manager_1_0_0_Manager_Actions_Manager_Reset = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Actions_Manager_Reset,
            attribute="#Manager_Reset")


    Manager_1_0_0_Manager_Actions = namespace.model("Manager_1_0_0_Manager_Actions",
    {
        "Oem": Manager_1_0_0_Manager_Actions_Oem,
        "#Manager.ModifyRedundancySet": Manager_1_0_0_Manager_Actions_Manager_ModifyRedundancySet,
        "#Manager.ForceFailover": Manager_1_0_0_Manager_Actions_Manager_ForceFailover,
        "#Manager.Reset": Manager_1_0_0_Manager_Actions_Manager_Reset,
    })

    #
    # Manager_1_0_0_Manager_Links_Oem
    #

    inner_Manager_1_0_0_Manager_Links_Oem_ManagerForPDUs = odata_4_0_0_idRef
    Manager_1_0_0_Manager_Links_Oem_ManagerForPDUs = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Links_Oem_ManagerForPDUs, as_list=True,
            readonly=True,
            description="This property is an array of references to the PDUs that this manager has control over.")

    inner_Manager_1_0_0_Manager_Links_Oem_ManagerForSwitches = odata_4_0_0_idRef
    Manager_1_0_0_Manager_Links_Oem_ManagerForSwitches = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Links_Oem_ManagerForSwitches, as_list=True,
            readonly=True,
            description="This property is an array of references to the switches that this manager has control over.")

    inner_Manager_1_0_0_Manager_Links_Oem_ManagerForSwitchesodata_count = restplus.fields.Float(
            attribute="ManagerForSwitchesodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Manager_1_0_0_Manager_Links_Oem_ManagerForSwitchesodata_count = inner_Manager_1_0_0_Manager_Links_Oem_ManagerForSwitchesodata_count

    inner_Manager_1_0_0_Manager_Links_Oem_ManagerForPDUsodata_count = restplus.fields.Float(
            attribute="ManagerForPDUsodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Manager_1_0_0_Manager_Links_Oem_ManagerForPDUsodata_count = inner_Manager_1_0_0_Manager_Links_Oem_ManagerForPDUsodata_count

    inner_Manager_1_0_0_Manager_Links_Oem_ManagerForSwitchesodata_navigationLink = odata_4_0_0_idRef
    Manager_1_0_0_Manager_Links_Oem_ManagerForSwitchesodata_navigationLink = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Links_Oem_ManagerForSwitchesodata_navigationLink,
            attribute="ManagerForSwitchesodata_navigationLink")

    inner_Manager_1_0_0_Manager_Links_Oem_ManagerForPDUsodata_navigationLink = odata_4_0_0_idRef
    Manager_1_0_0_Manager_Links_Oem_ManagerForPDUsodata_navigationLink = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Links_Oem_ManagerForPDUsodata_navigationLink,
            attribute="ManagerForPDUsodata_navigationLink")


    Manager_1_0_0_Manager_Links_Oem = namespace.model("Manager_1_0_0_Manager_Links_Oem",
    {
        "ManagerForSwitches@odata.count": Manager_1_0_0_Manager_Links_Oem_ManagerForSwitchesodata_count,
        "ManagerForPDUs": Manager_1_0_0_Manager_Links_Oem_ManagerForPDUs,
        "ManagerForSwitches": Manager_1_0_0_Manager_Links_Oem_ManagerForSwitches,
        "ManagerForPDUs@odata.count": Manager_1_0_0_Manager_Links_Oem_ManagerForPDUsodata_count,
        "ManagerForSwitches@odata.navigationLink": Manager_1_0_0_Manager_Links_Oem_ManagerForSwitchesodata_navigationLink,
        "ManagerForPDUs@odata.navigationLink": Manager_1_0_0_Manager_Links_Oem_ManagerForPDUsodata_navigationLink,
    })

    #
    # Manager_1_0_0_SerialConsole
    #

    Manager_1_0_0_SerialConsole_ServiceEnabled = restplus.fields.Boolean(
            description="Indicates if the service is enabled for this manager.")
    Manager_1_0_0_SerialConsole_MaxConcurrentSessions = restplus.fields.Float(
            readonly=True,
            description="Indicates the maximum number of service sessions, regardless of protocol, this manager is able to support.")
    inner_Manager_1_0_0_SerialConsole_ConnectTypesSupported = restplus.fields.String(
            enum=Manager_1_0_0_SerialConnectTypesSupported,
            readonly=True,
            description="This object is used to enumerate the Serial Console connection types allowed by the implementation.")
    Manager_1_0_0_SerialConsole_ConnectTypesSupported = restplus.fields.List(inner_Manager_1_0_0_SerialConsole_ConnectTypesSupported,
            readonly=True,
            description="This object is used to enumerate the Serial Console connection types allowed by the implementation.")


    Manager_1_0_0_SerialConsole = namespace.model("Manager_1_0_0_SerialConsole",
    {
        "ServiceEnabled": Manager_1_0_0_SerialConsole_ServiceEnabled,
        "MaxConcurrentSessions": Manager_1_0_0_SerialConsole_MaxConcurrentSessions,
        "ConnectTypesSupported": Manager_1_0_0_SerialConsole_ConnectTypesSupported,
    })

    #
    # MessageRegistry_1_0_0_Message
    #

    MessageRegistry_1_0_0_Message_Message = restplus.fields.String(
            readonly=True,
            description="The actual message.")
    MessageRegistry_1_0_0_Message_Description = restplus.fields.String(
            readonly=True,
            description="This is a short description of how and when this message is to be used.")
    MessageRegistry_1_0_0_Message_Severity = restplus.fields.String(
            readonly=True,
            description="This is the severity of the message.")
    MessageRegistry_1_0_0_Message_NumberOfArgs = restplus.fields.Float(
            readonly=True,
            description="The number of arguments to be expected to be passed in as MessageArgs for this message.")
    MessageRegistry_1_0_0_Message_Resolution = restplus.fields.String(
            readonly=True,
            description="Used to provide suggestions on how to resolve the situation that caused the error.")
    inner_MessageRegistry_1_0_0_Message_ParamTypes = restplus.fields.String(
            enum=MessageRegistry_1_0_0_ParamType,
            readonly=True,
            description="The MessageArg types, in order, for the message.")
    MessageRegistry_1_0_0_Message_ParamTypes = restplus.fields.List(inner_MessageRegistry_1_0_0_Message_ParamTypes,
            readonly=True,
            description="The MessageArg types, in order, for the message.")

    inner_MessageRegistry_1_0_0_Message_Oem = Resource_Oem
    MessageRegistry_1_0_0_Message_Oem = restplus.fields.Nested(inner_MessageRegistry_1_0_0_Message_Oem,
            description="Oem extension object.")


    MessageRegistry_1_0_0_Message = namespace.model("MessageRegistry_1_0_0_Message",
    {
        "Message": MessageRegistry_1_0_0_Message_Message,
        "Description": MessageRegistry_1_0_0_Message_Description,
        "Severity": MessageRegistry_1_0_0_Message_Severity,
        "NumberOfArgs": MessageRegistry_1_0_0_Message_NumberOfArgs,
        "ParamTypes": MessageRegistry_1_0_0_Message_ParamTypes,
        "Resolution": MessageRegistry_1_0_0_Message_Resolution,
        "Oem": MessageRegistry_1_0_0_Message_Oem,
    })

    #
    # MessageRegistry_1_0_0_MessageRegistry
    #

    MessageRegistry_1_0_0_MessageRegistry_RegistryVersion = restplus.fields.String(
            readonly=True,
            description="This is the message registry version which is used in the middle portion of a messageID.")
    MessageRegistry_1_0_0_MessageRegistry_RegistryPrefix = restplus.fields.String(
            readonly=True,
            description="This is the single word prefix used to form a messageID structure.")
    MessageRegistry_1_0_0_MessageRegistry_Language = restplus.fields.String(
            readonly=True,
            description="This is the RFC 5646 compliant language code for the registry.")
    MessageRegistry_1_0_0_MessageRegistry_OwningEntity = restplus.fields.String(
            readonly=True,
            description="This is the organization or company that publishes this registry.")
    inner_MessageRegistry_1_0_0_MessageRegistry_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    MessageRegistry_1_0_0_MessageRegistry_odata_context = inner_MessageRegistry_1_0_0_MessageRegistry_odata_context

    inner_MessageRegistry_1_0_0_MessageRegistry_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    MessageRegistry_1_0_0_MessageRegistry_Name = inner_MessageRegistry_1_0_0_MessageRegistry_Name

    inner_MessageRegistry_1_0_0_MessageRegistry_Oem = Resource_Oem
    MessageRegistry_1_0_0_MessageRegistry_Oem = restplus.fields.Nested(inner_MessageRegistry_1_0_0_MessageRegistry_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_MessageRegistry_1_0_0_MessageRegistry_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    MessageRegistry_1_0_0_MessageRegistry_odata_type = inner_MessageRegistry_1_0_0_MessageRegistry_odata_type

    inner_MessageRegistry_1_0_0_MessageRegistry_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    MessageRegistry_1_0_0_MessageRegistry_Id = inner_MessageRegistry_1_0_0_MessageRegistry_Id

    inner_MessageRegistry_1_0_0_MessageRegistry_Messages = MessageRegistry_1_0_0_MessageProperty
    MessageRegistry_1_0_0_MessageRegistry_Messages = restplus.fields.Nested(inner_MessageRegistry_1_0_0_MessageRegistry_Messages,
            readonly=True,
            description="The pattern property indicates that a free-form string is the unique identifier for the message within the registry.")

    inner_MessageRegistry_1_0_0_MessageRegistry_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    MessageRegistry_1_0_0_MessageRegistry_Description = inner_MessageRegistry_1_0_0_MessageRegistry_Description

    inner_MessageRegistry_1_0_0_MessageRegistry_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    MessageRegistry_1_0_0_MessageRegistry_odata_id = inner_MessageRegistry_1_0_0_MessageRegistry_odata_id


    MessageRegistry_1_0_0_MessageRegistry = namespace.model("MessageRegistry_1_0_0_MessageRegistry",
    {
        "@odata.context": MessageRegistry_1_0_0_MessageRegistry_odata_context,
        "Name": MessageRegistry_1_0_0_MessageRegistry_Name,
        "Oem": MessageRegistry_1_0_0_MessageRegistry_Oem,
        "@odata.type": MessageRegistry_1_0_0_MessageRegistry_odata_type,
        "Id": MessageRegistry_1_0_0_MessageRegistry_Id,
        "RegistryVersion": MessageRegistry_1_0_0_MessageRegistry_RegistryVersion,
        "Messages": MessageRegistry_1_0_0_MessageRegistry_Messages,
        "RegistryPrefix": MessageRegistry_1_0_0_MessageRegistry_RegistryPrefix,
        "Description": MessageRegistry_1_0_0_MessageRegistry_Description,
        "Language": MessageRegistry_1_0_0_MessageRegistry_Language,
        "OwningEntity": MessageRegistry_1_0_0_MessageRegistry_OwningEntity,
        "@odata.id": MessageRegistry_1_0_0_MessageRegistry_odata_id,
    })

    #
    # Message_1_0_0_Message
    #

    Message_1_0_0_Message_Message = restplus.fields.String(
            description="This is the human readable message, if provided.")
    Message_1_0_0_Message_MessageId = restplus.fields.String(
            description="This is the key for this message which can be used to look up the message in a message registry.")
    Message_1_0_0_Message_Severity = restplus.fields.String(
            description="This is the severity of the errors.")
    Message_1_0_0_Message_Resolution = restplus.fields.String(
            description="Used to provide suggestions on how to resolve the situation that caused the error.")
    inner_Message_1_0_0_Message_RelatedProperties = restplus.fields.String(
            description="This is an array of properties described by the message.")
    Message_1_0_0_Message_RelatedProperties = restplus.fields.List(inner_Message_1_0_0_Message_RelatedProperties,
            description="This is an array of properties described by the message.")

    inner_Message_1_0_0_Message_MessageArgs = restplus.fields.String(
            description="This array of message arguments are substituted for the arguments in the message when looked up in the message registry.")
    Message_1_0_0_Message_MessageArgs = restplus.fields.List(inner_Message_1_0_0_Message_MessageArgs,
            description="This array of message arguments are substituted for the arguments in the message when looked up in the message registry.")

    inner_Message_1_0_0_Message_Oem = Resource_Oem
    Message_1_0_0_Message_Oem = restplus.fields.Nested(inner_Message_1_0_0_Message_Oem,
            description="Oem extension object.")


    Message_1_0_0_Message = namespace.model("Message_1_0_0_Message",
    {
        "RelatedProperties": Message_1_0_0_Message_RelatedProperties,
        "Oem": Message_1_0_0_Message_Oem,
        "Message": Message_1_0_0_Message_Message,
        "MessageArgs": Message_1_0_0_Message_MessageArgs,
        "MessageId": Message_1_0_0_Message_MessageId,
        "Severity": Message_1_0_0_Message_Severity,
        "Resolution": Message_1_0_0_Message_Resolution,
    })

    #
    # Onrack_Action_BIOSConfig
    #

    inner_Onrack_Action_BIOSConfig_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_BIOSConfig_odata_id = inner_Onrack_Action_BIOSConfig_odata_id

    inner_Onrack_Action_BIOSConfig_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Onrack_Action_BIOSConfig_Name = inner_Onrack_Action_BIOSConfig_Name

    inner_Onrack_Action_BIOSConfig_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_BIOSConfig_odata_type = inner_Onrack_Action_BIOSConfig_odata_type

    inner_Onrack_Action_BIOSConfig_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Onrack_Action_BIOSConfig_Id = inner_Onrack_Action_BIOSConfig_Id

    inner_Onrack_Action_BIOSConfig_Oem = Resource_Oem
    Onrack_Action_BIOSConfig_Oem = restplus.fields.Nested(inner_Onrack_Action_BIOSConfig_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Onrack_Action_BIOSConfig_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Onrack_Action_BIOSConfig_Description = inner_Onrack_Action_BIOSConfig_Description

    inner_Onrack_Action_BIOSConfig_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Onrack_Action_BIOSConfig_odata_context = inner_Onrack_Action_BIOSConfig_odata_context


    Onrack_Action_BIOSConfig = namespace.model("Onrack_Action_BIOSConfig",
    {
        "@odata.id": Onrack_Action_BIOSConfig_odata_id,
        "Name": Onrack_Action_BIOSConfig_Name,
        "@odata.type": Onrack_Action_BIOSConfig_odata_type,
        "Id": Onrack_Action_BIOSConfig_Id,
        "Oem": Onrack_Action_BIOSConfig_Oem,
        "Description": Onrack_Action_BIOSConfig_Description,
        "@odata.context": Onrack_Action_BIOSConfig_odata_context,
    })

    #
    # Onrack_Action_BIOSmage
    #

    inner_Onrack_Action_BIOSmage_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Onrack_Action_BIOSmage_Id = inner_Onrack_Action_BIOSmage_Id

    inner_Onrack_Action_BIOSmage_Oem = Resource_Oem
    Onrack_Action_BIOSmage_Oem = restplus.fields.Nested(inner_Onrack_Action_BIOSmage_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Onrack_Action_BIOSmage_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Onrack_Action_BIOSmage_Name = inner_Onrack_Action_BIOSmage_Name

    inner_Onrack_Action_BIOSmage_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_BIOSmage_odata_type = inner_Onrack_Action_BIOSmage_odata_type

    inner_Onrack_Action_BIOSmage_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Onrack_Action_BIOSmage_odata_context = inner_Onrack_Action_BIOSmage_odata_context

    inner_Onrack_Action_BIOSmage_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Onrack_Action_BIOSmage_Description = inner_Onrack_Action_BIOSmage_Description

    inner_Onrack_Action_BIOSmage_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_BIOSmage_odata_id = inner_Onrack_Action_BIOSmage_odata_id


    Onrack_Action_BIOSmage = namespace.model("Onrack_Action_BIOSmage",
    {
        "Id": Onrack_Action_BIOSmage_Id,
        "Oem": Onrack_Action_BIOSmage_Oem,
        "Name": Onrack_Action_BIOSmage_Name,
        "@odata.type": Onrack_Action_BIOSmage_odata_type,
        "@odata.context": Onrack_Action_BIOSmage_odata_context,
        "Description": Onrack_Action_BIOSmage_Description,
        "@odata.id": Onrack_Action_BIOSmage_odata_id,
    })

    #
    # Onrack_Action_BMCImage
    #

    inner_Onrack_Action_BMCImage_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Onrack_Action_BMCImage_odata_context = inner_Onrack_Action_BMCImage_odata_context

    inner_Onrack_Action_BMCImage_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_BMCImage_odata_type = inner_Onrack_Action_BMCImage_odata_type

    inner_Onrack_Action_BMCImage_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_BMCImage_odata_id = inner_Onrack_Action_BMCImage_odata_id

    inner_Onrack_Action_BMCImage_Oem = Resource_Oem
    Onrack_Action_BMCImage_Oem = restplus.fields.Nested(inner_Onrack_Action_BMCImage_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Onrack_Action_BMCImage_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Onrack_Action_BMCImage_Name = inner_Onrack_Action_BMCImage_Name

    inner_Onrack_Action_BMCImage_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Onrack_Action_BMCImage_Id = inner_Onrack_Action_BMCImage_Id

    inner_Onrack_Action_BMCImage_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Onrack_Action_BMCImage_Description = inner_Onrack_Action_BMCImage_Description


    Onrack_Action_BMCImage = namespace.model("Onrack_Action_BMCImage",
    {
        "@odata.context": Onrack_Action_BMCImage_odata_context,
        "@odata.type": Onrack_Action_BMCImage_odata_type,
        "@odata.id": Onrack_Action_BMCImage_odata_id,
        "Oem": Onrack_Action_BMCImage_Oem,
        "Name": Onrack_Action_BMCImage_Name,
        "Id": Onrack_Action_BMCImage_Id,
        "Description": Onrack_Action_BMCImage_Description,
    })

    #
    # Onrack_Action_BootImage
    #

    inner_Onrack_Action_BootImage_OsNames = restplus.fields.String(
            description="A list of the OS image names that can be installed on this computer system.")
    Onrack_Action_BootImage_OsNames = restplus.fields.List(inner_Onrack_Action_BootImage_OsNames,
            description="A list of the OS image names that can be installed on this computer system.")

    inner_Onrack_Action_BootImage_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Onrack_Action_BootImage_Description = inner_Onrack_Action_BootImage_Description

    inner_Onrack_Action_BootImage_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Onrack_Action_BootImage_Name = inner_Onrack_Action_BootImage_Name

    inner_Onrack_Action_BootImage_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Onrack_Action_BootImage_Id = inner_Onrack_Action_BootImage_Id

    inner_Onrack_Action_BootImage_Oem = Resource_Oem
    Onrack_Action_BootImage_Oem = restplus.fields.Nested(inner_Onrack_Action_BootImage_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Onrack_Action_BootImage_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_BootImage_odata_type = inner_Onrack_Action_BootImage_odata_type

    inner_Onrack_Action_BootImage_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_BootImage_odata_id = inner_Onrack_Action_BootImage_odata_id

    inner_Onrack_Action_BootImage_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Onrack_Action_BootImage_odata_context = inner_Onrack_Action_BootImage_odata_context


    Onrack_Action_BootImage = namespace.model("Onrack_Action_BootImage",
    {
        "Description": Onrack_Action_BootImage_Description,
        "OsNames": Onrack_Action_BootImage_OsNames,
        "Name": Onrack_Action_BootImage_Name,
        "Id": Onrack_Action_BootImage_Id,
        "Oem": Onrack_Action_BootImage_Oem,
        "@odata.type": Onrack_Action_BootImage_odata_type,
        "@odata.id": Onrack_Action_BootImage_odata_id,
        "@odata.context": Onrack_Action_BootImage_odata_context,
    })

    #
    # Onrack_Action_FlashAll
    #

    inner_Onrack_Action_FlashAll_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Onrack_Action_FlashAll_Id = inner_Onrack_Action_FlashAll_Id

    inner_Onrack_Action_FlashAll_Oem = Resource_Oem
    Onrack_Action_FlashAll_Oem = restplus.fields.Nested(inner_Onrack_Action_FlashAll_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Onrack_Action_FlashAll_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Onrack_Action_FlashAll_Name = inner_Onrack_Action_FlashAll_Name

    inner_Onrack_Action_FlashAll_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_FlashAll_odata_type = inner_Onrack_Action_FlashAll_odata_type

    inner_Onrack_Action_FlashAll_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Onrack_Action_FlashAll_odata_context = inner_Onrack_Action_FlashAll_odata_context

    inner_Onrack_Action_FlashAll_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Onrack_Action_FlashAll_Description = inner_Onrack_Action_FlashAll_Description

    inner_Onrack_Action_FlashAll_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_FlashAll_odata_id = inner_Onrack_Action_FlashAll_odata_id


    Onrack_Action_FlashAll = namespace.model("Onrack_Action_FlashAll",
    {
        "Id": Onrack_Action_FlashAll_Id,
        "Oem": Onrack_Action_FlashAll_Oem,
        "Name": Onrack_Action_FlashAll_Name,
        "@odata.type": Onrack_Action_FlashAll_odata_type,
        "@odata.context": Onrack_Action_FlashAll_odata_context,
        "Description": Onrack_Action_FlashAll_Description,
        "@odata.id": Onrack_Action_FlashAll_odata_id,
    })

    #
    # Onrack_Action_IndicatorLed
    #

    Onrack_Action_IndicatorLed_IndicatorLed = restplus.fields.String(
            description="(Required) This is the request state of the indicator LED")
    inner_Onrack_Action_IndicatorLed_IndicatorLed_AllowableValues = restplus.fields.String(
            description="A list of allowable values for the indicator Led")
    Onrack_Action_IndicatorLed_IndicatorLed_AllowableValues = restplus.fields.List(inner_Onrack_Action_IndicatorLed_IndicatorLed_AllowableValues,
            attribute="IndicatorLed_AllowableValues",
            description="A list of allowable values for the indicator Led")

    inner_Onrack_Action_IndicatorLed_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Onrack_Action_IndicatorLed_Description = inner_Onrack_Action_IndicatorLed_Description

    inner_Onrack_Action_IndicatorLed_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Onrack_Action_IndicatorLed_odata_context = inner_Onrack_Action_IndicatorLed_odata_context

    inner_Onrack_Action_IndicatorLed_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_IndicatorLed_odata_id = inner_Onrack_Action_IndicatorLed_odata_id

    inner_Onrack_Action_IndicatorLed_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Onrack_Action_IndicatorLed_Id = inner_Onrack_Action_IndicatorLed_Id

    inner_Onrack_Action_IndicatorLed_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Onrack_Action_IndicatorLed_Name = inner_Onrack_Action_IndicatorLed_Name

    inner_Onrack_Action_IndicatorLed_Oem = Resource_Oem
    Onrack_Action_IndicatorLed_Oem = restplus.fields.Nested(inner_Onrack_Action_IndicatorLed_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Onrack_Action_IndicatorLed_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_IndicatorLed_odata_type = inner_Onrack_Action_IndicatorLed_odata_type


    Onrack_Action_IndicatorLed = namespace.model("Onrack_Action_IndicatorLed",
    {
        "Description": Onrack_Action_IndicatorLed_Description,
        "@odata.context": Onrack_Action_IndicatorLed_odata_context,
        "@odata.id": Onrack_Action_IndicatorLed_odata_id,
        "IndicatorLed.AllowableValues": Onrack_Action_IndicatorLed_IndicatorLed_AllowableValues,
        "Id": Onrack_Action_IndicatorLed_Id,
        "Name": Onrack_Action_IndicatorLed_Name,
        "Oem": Onrack_Action_IndicatorLed_Oem,
        "IndicatorLed": Onrack_Action_IndicatorLed_IndicatorLed,
        "@odata.type": Onrack_Action_IndicatorLed_odata_type,
    })

    #
    # Onrack_Action_RAIDImage
    #

    inner_Onrack_Action_RAIDImage_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Onrack_Action_RAIDImage_odata_context = inner_Onrack_Action_RAIDImage_odata_context

    inner_Onrack_Action_RAIDImage_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Onrack_Action_RAIDImage_Name = inner_Onrack_Action_RAIDImage_Name

    inner_Onrack_Action_RAIDImage_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_RAIDImage_odata_type = inner_Onrack_Action_RAIDImage_odata_type

    inner_Onrack_Action_RAIDImage_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_RAIDImage_odata_id = inner_Onrack_Action_RAIDImage_odata_id

    inner_Onrack_Action_RAIDImage_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Onrack_Action_RAIDImage_Id = inner_Onrack_Action_RAIDImage_Id

    inner_Onrack_Action_RAIDImage_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Onrack_Action_RAIDImage_Description = inner_Onrack_Action_RAIDImage_Description

    inner_Onrack_Action_RAIDImage_Oem = Resource_Oem
    Onrack_Action_RAIDImage_Oem = restplus.fields.Nested(inner_Onrack_Action_RAIDImage_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")


    Onrack_Action_RAIDImage = namespace.model("Onrack_Action_RAIDImage",
    {
        "@odata.context": Onrack_Action_RAIDImage_odata_context,
        "Name": Onrack_Action_RAIDImage_Name,
        "@odata.type": Onrack_Action_RAIDImage_odata_type,
        "@odata.id": Onrack_Action_RAIDImage_odata_id,
        "Id": Onrack_Action_RAIDImage_Id,
        "Description": Onrack_Action_RAIDImage_Description,
        "Oem": Onrack_Action_RAIDImage_Oem,
    })

    #
    # Onrack_Action_RefreshNode
    #

    inner_Onrack_Action_RefreshNode_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Onrack_Action_RefreshNode_Id = inner_Onrack_Action_RefreshNode_Id

    inner_Onrack_Action_RefreshNode_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_RefreshNode_odata_type = inner_Onrack_Action_RefreshNode_odata_type

    inner_Onrack_Action_RefreshNode_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_RefreshNode_odata_id = inner_Onrack_Action_RefreshNode_odata_id

    inner_Onrack_Action_RefreshNode_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Onrack_Action_RefreshNode_odata_context = inner_Onrack_Action_RefreshNode_odata_context

    inner_Onrack_Action_RefreshNode_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Onrack_Action_RefreshNode_Description = inner_Onrack_Action_RefreshNode_Description

    inner_Onrack_Action_RefreshNode_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Onrack_Action_RefreshNode_Name = inner_Onrack_Action_RefreshNode_Name

    inner_Onrack_Action_RefreshNode_Oem = Resource_Oem
    Onrack_Action_RefreshNode_Oem = restplus.fields.Nested(inner_Onrack_Action_RefreshNode_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")


    Onrack_Action_RefreshNode = namespace.model("Onrack_Action_RefreshNode",
    {
        "Id": Onrack_Action_RefreshNode_Id,
        "@odata.type": Onrack_Action_RefreshNode_odata_type,
        "@odata.id": Onrack_Action_RefreshNode_odata_id,
        "@odata.context": Onrack_Action_RefreshNode_odata_context,
        "Description": Onrack_Action_RefreshNode_Description,
        "Name": Onrack_Action_RefreshNode_Name,
        "Oem": Onrack_Action_RefreshNode_Oem,
    })

    #
    # Onrack_Action_SystemsReset
    #

    inner_Onrack_Action_SystemsReset_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Onrack_Action_SystemsReset_Description = inner_Onrack_Action_SystemsReset_Description

    inner_Onrack_Action_SystemsReset_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Onrack_Action_SystemsReset_Id = inner_Onrack_Action_SystemsReset_Id

    inner_Onrack_Action_SystemsReset_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_SystemsReset_odata_id = inner_Onrack_Action_SystemsReset_odata_id

    inner_Onrack_Action_SystemsReset_Oem = Resource_Oem
    Onrack_Action_SystemsReset_Oem = restplus.fields.Nested(inner_Onrack_Action_SystemsReset_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Onrack_Action_SystemsReset_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Onrack_Action_SystemsReset_Name = inner_Onrack_Action_SystemsReset_Name

    inner_Onrack_Action_SystemsReset_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Onrack_Action_SystemsReset_odata_context = inner_Onrack_Action_SystemsReset_odata_context

    inner_Onrack_Action_SystemsReset_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Onrack_Action_SystemsReset_odata_type = inner_Onrack_Action_SystemsReset_odata_type


    Onrack_Action_SystemsReset = namespace.model("Onrack_Action_SystemsReset",
    {
        "Description": Onrack_Action_SystemsReset_Description,
        "Id": Onrack_Action_SystemsReset_Id,
        "@odata.id": Onrack_Action_SystemsReset_odata_id,
        "Oem": Onrack_Action_SystemsReset_Oem,
        "Name": Onrack_Action_SystemsReset_Name,
        "@odata.context": Onrack_Action_SystemsReset_odata_context,
        "@odata.type": Onrack_Action_SystemsReset_odata_type,
    })

    #
    # Onrack_BootImageParamNetworkDevice
    #

    Onrack_BootImageParamNetworkDevice_device = restplus.fields.String(
            readonly=False,
            description="(Required) The name of the network device.")
    inner_Onrack_BootImageParamNetworkDevice_ipv6 = Onrack_BootImageParamIpSetting
    Onrack_BootImageParamNetworkDevice_ipv6 = restplus.fields.Nested(inner_Onrack_BootImageParamNetworkDevice_ipv6,
            description="(Optional) This is the ipv6 parameter of the network device.")

    inner_Onrack_BootImageParamNetworkDevice_ipv4 = Onrack_BootImageParamIpSetting
    Onrack_BootImageParamNetworkDevice_ipv4 = restplus.fields.Nested(inner_Onrack_BootImageParamNetworkDevice_ipv4,
            description="(Optional) This the ipv4 parameter of the network device.")


    Onrack_BootImageParamNetworkDevice = namespace.model("Onrack_BootImageParamNetworkDevice",
    {
        "ipv6": Onrack_BootImageParamNetworkDevice_ipv6,
        "ipv4": Onrack_BootImageParamNetworkDevice_ipv4,
        "device": Onrack_BootImageParamNetworkDevice_device,
    })

    #
    # Onrack_LedActionItemModel
    #

    inner_Onrack_LedActionItemModel_led_status = restplus.fields.String(
            enum=ComputerSystem_1_0_0_IndicatorLED,
            description="Lit: The Indicator LED is lit., Unknown: The state of the Indicator LED cannot be determined., Off: The Indicator LED is off., Blinking: The Indicator LED is blinking.")
    Onrack_LedActionItemModel_led_status = inner_Onrack_LedActionItemModel_led_status


    Onrack_LedActionItemModel = namespace.model("Onrack_LedActionItemModel",
    {
        "led_status": Onrack_LedActionItemModel_led_status,
    })

    #
    # Onrack_PowerActionItemModelRequest
    #

    inner_Onrack_PowerActionItemModelRequest_reset_type = restplus.fields.String(
            enum=Resource_ResetType,
            description="On: Turn the system on, GracefulShutdown: Perform a graceful system shutdown and power off, GracefulRestart: Perform a graceful system shutdown followed by a restart of the system, ForceOff: Turn the system off immediately (non-graceful) shutdown, PushPowerButton: Simulate the pressing of the physical power button on this system, ForceOn: Turn the system on immediately, ForceRestart: Perform an immediate (non-graceful) shutdown, followed by a restart of the system, Nmi: Generate a Diagnostic Interrupt (usually an NMI on x86 systems) to cease normal operations, perform diagnostic actions and typically halt the system.")
    Onrack_PowerActionItemModelRequest_reset_type = inner_Onrack_PowerActionItemModelRequest_reset_type


    Onrack_PowerActionItemModelRequest = namespace.model("Onrack_PowerActionItemModelRequest",
    {
        "reset_type": Onrack_PowerActionItemModelRequest_reset_type,
    })

    #
    # PDUCollection_PDUCollection
    #

    inner_PDUCollection_PDUCollection_Members = odata_4_0_0_idRef
    PDUCollection_PDUCollection_Members = restplus.fields.Nested(inner_PDUCollection_PDUCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_PDUCollection_PDUCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    PDUCollection_PDUCollection_Description = inner_PDUCollection_PDUCollection_Description

    inner_PDUCollection_PDUCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    PDUCollection_PDUCollection_Membersodata_count = inner_PDUCollection_PDUCollection_Membersodata_count

    inner_PDUCollection_PDUCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    PDUCollection_PDUCollection_Name = inner_PDUCollection_PDUCollection_Name

    inner_PDUCollection_PDUCollection_Oem = Resource_Oem
    PDUCollection_PDUCollection_Oem = restplus.fields.Nested(inner_PDUCollection_PDUCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_PDUCollection_PDUCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    PDUCollection_PDUCollection_odata_id = inner_PDUCollection_PDUCollection_odata_id

    inner_PDUCollection_PDUCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    PDUCollection_PDUCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_PDUCollection_PDUCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_PDUCollection_PDUCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    PDUCollection_PDUCollection_odata_context = inner_PDUCollection_PDUCollection_odata_context

    inner_PDUCollection_PDUCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    PDUCollection_PDUCollection_odata_type = inner_PDUCollection_PDUCollection_odata_type


    PDUCollection_PDUCollection = namespace.model("PDUCollection_PDUCollection",
    {
        "Description": PDUCollection_PDUCollection_Description,
        "Members@odata.count": PDUCollection_PDUCollection_Membersodata_count,
        "Name": PDUCollection_PDUCollection_Name,
        "Members": PDUCollection_PDUCollection_Members,
        "Oem": PDUCollection_PDUCollection_Oem,
        "@odata.id": PDUCollection_PDUCollection_odata_id,
        "Members@odata.navigationLink": PDUCollection_PDUCollection_Membersodata_navigationLink,
        "@odata.context": PDUCollection_PDUCollection_odata_context,
        "@odata.type": PDUCollection_PDUCollection_odata_type,
    })

    #
    # PDUMetric_1_0_0_PDUPower
    #

    PDUMetric_1_0_0_PDUPower_pduTotalEnergyValue = restplus.fields.String(
            readonly=True,
            description="This property shall specify the total energy used in KWatt hours used by this PDU")
    PDUMetric_1_0_0_PDUPower_pduMeanKVAValue = restplus.fields.String(
            readonly=True,
            description="This property shall specify the mean KVA value for this PDU")
    PDUMetric_1_0_0_PDUPower_pduRMSAmpsValue = restplus.fields.String(
            readonly=True,
            description="This property shall specify the RMS amps value for this PDU")
    PDUMetric_1_0_0_PDUPower_pduRS = restplus.fields.String(
            readonly=True,
            description="")
    PDUMetric_1_0_0_PDUPower_pduCommsFail = restplus.fields.String(
            description="This property shall specify the of the PDU communications link")
    PDUMetric_1_0_0_PDUPower_pduPwrSupplyFreq = restplus.fields.String(
            readonly=True,
            description="This property shall specify the power supply frequency of the PDU")
    PDUMetric_1_0_0_PDUPower_pduMonEn = restplus.fields.String(
            readonly=True,
            description="")
    PDUMetric_1_0_0_PDUPower_Name = restplus.fields.String(
            readonly=True,
            description="This property shall specify the assigned name of this PDU")
    PDUMetric_1_0_0_PDUPower_pduRMSVoltsValue = restplus.fields.String(
            readonly=True,
            description="This property shall specify the RMS volts value for this PDU")
    PDUMetric_1_0_0_PDUPower_pduPwrFactorValue = restplus.fields.String(
            readonly=True,
            description="")
    PDUMetric_1_0_0_PDUPower_pduMeanKWattsValue = restplus.fields.String(
            readonly=True,
            description="This property shall specify the mean KWatts used by this PDU")
    PDUMetric_1_0_0_PDUPower_pduName = restplus.fields.String(
            readonly=True,
            description="This property shall specify the PDU name")
    inner_PDUMetric_1_0_0_PDUPower_Outlets = PDUMetric_1_0_0_OutletInformation
    PDUMetric_1_0_0_PDUPower_Outlets = restplus.fields.Nested(inner_PDUMetric_1_0_0_PDUPower_Outlets, as_list=True,
            readonly=True,
            description="This property shall specify ann array of outlets present on the PDU")

    inner_PDUMetric_1_0_0_PDUPower_Outletsodata_count = restplus.fields.Float(
            attribute="Outletsodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    PDUMetric_1_0_0_PDUPower_Outletsodata_count = inner_PDUMetric_1_0_0_PDUPower_Outletsodata_count

    inner_PDUMetric_1_0_0_PDUPower_Outletsodata_navigationLink = odata_4_0_0_idRef
    PDUMetric_1_0_0_PDUPower_Outletsodata_navigationLink = restplus.fields.Nested(inner_PDUMetric_1_0_0_PDUPower_Outletsodata_navigationLink,
            attribute="Outletsodata_navigationLink")


    PDUMetric_1_0_0_PDUPower = namespace.model("PDUMetric_1_0_0_PDUPower",
    {
        "Outlets@odata.count": PDUMetric_1_0_0_PDUPower_Outletsodata_count,
        "pduTotalEnergyValue": PDUMetric_1_0_0_PDUPower_pduTotalEnergyValue,
        "Outlets": PDUMetric_1_0_0_PDUPower_Outlets,
        "pduMeanKVAValue": PDUMetric_1_0_0_PDUPower_pduMeanKVAValue,
        "pduRMSAmpsValue": PDUMetric_1_0_0_PDUPower_pduRMSAmpsValue,
        "pduRS": PDUMetric_1_0_0_PDUPower_pduRS,
        "pduCommsFail": PDUMetric_1_0_0_PDUPower_pduCommsFail,
        "Outlets@odata.navigationLink": PDUMetric_1_0_0_PDUPower_Outletsodata_navigationLink,
        "pduPwrSupplyFreq": PDUMetric_1_0_0_PDUPower_pduPwrSupplyFreq,
        "pduMonEn": PDUMetric_1_0_0_PDUPower_pduMonEn,
        "Name": PDUMetric_1_0_0_PDUPower_Name,
        "pduRMSVoltsValue": PDUMetric_1_0_0_PDUPower_pduRMSVoltsValue,
        "pduPwrFactorValue": PDUMetric_1_0_0_PDUPower_pduPwrFactorValue,
        "pduMeanKWattsValue": PDUMetric_1_0_0_PDUPower_pduMeanKWattsValue,
        "pduName": PDUMetric_1_0_0_PDUPower_pduName,
    })

    #
    # Power_1_0_0_PowerLimit
    #

    Power_1_0_0_PowerLimit_LimitInWatts = restplus.fields.Float(
            description="The Power limit in watts. Set to null to disable power capping.")
    Power_1_0_0_PowerLimit_CorrectionInMs = restplus.fields.Float(
            description="The time required for the limiting process to reduce power consumption to below the limit.")
    inner_Power_1_0_0_PowerLimit_LimitException = restplus.fields.String(
            enum=Power_1_0_0_PowerLimitException,
            description="LogEventOnly: Log an event when the limit is exceeded, but take no further action., HardPowerOff: Turn the power off immediately when the limit is exceeded., Oem: Take an OEM-defined action., NoAction: Take no action when the limit is exceeded.")
    Power_1_0_0_PowerLimit_LimitException = inner_Power_1_0_0_PowerLimit_LimitException


    Power_1_0_0_PowerLimit = namespace.model("Power_1_0_0_PowerLimit",
    {
        "LimitException": Power_1_0_0_PowerLimit_LimitException,
        "LimitInWatts": Power_1_0_0_PowerLimit_LimitInWatts,
        "CorrectionInMs": Power_1_0_0_PowerLimit_CorrectionInMs,
    })

    #
    # ProcessorCollection_ProcessorCollection
    #

    inner_ProcessorCollection_ProcessorCollection_Members = odata_4_0_0_idRef
    ProcessorCollection_ProcessorCollection_Members = restplus.fields.Nested(inner_ProcessorCollection_ProcessorCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_ProcessorCollection_ProcessorCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    ProcessorCollection_ProcessorCollection_odata_type = inner_ProcessorCollection_ProcessorCollection_odata_type

    inner_ProcessorCollection_ProcessorCollection_Oem = Resource_Oem
    ProcessorCollection_ProcessorCollection_Oem = restplus.fields.Nested(inner_ProcessorCollection_ProcessorCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_ProcessorCollection_ProcessorCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    ProcessorCollection_ProcessorCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_ProcessorCollection_ProcessorCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_ProcessorCollection_ProcessorCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    ProcessorCollection_ProcessorCollection_Description = inner_ProcessorCollection_ProcessorCollection_Description

    inner_ProcessorCollection_ProcessorCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    ProcessorCollection_ProcessorCollection_Name = inner_ProcessorCollection_ProcessorCollection_Name

    inner_ProcessorCollection_ProcessorCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    ProcessorCollection_ProcessorCollection_odata_context = inner_ProcessorCollection_ProcessorCollection_odata_context

    inner_ProcessorCollection_ProcessorCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    ProcessorCollection_ProcessorCollection_odata_id = inner_ProcessorCollection_ProcessorCollection_odata_id

    inner_ProcessorCollection_ProcessorCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    ProcessorCollection_ProcessorCollection_Membersodata_count = inner_ProcessorCollection_ProcessorCollection_Membersodata_count


    ProcessorCollection_ProcessorCollection = namespace.model("ProcessorCollection_ProcessorCollection",
    {
        "@odata.type": ProcessorCollection_ProcessorCollection_odata_type,
        "Oem": ProcessorCollection_ProcessorCollection_Oem,
        "Members@odata.navigationLink": ProcessorCollection_ProcessorCollection_Membersodata_navigationLink,
        "Description": ProcessorCollection_ProcessorCollection_Description,
        "Members": ProcessorCollection_ProcessorCollection_Members,
        "Name": ProcessorCollection_ProcessorCollection_Name,
        "@odata.context": ProcessorCollection_ProcessorCollection_odata_context,
        "@odata.id": ProcessorCollection_ProcessorCollection_odata_id,
        "Members@odata.count": ProcessorCollection_ProcessorCollection_Membersodata_count,
    })

    #
    # Resource_1_0_0_ReferenceableMember
    #

    Resource_1_0_0_ReferenceableMember_MemberId = restplus.fields.String(
            description="This is the identifier for the member within the collection.")
    inner_Resource_1_0_0_ReferenceableMember_Oem = Resource_Oem
    Resource_1_0_0_ReferenceableMember_Oem = restplus.fields.Nested(inner_Resource_1_0_0_ReferenceableMember_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Resource_1_0_0_ReferenceableMember_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Resource_1_0_0_ReferenceableMember_odata_type = inner_Resource_1_0_0_ReferenceableMember_odata_type

    inner_Resource_1_0_0_ReferenceableMember_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Resource_1_0_0_ReferenceableMember_odata_context = inner_Resource_1_0_0_ReferenceableMember_odata_context

    inner_Resource_1_0_0_ReferenceableMember_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Resource_1_0_0_ReferenceableMember_odata_id = inner_Resource_1_0_0_ReferenceableMember_odata_id


    Resource_1_0_0_ReferenceableMember = namespace.model("Resource_1_0_0_ReferenceableMember",
    {
        "MemberId": Resource_1_0_0_ReferenceableMember_MemberId,
        "Oem": Resource_1_0_0_ReferenceableMember_Oem,
        "@odata.type": Resource_1_0_0_ReferenceableMember_odata_type,
        "@odata.context": Resource_1_0_0_ReferenceableMember_odata_context,
        "@odata.id": Resource_1_0_0_ReferenceableMember_odata_id,
    })

    #
    # Resource_1_0_0_Resource
    #

    inner_Resource_1_0_0_Resource_Oem = Resource_Oem
    Resource_1_0_0_Resource_Oem = restplus.fields.Nested(inner_Resource_1_0_0_Resource_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Resource_1_0_0_Resource_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Resource_1_0_0_Resource_Name = inner_Resource_1_0_0_Resource_Name

    inner_Resource_1_0_0_Resource_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Resource_1_0_0_Resource_Id = inner_Resource_1_0_0_Resource_Id

    inner_Resource_1_0_0_Resource_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Resource_1_0_0_Resource_odata_context = inner_Resource_1_0_0_Resource_odata_context

    inner_Resource_1_0_0_Resource_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Resource_1_0_0_Resource_Description = inner_Resource_1_0_0_Resource_Description

    inner_Resource_1_0_0_Resource_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Resource_1_0_0_Resource_odata_id = inner_Resource_1_0_0_Resource_odata_id

    inner_Resource_1_0_0_Resource_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Resource_1_0_0_Resource_odata_type = inner_Resource_1_0_0_Resource_odata_type


    Resource_1_0_0_Resource = namespace.model("Resource_1_0_0_Resource",
    {
        "Oem": Resource_1_0_0_Resource_Oem,
        "Name": Resource_1_0_0_Resource_Name,
        "Id": Resource_1_0_0_Resource_Id,
        "@odata.context": Resource_1_0_0_Resource_odata_context,
        "Description": Resource_1_0_0_Resource_Description,
        "@odata.id": Resource_1_0_0_Resource_odata_id,
        "@odata.type": Resource_1_0_0_Resource_odata_type,
    })

    #
    # Resource_1_0_0_ResourceCollection
    #

    inner_Resource_1_0_0_ResourceCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Resource_1_0_0_ResourceCollection_odata_context = inner_Resource_1_0_0_ResourceCollection_odata_context

    inner_Resource_1_0_0_ResourceCollection_Oem = Resource_Oem
    Resource_1_0_0_ResourceCollection_Oem = restplus.fields.Nested(inner_Resource_1_0_0_ResourceCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Resource_1_0_0_ResourceCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Resource_1_0_0_ResourceCollection_odata_type = inner_Resource_1_0_0_ResourceCollection_odata_type

    inner_Resource_1_0_0_ResourceCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Resource_1_0_0_ResourceCollection_Name = inner_Resource_1_0_0_ResourceCollection_Name

    inner_Resource_1_0_0_ResourceCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Resource_1_0_0_ResourceCollection_odata_id = inner_Resource_1_0_0_ResourceCollection_odata_id

    inner_Resource_1_0_0_ResourceCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Resource_1_0_0_ResourceCollection_Description = inner_Resource_1_0_0_ResourceCollection_Description


    Resource_1_0_0_ResourceCollection = namespace.model("Resource_1_0_0_ResourceCollection",
    {
        "@odata.context": Resource_1_0_0_ResourceCollection_odata_context,
        "Oem": Resource_1_0_0_ResourceCollection_Oem,
        "@odata.type": Resource_1_0_0_ResourceCollection_odata_type,
        "Name": Resource_1_0_0_ResourceCollection_Name,
        "@odata.id": Resource_1_0_0_ResourceCollection_odata_id,
        "Description": Resource_1_0_0_ResourceCollection_Description,
    })

    #
    # Resource_Item
    #

    inner_Resource_Item_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Resource_Item_odata_context = inner_Resource_Item_odata_context

    inner_Resource_Item_Oem = Resource_Oem
    Resource_Item_Oem = restplus.fields.Nested(inner_Resource_Item_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Resource_Item_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Resource_Item_odata_id = inner_Resource_Item_odata_id

    inner_Resource_Item_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Resource_Item_odata_type = inner_Resource_Item_odata_type


    Resource_Item = namespace.model("Resource_Item",
    {
        "@odata.context": Resource_Item_odata_context,
        "Oem": Resource_Item_Oem,
        "@odata.id": Resource_Item_odata_id,
        "@odata.type": Resource_Item_odata_type,
    })

    #
    # Resource_ReferenceableMember
    #

    inner_Resource_ReferenceableMember_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Resource_ReferenceableMember_odata_context = inner_Resource_ReferenceableMember_odata_context

    inner_Resource_ReferenceableMember_Oem = Resource_Oem
    Resource_ReferenceableMember_Oem = restplus.fields.Nested(inner_Resource_ReferenceableMember_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Resource_ReferenceableMember_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Resource_ReferenceableMember_odata_type = inner_Resource_ReferenceableMember_odata_type

    inner_Resource_ReferenceableMember_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Resource_ReferenceableMember_odata_id = inner_Resource_ReferenceableMember_odata_id


    Resource_ReferenceableMember = namespace.model("Resource_ReferenceableMember",
    {
        "@odata.context": Resource_ReferenceableMember_odata_context,
        "Oem": Resource_ReferenceableMember_Oem,
        "@odata.type": Resource_ReferenceableMember_odata_type,
        "@odata.id": Resource_ReferenceableMember_odata_id,
    })

    #
    # Resource_Resource
    #

    inner_Resource_Resource_Oem = Resource_Oem
    Resource_Resource_Oem = restplus.fields.Nested(inner_Resource_Resource_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Resource_Resource_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Resource_Resource_odata_type = inner_Resource_Resource_odata_type

    inner_Resource_Resource_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Resource_Resource_odata_id = inner_Resource_Resource_odata_id

    inner_Resource_Resource_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Resource_Resource_odata_context = inner_Resource_Resource_odata_context


    Resource_Resource = namespace.model("Resource_Resource",
    {
        "Oem": Resource_Resource_Oem,
        "@odata.type": Resource_Resource_odata_type,
        "@odata.id": Resource_Resource_odata_id,
        "@odata.context": Resource_Resource_odata_context,
    })

    #
    # Resource_Status
    #

    inner_Resource_Status_Health = restplus.fields.String(
            enum=Resource_Health,
            description="Critical: A critical condition exists that requires immediate attention, Warning: A condition exists that requires attention, OK: Normal")
    Resource_Status_Health = inner_Resource_Status_Health

    inner_Resource_Status_Oem = Resource_Oem
    Resource_Status_Oem = restplus.fields.Nested(inner_Resource_Status_Oem,
            )

    inner_Resource_Status_HealthRollup = restplus.fields.String(
            enum=Resource_Health,
            description="Critical: A critical condition exists that requires immediate attention, Warning: A condition exists that requires attention, OK: Normal")
    Resource_Status_HealthRollup = inner_Resource_Status_HealthRollup

    inner_Resource_Status_State = restplus.fields.String(
            enum=Resource_State,
            description="Absent: This function or resource is not present or not detected, StandbySpare: This function or resource is part of a redundancy set and is awaiting a failover or other external action to activate it., Enabled: This function or resource has been enabled, StandbyOffline: This function or resource is enabled, but awaiting an external action to activate it, InTest: This function or resource is undergoing testing, Disabled: This function or resource has been disabled, Starting: This function or resource is starting")
    Resource_Status_State = inner_Resource_Status_State


    Resource_Status = namespace.model("Resource_Status",
    {
        "Health": Resource_Status_Health,
        "Oem": Resource_Status_Oem,
        "HealthRollup": Resource_Status_HealthRollup,
        "State": Resource_Status_State,
    })

    #
    # RoleCollection_RoleCollection
    #

    inner_RoleCollection_RoleCollection_Members = odata_4_0_0_idRef
    RoleCollection_RoleCollection_Members = restplus.fields.Nested(inner_RoleCollection_RoleCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_RoleCollection_RoleCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    RoleCollection_RoleCollection_Membersodata_count = inner_RoleCollection_RoleCollection_Membersodata_count

    inner_RoleCollection_RoleCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    RoleCollection_RoleCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_RoleCollection_RoleCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_RoleCollection_RoleCollection_Oem = Resource_Oem
    RoleCollection_RoleCollection_Oem = restplus.fields.Nested(inner_RoleCollection_RoleCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_RoleCollection_RoleCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    RoleCollection_RoleCollection_Description = inner_RoleCollection_RoleCollection_Description

    inner_RoleCollection_RoleCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    RoleCollection_RoleCollection_odata_id = inner_RoleCollection_RoleCollection_odata_id

    inner_RoleCollection_RoleCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    RoleCollection_RoleCollection_odata_context = inner_RoleCollection_RoleCollection_odata_context

    inner_RoleCollection_RoleCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    RoleCollection_RoleCollection_odata_type = inner_RoleCollection_RoleCollection_odata_type

    inner_RoleCollection_RoleCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    RoleCollection_RoleCollection_Name = inner_RoleCollection_RoleCollection_Name


    RoleCollection_RoleCollection = namespace.model("RoleCollection_RoleCollection",
    {
        "Members": RoleCollection_RoleCollection_Members,
        "Members@odata.count": RoleCollection_RoleCollection_Membersodata_count,
        "Members@odata.navigationLink": RoleCollection_RoleCollection_Membersodata_navigationLink,
        "Oem": RoleCollection_RoleCollection_Oem,
        "Description": RoleCollection_RoleCollection_Description,
        "@odata.id": RoleCollection_RoleCollection_odata_id,
        "@odata.context": RoleCollection_RoleCollection_odata_context,
        "@odata.type": RoleCollection_RoleCollection_odata_type,
        "Name": RoleCollection_RoleCollection_Name,
    })

    #
    # Role_1_0_0_Role
    #

    Role_1_0_0_Role_IsPredefined = restplus.fields.Boolean(
            readonly=True,
            description="This property is used to indicate if the Role is one of the Redfish Predefined Roles vs a Custom role.")
    inner_Role_1_0_0_Role_AssignedPrivileges = restplus.fields.String(
            enum=Privileges_1_0_0_PrivilegeType,
            readonly=False,
            description="The redfish privileges that this role includes.")
    Role_1_0_0_Role_AssignedPrivileges = restplus.fields.List(inner_Role_1_0_0_Role_AssignedPrivileges,
            readonly=False,
            description="The redfish privileges that this role includes.")

    inner_Role_1_0_0_Role_OemPrivileges = restplus.fields.String(
            readonly=False,
            description="The OEM privileges that this role includes.")
    Role_1_0_0_Role_OemPrivileges = restplus.fields.List(inner_Role_1_0_0_Role_OemPrivileges,
            readonly=False,
            description="The OEM privileges that this role includes.")

    inner_Role_1_0_0_Role_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Role_1_0_0_Role_Name = inner_Role_1_0_0_Role_Name

    inner_Role_1_0_0_Role_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Role_1_0_0_Role_odata_id = inner_Role_1_0_0_Role_odata_id

    inner_Role_1_0_0_Role_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Role_1_0_0_Role_odata_type = inner_Role_1_0_0_Role_odata_type

    inner_Role_1_0_0_Role_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Role_1_0_0_Role_Id = inner_Role_1_0_0_Role_Id

    inner_Role_1_0_0_Role_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Role_1_0_0_Role_odata_context = inner_Role_1_0_0_Role_odata_context

    inner_Role_1_0_0_Role_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Role_1_0_0_Role_Description = inner_Role_1_0_0_Role_Description

    inner_Role_1_0_0_Role_Oem = Resource_Oem
    Role_1_0_0_Role_Oem = restplus.fields.Nested(inner_Role_1_0_0_Role_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")


    Role_1_0_0_Role = namespace.model("Role_1_0_0_Role",
    {
        "AssignedPrivileges": Role_1_0_0_Role_AssignedPrivileges,
        "OemPrivileges": Role_1_0_0_Role_OemPrivileges,
        "Name": Role_1_0_0_Role_Name,
        "IsPredefined": Role_1_0_0_Role_IsPredefined,
        "@odata.id": Role_1_0_0_Role_odata_id,
        "@odata.type": Role_1_0_0_Role_odata_type,
        "Id": Role_1_0_0_Role_Id,
        "@odata.context": Role_1_0_0_Role_odata_context,
        "Description": Role_1_0_0_Role_Description,
        "Oem": Role_1_0_0_Role_Oem,
    })

    #
    # SerialInterfaceCollection_SerialInterfaceCollection
    #

    inner_SerialInterfaceCollection_SerialInterfaceCollection_Members = odata_4_0_0_idRef
    SerialInterfaceCollection_SerialInterfaceCollection_Members = restplus.fields.Nested(inner_SerialInterfaceCollection_SerialInterfaceCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_SerialInterfaceCollection_SerialInterfaceCollection_Oem = Resource_Oem
    SerialInterfaceCollection_SerialInterfaceCollection_Oem = restplus.fields.Nested(inner_SerialInterfaceCollection_SerialInterfaceCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_SerialInterfaceCollection_SerialInterfaceCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    SerialInterfaceCollection_SerialInterfaceCollection_odata_id = inner_SerialInterfaceCollection_SerialInterfaceCollection_odata_id

    inner_SerialInterfaceCollection_SerialInterfaceCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    SerialInterfaceCollection_SerialInterfaceCollection_Membersodata_count = inner_SerialInterfaceCollection_SerialInterfaceCollection_Membersodata_count

    inner_SerialInterfaceCollection_SerialInterfaceCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    SerialInterfaceCollection_SerialInterfaceCollection_Description = inner_SerialInterfaceCollection_SerialInterfaceCollection_Description

    inner_SerialInterfaceCollection_SerialInterfaceCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    SerialInterfaceCollection_SerialInterfaceCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_SerialInterfaceCollection_SerialInterfaceCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_SerialInterfaceCollection_SerialInterfaceCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    SerialInterfaceCollection_SerialInterfaceCollection_Name = inner_SerialInterfaceCollection_SerialInterfaceCollection_Name

    inner_SerialInterfaceCollection_SerialInterfaceCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    SerialInterfaceCollection_SerialInterfaceCollection_odata_type = inner_SerialInterfaceCollection_SerialInterfaceCollection_odata_type

    inner_SerialInterfaceCollection_SerialInterfaceCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    SerialInterfaceCollection_SerialInterfaceCollection_odata_context = inner_SerialInterfaceCollection_SerialInterfaceCollection_odata_context


    SerialInterfaceCollection_SerialInterfaceCollection = namespace.model("SerialInterfaceCollection_SerialInterfaceCollection",
    {
        "Oem": SerialInterfaceCollection_SerialInterfaceCollection_Oem,
        "@odata.id": SerialInterfaceCollection_SerialInterfaceCollection_odata_id,
        "Members@odata.count": SerialInterfaceCollection_SerialInterfaceCollection_Membersodata_count,
        "Members": SerialInterfaceCollection_SerialInterfaceCollection_Members,
        "Description": SerialInterfaceCollection_SerialInterfaceCollection_Description,
        "Members@odata.navigationLink": SerialInterfaceCollection_SerialInterfaceCollection_Membersodata_navigationLink,
        "Name": SerialInterfaceCollection_SerialInterfaceCollection_Name,
        "@odata.type": SerialInterfaceCollection_SerialInterfaceCollection_odata_type,
        "@odata.context": SerialInterfaceCollection_SerialInterfaceCollection_odata_context,
    })

    #
    # SerialInterface_1_0_0_SerialInterface
    #

    SerialInterface_1_0_0_SerialInterface_InterfaceEnabled = restplus.fields.Boolean(
            description="This indicates whether this interface is enabled.")
    inner_SerialInterface_1_0_0_SerialInterface_SignalType = restplus.fields.String(
            enum=SerialInterface_1_0_0_SignalType)
    SerialInterface_1_0_0_SerialInterface_SignalType = inner_SerialInterface_1_0_0_SerialInterface_SignalType

    inner_SerialInterface_1_0_0_SerialInterface_StopBits = restplus.fields.String(
            enum=SerialInterface_1_0_0_StopBits)
    SerialInterface_1_0_0_SerialInterface_StopBits = inner_SerialInterface_1_0_0_SerialInterface_StopBits

    inner_SerialInterface_1_0_0_SerialInterface_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    SerialInterface_1_0_0_SerialInterface_Description = inner_SerialInterface_1_0_0_SerialInterface_Description

    inner_SerialInterface_1_0_0_SerialInterface_BitRate = restplus.fields.String(
            enum=SerialInterface_1_0_0_BitRate)
    SerialInterface_1_0_0_SerialInterface_BitRate = inner_SerialInterface_1_0_0_SerialInterface_BitRate

    inner_SerialInterface_1_0_0_SerialInterface_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    SerialInterface_1_0_0_SerialInterface_Id = inner_SerialInterface_1_0_0_SerialInterface_Id

    inner_SerialInterface_1_0_0_SerialInterface_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    SerialInterface_1_0_0_SerialInterface_odata_id = inner_SerialInterface_1_0_0_SerialInterface_odata_id

    inner_SerialInterface_1_0_0_SerialInterface_FlowControl = restplus.fields.String(
            enum=SerialInterface_1_0_0_FlowControl,
            description="Hardware: Out of band flow control imposed, None: No flow control imposed, Software: XON/XOFF in-band flow control imposed")
    SerialInterface_1_0_0_SerialInterface_FlowControl = inner_SerialInterface_1_0_0_SerialInterface_FlowControl

    inner_SerialInterface_1_0_0_SerialInterface_ConnectorType = restplus.fields.String(
            enum=SerialInterface_1_0_0_ConnectorType)
    SerialInterface_1_0_0_SerialInterface_ConnectorType = inner_SerialInterface_1_0_0_SerialInterface_ConnectorType

    inner_SerialInterface_1_0_0_SerialInterface_Oem = Resource_Oem
    SerialInterface_1_0_0_SerialInterface_Oem = restplus.fields.Nested(inner_SerialInterface_1_0_0_SerialInterface_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_SerialInterface_1_0_0_SerialInterface_DataBits = restplus.fields.String(
            enum=SerialInterface_1_0_0_DataBits)
    SerialInterface_1_0_0_SerialInterface_DataBits = inner_SerialInterface_1_0_0_SerialInterface_DataBits

    inner_SerialInterface_1_0_0_SerialInterface_PinOut = restplus.fields.String(
            enum=SerialInterface_1_0_0_PinOut)
    SerialInterface_1_0_0_SerialInterface_PinOut = inner_SerialInterface_1_0_0_SerialInterface_PinOut

    inner_SerialInterface_1_0_0_SerialInterface_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    SerialInterface_1_0_0_SerialInterface_odata_type = inner_SerialInterface_1_0_0_SerialInterface_odata_type

    inner_SerialInterface_1_0_0_SerialInterface_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    SerialInterface_1_0_0_SerialInterface_Name = inner_SerialInterface_1_0_0_SerialInterface_Name

    inner_SerialInterface_1_0_0_SerialInterface_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    SerialInterface_1_0_0_SerialInterface_odata_context = inner_SerialInterface_1_0_0_SerialInterface_odata_context

    inner_SerialInterface_1_0_0_SerialInterface_Parity = restplus.fields.String(
            enum=SerialInterface_1_0_0_Parity)
    SerialInterface_1_0_0_SerialInterface_Parity = inner_SerialInterface_1_0_0_SerialInterface_Parity


    SerialInterface_1_0_0_SerialInterface = namespace.model("SerialInterface_1_0_0_SerialInterface",
    {
        "SignalType": SerialInterface_1_0_0_SerialInterface_SignalType,
        "StopBits": SerialInterface_1_0_0_SerialInterface_StopBits,
        "Description": SerialInterface_1_0_0_SerialInterface_Description,
        "BitRate": SerialInterface_1_0_0_SerialInterface_BitRate,
        "Id": SerialInterface_1_0_0_SerialInterface_Id,
        "@odata.id": SerialInterface_1_0_0_SerialInterface_odata_id,
        "FlowControl": SerialInterface_1_0_0_SerialInterface_FlowControl,
        "ConnectorType": SerialInterface_1_0_0_SerialInterface_ConnectorType,
        "Oem": SerialInterface_1_0_0_SerialInterface_Oem,
        "DataBits": SerialInterface_1_0_0_SerialInterface_DataBits,
        "PinOut": SerialInterface_1_0_0_SerialInterface_PinOut,
        "@odata.type": SerialInterface_1_0_0_SerialInterface_odata_type,
        "Name": SerialInterface_1_0_0_SerialInterface_Name,
        "InterfaceEnabled": SerialInterface_1_0_0_SerialInterface_InterfaceEnabled,
        "@odata.context": SerialInterface_1_0_0_SerialInterface_odata_context,
        "Parity": SerialInterface_1_0_0_SerialInterface_Parity,
    })

    #
    # SessionCollection_SessionCollection
    #

    inner_SessionCollection_SessionCollection_Members = odata_4_0_0_idRef
    SessionCollection_SessionCollection_Members = restplus.fields.Nested(inner_SessionCollection_SessionCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_SessionCollection_SessionCollection_Oem = Resource_Oem
    SessionCollection_SessionCollection_Oem = restplus.fields.Nested(inner_SessionCollection_SessionCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_SessionCollection_SessionCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    SessionCollection_SessionCollection_odata_id = inner_SessionCollection_SessionCollection_odata_id

    inner_SessionCollection_SessionCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    SessionCollection_SessionCollection_Membersodata_count = inner_SessionCollection_SessionCollection_Membersodata_count

    inner_SessionCollection_SessionCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    SessionCollection_SessionCollection_Description = inner_SessionCollection_SessionCollection_Description

    inner_SessionCollection_SessionCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    SessionCollection_SessionCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_SessionCollection_SessionCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_SessionCollection_SessionCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    SessionCollection_SessionCollection_Name = inner_SessionCollection_SessionCollection_Name

    inner_SessionCollection_SessionCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    SessionCollection_SessionCollection_odata_type = inner_SessionCollection_SessionCollection_odata_type

    inner_SessionCollection_SessionCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    SessionCollection_SessionCollection_odata_context = inner_SessionCollection_SessionCollection_odata_context


    SessionCollection_SessionCollection = namespace.model("SessionCollection_SessionCollection",
    {
        "Oem": SessionCollection_SessionCollection_Oem,
        "@odata.id": SessionCollection_SessionCollection_odata_id,
        "Members@odata.count": SessionCollection_SessionCollection_Membersodata_count,
        "Members": SessionCollection_SessionCollection_Members,
        "Description": SessionCollection_SessionCollection_Description,
        "Members@odata.navigationLink": SessionCollection_SessionCollection_Membersodata_navigationLink,
        "Name": SessionCollection_SessionCollection_Name,
        "@odata.type": SessionCollection_SessionCollection_odata_type,
        "@odata.context": SessionCollection_SessionCollection_odata_context,
    })

    #
    # Session_1_0_0_Session
    #

    Session_1_0_0_Session_Password = restplus.fields.String(
            description="This property is used in a POST to specify a password when creating a new session.  This property is null on a GET.")
    Session_1_0_0_Session_UserName = restplus.fields.String(
            readonly=True)
    inner_Session_1_0_0_Session_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Session_1_0_0_Session_odata_type = inner_Session_1_0_0_Session_odata_type

    inner_Session_1_0_0_Session_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Session_1_0_0_Session_odata_id = inner_Session_1_0_0_Session_odata_id

    inner_Session_1_0_0_Session_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Session_1_0_0_Session_odata_context = inner_Session_1_0_0_Session_odata_context

    inner_Session_1_0_0_Session_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Session_1_0_0_Session_Id = inner_Session_1_0_0_Session_Id

    inner_Session_1_0_0_Session_Oem = Resource_Oem
    Session_1_0_0_Session_Oem = restplus.fields.Nested(inner_Session_1_0_0_Session_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Session_1_0_0_Session_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Session_1_0_0_Session_Description = inner_Session_1_0_0_Session_Description

    inner_Session_1_0_0_Session_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Session_1_0_0_Session_Name = inner_Session_1_0_0_Session_Name


    Session_1_0_0_Session = namespace.model("Session_1_0_0_Session",
    {
        "@odata.type": Session_1_0_0_Session_odata_type,
        "@odata.id": Session_1_0_0_Session_odata_id,
        "@odata.context": Session_1_0_0_Session_odata_context,
        "Id": Session_1_0_0_Session_Id,
        "Oem": Session_1_0_0_Session_Oem,
        "Password": Session_1_0_0_Session_Password,
        "Description": Session_1_0_0_Session_Description,
        "UserName": Session_1_0_0_Session_UserName,
        "Name": Session_1_0_0_Session_Name,
    })

    #
    # SimpleStorageCollection_SimpleStorageCollection
    #

    inner_SimpleStorageCollection_SimpleStorageCollection_Members = odata_4_0_0_idRef
    SimpleStorageCollection_SimpleStorageCollection_Members = restplus.fields.Nested(inner_SimpleStorageCollection_SimpleStorageCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_SimpleStorageCollection_SimpleStorageCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    SimpleStorageCollection_SimpleStorageCollection_odata_id = inner_SimpleStorageCollection_SimpleStorageCollection_odata_id

    inner_SimpleStorageCollection_SimpleStorageCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    SimpleStorageCollection_SimpleStorageCollection_Membersodata_count = inner_SimpleStorageCollection_SimpleStorageCollection_Membersodata_count

    inner_SimpleStorageCollection_SimpleStorageCollection_Oem = Resource_Oem
    SimpleStorageCollection_SimpleStorageCollection_Oem = restplus.fields.Nested(inner_SimpleStorageCollection_SimpleStorageCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_SimpleStorageCollection_SimpleStorageCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    SimpleStorageCollection_SimpleStorageCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_SimpleStorageCollection_SimpleStorageCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_SimpleStorageCollection_SimpleStorageCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    SimpleStorageCollection_SimpleStorageCollection_Name = inner_SimpleStorageCollection_SimpleStorageCollection_Name

    inner_SimpleStorageCollection_SimpleStorageCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    SimpleStorageCollection_SimpleStorageCollection_odata_context = inner_SimpleStorageCollection_SimpleStorageCollection_odata_context

    inner_SimpleStorageCollection_SimpleStorageCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    SimpleStorageCollection_SimpleStorageCollection_odata_type = inner_SimpleStorageCollection_SimpleStorageCollection_odata_type

    inner_SimpleStorageCollection_SimpleStorageCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    SimpleStorageCollection_SimpleStorageCollection_Description = inner_SimpleStorageCollection_SimpleStorageCollection_Description


    SimpleStorageCollection_SimpleStorageCollection = namespace.model("SimpleStorageCollection_SimpleStorageCollection",
    {
        "@odata.id": SimpleStorageCollection_SimpleStorageCollection_odata_id,
        "Members@odata.count": SimpleStorageCollection_SimpleStorageCollection_Membersodata_count,
        "Oem": SimpleStorageCollection_SimpleStorageCollection_Oem,
        "Members": SimpleStorageCollection_SimpleStorageCollection_Members,
        "Members@odata.navigationLink": SimpleStorageCollection_SimpleStorageCollection_Membersodata_navigationLink,
        "Name": SimpleStorageCollection_SimpleStorageCollection_Name,
        "@odata.context": SimpleStorageCollection_SimpleStorageCollection_odata_context,
        "@odata.type": SimpleStorageCollection_SimpleStorageCollection_odata_type,
        "Description": SimpleStorageCollection_SimpleStorageCollection_Description,
    })

    #
    # SimpleStorage_1_0_0_DeviceStatus
    #

    inner_SimpleStorage_1_0_0_DeviceStatus_Oem = SimpleStorage_1_0_0_StatusOem
    SimpleStorage_1_0_0_DeviceStatus_Oem = restplus.fields.Nested(inner_SimpleStorage_1_0_0_DeviceStatus_Oem,
            )

    inner_SimpleStorage_1_0_0_DeviceStatus_HealthRollup = restplus.fields.String(
            enum=Resource_Health,
            description="Critical: A critical condition exists that requires immediate attention, Warning: A condition exists that requires attention, OK: Normal")
    SimpleStorage_1_0_0_DeviceStatus_HealthRollup = inner_SimpleStorage_1_0_0_DeviceStatus_HealthRollup

    inner_SimpleStorage_1_0_0_DeviceStatus_State = restplus.fields.String(
            enum=Resource_State,
            description="Absent: This function or resource is not present or not detected, StandbySpare: This function or resource is part of a redundancy set and is awaiting a failover or other external action to activate it., Enabled: This function or resource has been enabled, StandbyOffline: This function or resource is enabled, but awaiting an external action to activate it, InTest: This function or resource is undergoing testing, Disabled: This function or resource has been disabled, Starting: This function or resource is starting")
    SimpleStorage_1_0_0_DeviceStatus_State = inner_SimpleStorage_1_0_0_DeviceStatus_State

    inner_SimpleStorage_1_0_0_DeviceStatus_Health = restplus.fields.String(
            enum=Resource_Health,
            description="Critical: A critical condition exists that requires immediate attention, Warning: A condition exists that requires attention, OK: Normal")
    SimpleStorage_1_0_0_DeviceStatus_Health = inner_SimpleStorage_1_0_0_DeviceStatus_Health


    SimpleStorage_1_0_0_DeviceStatus = namespace.model("SimpleStorage_1_0_0_DeviceStatus",
    {
        "Oem": SimpleStorage_1_0_0_DeviceStatus_Oem,
        "HealthRollup": SimpleStorage_1_0_0_DeviceStatus_HealthRollup,
        "State": SimpleStorage_1_0_0_DeviceStatus_State,
        "Health": SimpleStorage_1_0_0_DeviceStatus_Health,
    })

    #
    # SimpleStorage_1_0_0_SimpleStorage_Oem
    #

    inner_SimpleStorage_1_0_0_SimpleStorage_Oem_VirtualDisks = SimpleStorage_1_0_0_VirtualDevice
    SimpleStorage_1_0_0_SimpleStorage_Oem_VirtualDisks = restplus.fields.Nested(inner_SimpleStorage_1_0_0_SimpleStorage_Oem_VirtualDisks, as_list=True,
            readonly=True,
            description="The storage devices associated with this resource")


    SimpleStorage_1_0_0_SimpleStorage_Oem = namespace.model("SimpleStorage_1_0_0_SimpleStorage_Oem",
    {
        "VirtualDisks": SimpleStorage_1_0_0_SimpleStorage_Oem_VirtualDisks,
    })

    #
    # SwitchCollection_SwitchCollection
    #

    inner_SwitchCollection_SwitchCollection_Members = odata_4_0_0_idRef
    SwitchCollection_SwitchCollection_Members = restplus.fields.Nested(inner_SwitchCollection_SwitchCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_SwitchCollection_SwitchCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    SwitchCollection_SwitchCollection_Name = inner_SwitchCollection_SwitchCollection_Name

    inner_SwitchCollection_SwitchCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    SwitchCollection_SwitchCollection_odata_context = inner_SwitchCollection_SwitchCollection_odata_context

    inner_SwitchCollection_SwitchCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    SwitchCollection_SwitchCollection_odata_type = inner_SwitchCollection_SwitchCollection_odata_type

    inner_SwitchCollection_SwitchCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    SwitchCollection_SwitchCollection_odata_id = inner_SwitchCollection_SwitchCollection_odata_id

    inner_SwitchCollection_SwitchCollection_Oem = Resource_Oem
    SwitchCollection_SwitchCollection_Oem = restplus.fields.Nested(inner_SwitchCollection_SwitchCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_SwitchCollection_SwitchCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    SwitchCollection_SwitchCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_SwitchCollection_SwitchCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_SwitchCollection_SwitchCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    SwitchCollection_SwitchCollection_Description = inner_SwitchCollection_SwitchCollection_Description

    inner_SwitchCollection_SwitchCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    SwitchCollection_SwitchCollection_Membersodata_count = inner_SwitchCollection_SwitchCollection_Membersodata_count


    SwitchCollection_SwitchCollection = namespace.model("SwitchCollection_SwitchCollection",
    {
        "Name": SwitchCollection_SwitchCollection_Name,
        "@odata.context": SwitchCollection_SwitchCollection_odata_context,
        "@odata.type": SwitchCollection_SwitchCollection_odata_type,
        "@odata.id": SwitchCollection_SwitchCollection_odata_id,
        "Members": SwitchCollection_SwitchCollection_Members,
        "Oem": SwitchCollection_SwitchCollection_Oem,
        "Members@odata.navigationLink": SwitchCollection_SwitchCollection_Membersodata_navigationLink,
        "Description": SwitchCollection_SwitchCollection_Description,
        "Members@odata.count": SwitchCollection_SwitchCollection_Membersodata_count,
    })

    #
    # Switch_1_0_0_Ports
    #

    Switch_1_0_0_Ports_Mtu = restplus.fields.String(
            description="This is the MTU size for the port.")
    Switch_1_0_0_Ports_Speed = restplus.fields.String(
            readonly=True,
            description="This is the speed of the port")
    Switch_1_0_0_Ports_OutputUtilization = restplus.fields.String(
            readonly=True,
            description="This is the output utilization of this port")
    Switch_1_0_0_Ports_PortName = restplus.fields.String(
            readonly=True,
            description="Name of the port")
    Switch_1_0_0_Ports_State = restplus.fields.String(
            readonly=True,
            description="Describes current state of the port.")
    Switch_1_0_0_Ports_InputUtilization = restplus.fields.String(
            readonly=True,
            description="This is the input utilization of this port")
    inner_Switch_1_0_0_Ports_Oem = Resource_Oem
    Switch_1_0_0_Ports_Oem = restplus.fields.Nested(inner_Switch_1_0_0_Ports_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")


    Switch_1_0_0_Ports = namespace.model("Switch_1_0_0_Ports",
    {
        "Mtu": Switch_1_0_0_Ports_Mtu,
        "Oem": Switch_1_0_0_Ports_Oem,
        "Speed": Switch_1_0_0_Ports_Speed,
        "OutputUtilization": Switch_1_0_0_Ports_OutputUtilization,
        "PortName": Switch_1_0_0_Ports_PortName,
        "State": Switch_1_0_0_Ports_State,
        "InputUtilization": Switch_1_0_0_Ports_InputUtilization,
    })

    #
    # VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection
    #

    inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Members = odata_4_0_0_idRef
    VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Members = restplus.fields.Nested(inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_odata_type = inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_odata_type

    inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Name = inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Name

    inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_odata_id = inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_odata_id

    inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_odata_context = inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_odata_context

    inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Membersodata_count = inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Membersodata_count

    inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Description = inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Description

    inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Oem = Resource_Oem
    VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Oem = restplus.fields.Nested(inner_VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")


    VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection = namespace.model("VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection",
    {
        "@odata.type": VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_odata_type,
        "Name": VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Name,
        "Members@odata.navigationLink": VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Membersodata_navigationLink,
        "@odata.id": VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_odata_id,
        "@odata.context": VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_odata_context,
        "Members@odata.count": VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Membersodata_count,
        "Description": VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Description,
        "Members": VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Members,
        "Oem": VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection_Oem,
    })

    #
    # VLanNetworkInterface_1_0_0_VLanNetworkInterface
    #

    VLanNetworkInterface_1_0_0_VLanNetworkInterface_VLANEnable = restplus.fields.Boolean(
            description="This indicates if this VLAN is enabled.")
    inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    VLanNetworkInterface_1_0_0_VLanNetworkInterface_odata_context = inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_odata_context

    inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    VLanNetworkInterface_1_0_0_VLanNetworkInterface_Name = inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_Name

    inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_Oem = Resource_Oem
    VLanNetworkInterface_1_0_0_VLanNetworkInterface_Oem = restplus.fields.Nested(inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    VLanNetworkInterface_1_0_0_VLanNetworkInterface_odata_id = inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_odata_id

    inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    VLanNetworkInterface_1_0_0_VLanNetworkInterface_odata_type = inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_odata_type

    inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    VLanNetworkInterface_1_0_0_VLanNetworkInterface_Description = inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_Description

    inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    VLanNetworkInterface_1_0_0_VLanNetworkInterface_Id = inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_Id

    inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_VLANId = restplus.fields.Float(
            )
    VLanNetworkInterface_1_0_0_VLanNetworkInterface_VLANId = inner_VLanNetworkInterface_1_0_0_VLanNetworkInterface_VLANId


    VLanNetworkInterface_1_0_0_VLanNetworkInterface = namespace.model("VLanNetworkInterface_1_0_0_VLanNetworkInterface",
    {
        "@odata.context": VLanNetworkInterface_1_0_0_VLanNetworkInterface_odata_context,
        "Name": VLanNetworkInterface_1_0_0_VLanNetworkInterface_Name,
        "Oem": VLanNetworkInterface_1_0_0_VLanNetworkInterface_Oem,
        "@odata.id": VLanNetworkInterface_1_0_0_VLanNetworkInterface_odata_id,
        "@odata.type": VLanNetworkInterface_1_0_0_VLanNetworkInterface_odata_type,
        "Description": VLanNetworkInterface_1_0_0_VLanNetworkInterface_Description,
        "Id": VLanNetworkInterface_1_0_0_VLanNetworkInterface_Id,
        "VLANId": VLanNetworkInterface_1_0_0_VLanNetworkInterface_VLANId,
        "VLANEnable": VLanNetworkInterface_1_0_0_VLanNetworkInterface_VLANEnable,
    })

    #
    # VirtualMediaCollection_VirtualMediaCollection
    #

    inner_VirtualMediaCollection_VirtualMediaCollection_Members = odata_4_0_0_idRef
    VirtualMediaCollection_VirtualMediaCollection_Members = restplus.fields.Nested(inner_VirtualMediaCollection_VirtualMediaCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_VirtualMediaCollection_VirtualMediaCollection_Oem = Resource_Oem
    VirtualMediaCollection_VirtualMediaCollection_Oem = restplus.fields.Nested(inner_VirtualMediaCollection_VirtualMediaCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_VirtualMediaCollection_VirtualMediaCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    VirtualMediaCollection_VirtualMediaCollection_Name = inner_VirtualMediaCollection_VirtualMediaCollection_Name

    inner_VirtualMediaCollection_VirtualMediaCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    VirtualMediaCollection_VirtualMediaCollection_Description = inner_VirtualMediaCollection_VirtualMediaCollection_Description

    inner_VirtualMediaCollection_VirtualMediaCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    VirtualMediaCollection_VirtualMediaCollection_Membersodata_count = inner_VirtualMediaCollection_VirtualMediaCollection_Membersodata_count

    inner_VirtualMediaCollection_VirtualMediaCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    VirtualMediaCollection_VirtualMediaCollection_odata_type = inner_VirtualMediaCollection_VirtualMediaCollection_odata_type

    inner_VirtualMediaCollection_VirtualMediaCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    VirtualMediaCollection_VirtualMediaCollection_odata_id = inner_VirtualMediaCollection_VirtualMediaCollection_odata_id

    inner_VirtualMediaCollection_VirtualMediaCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    VirtualMediaCollection_VirtualMediaCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_VirtualMediaCollection_VirtualMediaCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_VirtualMediaCollection_VirtualMediaCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    VirtualMediaCollection_VirtualMediaCollection_odata_context = inner_VirtualMediaCollection_VirtualMediaCollection_odata_context


    VirtualMediaCollection_VirtualMediaCollection = namespace.model("VirtualMediaCollection_VirtualMediaCollection",
    {
        "Oem": VirtualMediaCollection_VirtualMediaCollection_Oem,
        "Name": VirtualMediaCollection_VirtualMediaCollection_Name,
        "Members": VirtualMediaCollection_VirtualMediaCollection_Members,
        "Description": VirtualMediaCollection_VirtualMediaCollection_Description,
        "Members@odata.count": VirtualMediaCollection_VirtualMediaCollection_Membersodata_count,
        "@odata.type": VirtualMediaCollection_VirtualMediaCollection_odata_type,
        "@odata.id": VirtualMediaCollection_VirtualMediaCollection_odata_id,
        "Members@odata.navigationLink": VirtualMediaCollection_VirtualMediaCollection_Membersodata_navigationLink,
        "@odata.context": VirtualMediaCollection_VirtualMediaCollection_odata_context,
    })

    #
    # VirtualMedia_1_0_0_VirtualMedia
    #

    VirtualMedia_1_0_0_VirtualMedia_WriteProtected = restplus.fields.Boolean(
            readonly=True,
            description="Indicates the media is write protected.")
    VirtualMedia_1_0_0_VirtualMedia_Image = restplus.fields.String(
            readonly=True,
            description="A URI providing the location of the selected image")
    VirtualMedia_1_0_0_VirtualMedia_Inserted = restplus.fields.Boolean(
            readonly=True,
            description="Indicates if virtual media is inserted in the virtual device.")
    VirtualMedia_1_0_0_VirtualMedia_ImageName = restplus.fields.String(
            readonly=True,
            description="The current image name")
    inner_VirtualMedia_1_0_0_VirtualMedia_MediaTypes = restplus.fields.String(
            enum=VirtualMedia_1_0_0_MediaType,
            readonly=True,
            description="This is the media types supported as virtual media.")
    VirtualMedia_1_0_0_VirtualMedia_MediaTypes = restplus.fields.List(inner_VirtualMedia_1_0_0_VirtualMedia_MediaTypes,
            readonly=True,
            description="This is the media types supported as virtual media.")

    inner_VirtualMedia_1_0_0_VirtualMedia_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    VirtualMedia_1_0_0_VirtualMedia_Id = inner_VirtualMedia_1_0_0_VirtualMedia_Id

    inner_VirtualMedia_1_0_0_VirtualMedia_Oem = Resource_Oem
    VirtualMedia_1_0_0_VirtualMedia_Oem = restplus.fields.Nested(inner_VirtualMedia_1_0_0_VirtualMedia_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_VirtualMedia_1_0_0_VirtualMedia_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    VirtualMedia_1_0_0_VirtualMedia_odata_type = inner_VirtualMedia_1_0_0_VirtualMedia_odata_type

    inner_VirtualMedia_1_0_0_VirtualMedia_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    VirtualMedia_1_0_0_VirtualMedia_odata_id = inner_VirtualMedia_1_0_0_VirtualMedia_odata_id

    inner_VirtualMedia_1_0_0_VirtualMedia_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    VirtualMedia_1_0_0_VirtualMedia_odata_context = inner_VirtualMedia_1_0_0_VirtualMedia_odata_context

    inner_VirtualMedia_1_0_0_VirtualMedia_ConnectedVia = restplus.fields.String(
            enum=VirtualMedia_1_0_0_ConnectedVia,
            description="NotConnected: No current connection, Applet: Connected to a client application, URI: Connected to a URI location, Oem: Connected via an OEM-defined method")
    VirtualMedia_1_0_0_VirtualMedia_ConnectedVia = inner_VirtualMedia_1_0_0_VirtualMedia_ConnectedVia

    inner_VirtualMedia_1_0_0_VirtualMedia_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    VirtualMedia_1_0_0_VirtualMedia_Name = inner_VirtualMedia_1_0_0_VirtualMedia_Name

    inner_VirtualMedia_1_0_0_VirtualMedia_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    VirtualMedia_1_0_0_VirtualMedia_Description = inner_VirtualMedia_1_0_0_VirtualMedia_Description


    VirtualMedia_1_0_0_VirtualMedia = namespace.model("VirtualMedia_1_0_0_VirtualMedia",
    {
        "Id": VirtualMedia_1_0_0_VirtualMedia_Id,
        "Oem": VirtualMedia_1_0_0_VirtualMedia_Oem,
        "@odata.type": VirtualMedia_1_0_0_VirtualMedia_odata_type,
        "@odata.id": VirtualMedia_1_0_0_VirtualMedia_odata_id,
        "WriteProtected": VirtualMedia_1_0_0_VirtualMedia_WriteProtected,
        "@odata.context": VirtualMedia_1_0_0_VirtualMedia_odata_context,
        "ConnectedVia": VirtualMedia_1_0_0_VirtualMedia_ConnectedVia,
        "Name": VirtualMedia_1_0_0_VirtualMedia_Name,
        "Image": VirtualMedia_1_0_0_VirtualMedia_Image,
        "Inserted": VirtualMedia_1_0_0_VirtualMedia_Inserted,
        "Description": VirtualMedia_1_0_0_VirtualMedia_Description,
        "ImageName": VirtualMedia_1_0_0_VirtualMedia_ImageName,
        "MediaTypes": VirtualMedia_1_0_0_VirtualMedia_MediaTypes,
    })

    #
    # AccountService_1_0_0_AccountService
    #

    AccountService_1_0_0_AccountService_AuthFailureLoggingThreshold = restplus.fields.Float(
            readonly=False,
            description="This is the number of authorization failures that need to occur before the failure attempt is logged to the manager log.")
    AccountService_1_0_0_AccountService_MinPasswordLength = restplus.fields.Float(
            readonly=True,
            description="This is the minimum password length for this service.")
    AccountService_1_0_0_AccountService_MaxPasswordLength = restplus.fields.Float(
            readonly=True,
            description="This is the maximum password length for this service.")
    AccountService_1_0_0_AccountService_AccountLockoutCounterResetAfter = restplus.fields.Float(
            readonly=False,
            description="The interval of time since the last failed login attempt at which point the lockout threshold counter for the account is reset to zero. Must be less than or equal to AccountLockoutDuration")
    AccountService_1_0_0_AccountService_AccountLockoutThreshold = restplus.fields.Float(
            readonly=False,
            description="The number of failed login attempts before a user account is locked for a specified duration. (0=never locked)")
    AccountService_1_0_0_AccountService_AccountLockoutDuration = restplus.fields.Float(
            readonly=False,
            description="The time an account is locked after the account lockout threshold is met. Must be >= AccountLockoutResetAfter. If set to 0, no lockout will occur.")
    AccountService_1_0_0_AccountService_ServiceEnabled = restplus.fields.Boolean(
            description="This indicates whether this service is enabled.")
    inner_AccountService_1_0_0_AccountService_Roles = RoleCollection_RoleCollection
    AccountService_1_0_0_AccountService_Roles = restplus.fields.Nested(inner_AccountService_1_0_0_AccountService_Roles,
            readonly=True,
            description="Link to a collection of Roles")

    inner_AccountService_1_0_0_AccountService_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    AccountService_1_0_0_AccountService_Id = inner_AccountService_1_0_0_AccountService_Id

    inner_AccountService_1_0_0_AccountService_Oem = Resource_Oem
    AccountService_1_0_0_AccountService_Oem = restplus.fields.Nested(inner_AccountService_1_0_0_AccountService_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_AccountService_1_0_0_AccountService_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    AccountService_1_0_0_AccountService_odata_id = inner_AccountService_1_0_0_AccountService_odata_id

    inner_AccountService_1_0_0_AccountService_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    AccountService_1_0_0_AccountService_odata_type = inner_AccountService_1_0_0_AccountService_odata_type

    inner_AccountService_1_0_0_AccountService_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    AccountService_1_0_0_AccountService_Name = inner_AccountService_1_0_0_AccountService_Name

    inner_AccountService_1_0_0_AccountService_Status = Resource_Status
    AccountService_1_0_0_AccountService_Status = restplus.fields.Nested(inner_AccountService_1_0_0_AccountService_Status,
            )

    inner_AccountService_1_0_0_AccountService_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    AccountService_1_0_0_AccountService_odata_context = inner_AccountService_1_0_0_AccountService_odata_context

    inner_AccountService_1_0_0_AccountService_Accounts = ManagerAccountCollection_ManagerAccountCollection
    AccountService_1_0_0_AccountService_Accounts = restplus.fields.Nested(inner_AccountService_1_0_0_AccountService_Accounts,
            readonly=True,
            description="Link to a collection of Manager Accounts")

    inner_AccountService_1_0_0_AccountService_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    AccountService_1_0_0_AccountService_Description = inner_AccountService_1_0_0_AccountService_Description


    AccountService_1_0_0_AccountService = namespace.model("AccountService_1_0_0_AccountService",
    {
        "Roles": AccountService_1_0_0_AccountService_Roles,
        "Id": AccountService_1_0_0_AccountService_Id,
        "Oem": AccountService_1_0_0_AccountService_Oem,
        "AuthFailureLoggingThreshold": AccountService_1_0_0_AccountService_AuthFailureLoggingThreshold,
        "MinPasswordLength": AccountService_1_0_0_AccountService_MinPasswordLength,
        "MaxPasswordLength": AccountService_1_0_0_AccountService_MaxPasswordLength,
        "@odata.id": AccountService_1_0_0_AccountService_odata_id,
        "AccountLockoutCounterResetAfter": AccountService_1_0_0_AccountService_AccountLockoutCounterResetAfter,
        "@odata.type": AccountService_1_0_0_AccountService_odata_type,
        "AccountLockoutThreshold": AccountService_1_0_0_AccountService_AccountLockoutThreshold,
        "Name": AccountService_1_0_0_AccountService_Name,
        "Status": AccountService_1_0_0_AccountService_Status,
        "@odata.context": AccountService_1_0_0_AccountService_odata_context,
        "AccountLockoutDuration": AccountService_1_0_0_AccountService_AccountLockoutDuration,
        "Accounts": AccountService_1_0_0_AccountService_Accounts,
        "Description": AccountService_1_0_0_AccountService_Description,
        "ServiceEnabled": AccountService_1_0_0_AccountService_ServiceEnabled,
    })

    #
    # Chassis_1_0_0_Chassis
    #

    Chassis_1_0_0_Chassis_SKU = restplus.fields.String(
            readonly=True,
            description="This is the SKU for this chassis.")
    Chassis_1_0_0_Chassis_AssetTag = restplus.fields.String(
            description="The user assigned asset tag for this chassis.")
    Chassis_1_0_0_Chassis_PartNumber = restplus.fields.String(
            readonly=True,
            description="The part number for this chassis.")
    Chassis_1_0_0_Chassis_Manufacturer = restplus.fields.String(
            readonly=True,
            description="This is the manufacturer of this chassis.")
    Chassis_1_0_0_Chassis_Model = restplus.fields.String(
            readonly=True,
            description="This is the model number for the chassis.")
    Chassis_1_0_0_Chassis_SerialNumber = restplus.fields.String(
            readonly=True,
            description="The serial number for this chassis.")
    Chassis_1_0_0_Chassis_Oem = restplus.fields.Nested(Chassis_1_0_0_Chassis_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")
    Chassis_1_0_0_Chassis_Links = restplus.fields.Nested(Chassis_1_0_0_Chassis_Links,
            readonly=True,
            description="The links object contains the links to other resources that are related to this resource.")
    Chassis_1_0_0_Chassis_Actions = restplus.fields.Nested(Chassis_1_0_0_Chassis_Actions,
            readonly=True,
            description="The Actions object contains the available custom actions on this resource.")
    inner_Chassis_1_0_0_Chassis_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Chassis_1_0_0_Chassis_odata_context = inner_Chassis_1_0_0_Chassis_odata_context

    inner_Chassis_1_0_0_Chassis_Thermal = odata_4_0_0_idRef
    Chassis_1_0_0_Chassis_Thermal = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Thermal,
            readonly=True,
            description="A reference to the thermal properties (fans, cooling, sensors) for this chassis.")

    inner_Chassis_1_0_0_Chassis_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Chassis_1_0_0_Chassis_Name = inner_Chassis_1_0_0_Chassis_Name

    inner_Chassis_1_0_0_Chassis_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Chassis_1_0_0_Chassis_odata_type = inner_Chassis_1_0_0_Chassis_odata_type

    inner_Chassis_1_0_0_Chassis_Status = Resource_Status
    Chassis_1_0_0_Chassis_Status = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Status,
            )

    inner_Chassis_1_0_0_Chassis_IndicatorLED = restplus.fields.String(
            enum=ComputerSystem_1_0_0_IndicatorLED,
            description="Lit: The Indicator LED is lit., Unknown: The state of the Indicator LED cannot be determined., Off: The Indicator LED is off., Blinking: The Indicator LED is blinking.")
    Chassis_1_0_0_Chassis_IndicatorLED = inner_Chassis_1_0_0_Chassis_IndicatorLED

    inner_Chassis_1_0_0_Chassis_LogServices = LogServiceCollection_LogServiceCollection
    Chassis_1_0_0_Chassis_LogServices = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_LogServices,
            readonly=True,
            description="A reference to the logs for this chassis.")

    inner_Chassis_1_0_0_Chassis_ChassisType = restplus.fields.String(
            enum=Chassis_1_0_0_ChassisType,
            description="RackMount: A single system chassis designed specifically for mounting in an equipment rack, Cartridge: A small self-contained system intended to be plugged into a multi-system chassis, StandAlone: A single, free-standing system, commonly called a tower or desktop chassis, Shelf: An enclosed or semi-enclosed, typically horizontally-oriented, system chassis which must be plugged into a multi-system chassis to function normally, Blade: An enclosed or semi-enclosed, typically vertically-oriented, system chassis which must be plugged into a multi-system chassis to function normally, Component: A small chassis, card, or device which contains devices for a particular subsystem or function, Expansion: A chassis which expands the capabilities or capacity of another chassis, Enclosure: A generic term for a chassis that does not fit any other description, Zone: A logical division or portion of a physical chassis that contains multiple devices or systems that cannot be physically separated, Sled: An enclosed or semi-enclosed, system chassis which must be plugged into a multi-system chassis to function normally similar to a blade type chassis., Drawer: An enclosed or semi-enclosed, typically horizontally-oriented, system chassis which may be slid into a multi-system chassis., Sidecar: A chassis that mates mechanically with another chassis to expand its capabilities or capacity, Module: A small, typically removable, chassis or card which contains devices for a particular subsystem or function, Pod: A collection of equipment racks in a large, likely transportable, container, Other: A chassis that does not fit any of these definitions, Rack: An equipment rack, typically a 19-inch wide freestanding unit, Card: A loose device or circuit board intended to be installed in a system or other enclosure, Row: A collection of equipment racks")
    Chassis_1_0_0_Chassis_ChassisType = inner_Chassis_1_0_0_Chassis_ChassisType

    inner_Chassis_1_0_0_Chassis_Power = odata_4_0_0_idRef
    Chassis_1_0_0_Chassis_Power = restplus.fields.Nested(inner_Chassis_1_0_0_Chassis_Power,
            readonly=True,
            description="A reference to the power properties (power supplies, power policies, sensors) for this chassis.")

    inner_Chassis_1_0_0_Chassis_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Chassis_1_0_0_Chassis_Description = inner_Chassis_1_0_0_Chassis_Description

    inner_Chassis_1_0_0_Chassis_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Chassis_1_0_0_Chassis_Id = inner_Chassis_1_0_0_Chassis_Id

    inner_Chassis_1_0_0_Chassis_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Chassis_1_0_0_Chassis_odata_id = inner_Chassis_1_0_0_Chassis_odata_id


    Chassis_1_0_0_Chassis = namespace.model("Chassis_1_0_0_Chassis",
    {
        "@odata.context": Chassis_1_0_0_Chassis_odata_context,
        "Thermal": Chassis_1_0_0_Chassis_Thermal,
        "SKU": Chassis_1_0_0_Chassis_SKU,
        "Name": Chassis_1_0_0_Chassis_Name,
        "Oem": Chassis_1_0_0_Chassis_Oem,
        "AssetTag": Chassis_1_0_0_Chassis_AssetTag,
        "PartNumber": Chassis_1_0_0_Chassis_PartNumber,
        "Manufacturer": Chassis_1_0_0_Chassis_Manufacturer,
        "@odata.type": Chassis_1_0_0_Chassis_odata_type,
        "Model": Chassis_1_0_0_Chassis_Model,
        "Status": Chassis_1_0_0_Chassis_Status,
        "Links": Chassis_1_0_0_Chassis_Links,
        "IndicatorLED": Chassis_1_0_0_Chassis_IndicatorLED,
        "LogServices": Chassis_1_0_0_Chassis_LogServices,
        "ChassisType": Chassis_1_0_0_Chassis_ChassisType,
        "Power": Chassis_1_0_0_Chassis_Power,
        "Description": Chassis_1_0_0_Chassis_Description,
        "Id": Chassis_1_0_0_Chassis_Id,
        "Actions": Chassis_1_0_0_Chassis_Actions,
        "SerialNumber": Chassis_1_0_0_Chassis_SerialNumber,
        "@odata.id": Chassis_1_0_0_Chassis_odata_id,
    })

    #
    # ComputerSystem_1_0_0_ComputerSystem_Actions
    #

    ComputerSystem_1_0_0_ComputerSystem_Actions_Oem = restplus.fields.Nested(ComputerSystem_1_0_0_ComputerSystem_Actions_Oem,
            )
    inner_ComputerSystem_1_0_0_ComputerSystem_Actions_ComputerSystem_Reset = ComputerSystem_1_0_0_Reset
    ComputerSystem_1_0_0_ComputerSystem_Actions_ComputerSystem_Reset = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_Actions_ComputerSystem_Reset,
            attribute="#ComputerSystem_Reset")


    ComputerSystem_1_0_0_ComputerSystem_Actions = namespace.model("ComputerSystem_1_0_0_ComputerSystem_Actions",
    {
        "Oem": ComputerSystem_1_0_0_ComputerSystem_Actions_Oem,
        "#ComputerSystem.Reset": ComputerSystem_1_0_0_ComputerSystem_Actions_ComputerSystem_Reset,
    })

    #
    # ComputerSystem_1_0_0_MemorySummary
    #

    ComputerSystem_1_0_0_MemorySummary_TotalSystemMemoryGiB = restplus.fields.Float(
            readonly=True,
            description="The total installed, operating system-accessible memory (RAM), measured in GiB.")
    inner_ComputerSystem_1_0_0_MemorySummary_Status = Resource_Status
    ComputerSystem_1_0_0_MemorySummary_Status = restplus.fields.Nested(inner_ComputerSystem_1_0_0_MemorySummary_Status,
            )


    ComputerSystem_1_0_0_MemorySummary = namespace.model("ComputerSystem_1_0_0_MemorySummary",
    {
        "TotalSystemMemoryGiB": ComputerSystem_1_0_0_MemorySummary_TotalSystemMemoryGiB,
        "Status": ComputerSystem_1_0_0_MemorySummary_Status,
    })

    #
    # ComputerSystem_1_0_0_ProcessorSummary
    #

    ComputerSystem_1_0_0_ProcessorSummary_Model = restplus.fields.String(
            readonly=True,
            description="The processor model for the primary or majority of processors in this system.")
    ComputerSystem_1_0_0_ProcessorSummary_Count = restplus.fields.Float(
            readonly=True,
            description="The number of processors in the system.")
    inner_ComputerSystem_1_0_0_ProcessorSummary_Status = Resource_Status
    ComputerSystem_1_0_0_ProcessorSummary_Status = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ProcessorSummary_Status,
            )


    ComputerSystem_1_0_0_ProcessorSummary = namespace.model("ComputerSystem_1_0_0_ProcessorSummary",
    {
        "Status": ComputerSystem_1_0_0_ProcessorSummary_Status,
        "Model": ComputerSystem_1_0_0_ProcessorSummary_Model,
        "Count": ComputerSystem_1_0_0_ProcessorSummary_Count,
    })

    #
    # EthernetInterface_1_0_0_EthernetInterface
    #

    EthernetInterface_1_0_0_EthernetInterface_MaxIPv6StaticAddresses = restplus.fields.Float(
            readonly=True,
            description="This indicates the maximum number of Static IPv6 addresses that can be configured on this interface.")
    EthernetInterface_1_0_0_EthernetInterface_InterfaceEnabled = restplus.fields.Boolean(
            description="This indicates whether this interface is enabled.")
    EthernetInterface_1_0_0_EthernetInterface_AutoNeg = restplus.fields.Boolean(
            description="This indicates if the speed and duplex are automatically negotiated and configured on this interface.")
    EthernetInterface_1_0_0_EthernetInterface_UefiDevicePath = restplus.fields.String(
            readonly=True,
            description="The UEFI device path for this interface")
    EthernetInterface_1_0_0_EthernetInterface_FullDuplex = restplus.fields.Boolean(
            description="This indicates if the interface is in Full Duplex mode or not.")
    EthernetInterface_1_0_0_EthernetInterface_MTUSize = restplus.fields.Float(
            description="This is the currently configured Maximum Transmission Unit (MTU) in bytes on this interface.")
    EthernetInterface_1_0_0_EthernetInterface_SpeedMbps = restplus.fields.Float(
            description="This is the current speed in Mbps of this interface.")
    EthernetInterface_1_0_0_EthernetInterface_FQDN = restplus.fields.String(
            description="This is the complete, fully qualified domain name obtained by DNS for this interface.")
    EthernetInterface_1_0_0_EthernetInterface_IPv6DefaultGateway = restplus.fields.String(
            readonly=True,
            description="This is the IPv6 default gateway address that is currently in use on this interface.")
    EthernetInterface_1_0_0_EthernetInterface_HostName = restplus.fields.String(
            description="The DNS Host Name, without any domain information")
    inner_EthernetInterface_1_0_0_EthernetInterface_NameServers = restplus.fields.String(
            readonly=True,
            description="This represents DNS name servers that are currently in use on this interface.")
    EthernetInterface_1_0_0_EthernetInterface_NameServers = restplus.fields.List(inner_EthernetInterface_1_0_0_EthernetInterface_NameServers,
            readonly=True,
            description="This represents DNS name servers that are currently in use on this interface.")

    inner_EthernetInterface_1_0_0_EthernetInterface_IPv6AddressPolicyTable = EthernetInterface_1_0_0_IPv6AddressPolicyEntry
    EthernetInterface_1_0_0_EthernetInterface_IPv6AddressPolicyTable = restplus.fields.Nested(inner_EthernetInterface_1_0_0_EthernetInterface_IPv6AddressPolicyTable, as_list=True,
            description="An array representing the RFC3484 Address Selection Policy Table.")

    inner_EthernetInterface_1_0_0_EthernetInterface_IPv6Addresses = IPAddresses_1_0_0_IPv6Address
    EthernetInterface_1_0_0_EthernetInterface_IPv6Addresses = restplus.fields.Nested(inner_EthernetInterface_1_0_0_EthernetInterface_IPv6Addresses, as_list=True,
            readonly=True,
            description="This array of objects enumerates all of the currently assigned IPv6 addresses on this interface.")

    inner_EthernetInterface_1_0_0_EthernetInterface_IPv4Addresses = IPAddresses_1_0_0_IPv4Address
    EthernetInterface_1_0_0_EthernetInterface_IPv4Addresses = restplus.fields.Nested(inner_EthernetInterface_1_0_0_EthernetInterface_IPv4Addresses, as_list=True,
            readonly=True,
            description="The IPv4 addresses assigned to this interface")

    inner_EthernetInterface_1_0_0_EthernetInterface_IPv6StaticAddresses = IPAddresses_1_0_0_IPv6StaticAddress
    EthernetInterface_1_0_0_EthernetInterface_IPv6StaticAddresses = restplus.fields.Nested(inner_EthernetInterface_1_0_0_EthernetInterface_IPv6StaticAddresses, as_list=True,
            readonly=True,
            description="This array of objects represents all of the IPv6 static addresses to be assigned on this interface.")

    inner_EthernetInterface_1_0_0_EthernetInterface_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    EthernetInterface_1_0_0_EthernetInterface_odata_context = inner_EthernetInterface_1_0_0_EthernetInterface_odata_context

    inner_EthernetInterface_1_0_0_EthernetInterface_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    EthernetInterface_1_0_0_EthernetInterface_Name = inner_EthernetInterface_1_0_0_EthernetInterface_Name

    inner_EthernetInterface_1_0_0_EthernetInterface_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    EthernetInterface_1_0_0_EthernetInterface_Id = inner_EthernetInterface_1_0_0_EthernetInterface_Id

    inner_EthernetInterface_1_0_0_EthernetInterface_Status = Resource_Status
    EthernetInterface_1_0_0_EthernetInterface_Status = restplus.fields.Nested(inner_EthernetInterface_1_0_0_EthernetInterface_Status,
            )

    inner_EthernetInterface_1_0_0_EthernetInterface_MACAddress = restplus.fields.String(
            )
    EthernetInterface_1_0_0_EthernetInterface_MACAddress = inner_EthernetInterface_1_0_0_EthernetInterface_MACAddress

    inner_EthernetInterface_1_0_0_EthernetInterface_VLAN = VLanNetworkInterface_1_0_0_VLAN
    EthernetInterface_1_0_0_EthernetInterface_VLAN = restplus.fields.Nested(inner_EthernetInterface_1_0_0_EthernetInterface_VLAN,
            description="If this Network Interface supports more than one VLAN, this property will not be present and the client should look for VLANs collection in the link section of this resource.")

    inner_EthernetInterface_1_0_0_EthernetInterface_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    EthernetInterface_1_0_0_EthernetInterface_Description = inner_EthernetInterface_1_0_0_EthernetInterface_Description

    inner_EthernetInterface_1_0_0_EthernetInterface_PermanentMACAddress = restplus.fields.String(
            )
    EthernetInterface_1_0_0_EthernetInterface_PermanentMACAddress = inner_EthernetInterface_1_0_0_EthernetInterface_PermanentMACAddress

    inner_EthernetInterface_1_0_0_EthernetInterface_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    EthernetInterface_1_0_0_EthernetInterface_odata_type = inner_EthernetInterface_1_0_0_EthernetInterface_odata_type

    inner_EthernetInterface_1_0_0_EthernetInterface_Oem = Resource_Oem
    EthernetInterface_1_0_0_EthernetInterface_Oem = restplus.fields.Nested(inner_EthernetInterface_1_0_0_EthernetInterface_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_EthernetInterface_1_0_0_EthernetInterface_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    EthernetInterface_1_0_0_EthernetInterface_odata_id = inner_EthernetInterface_1_0_0_EthernetInterface_odata_id

    inner_EthernetInterface_1_0_0_EthernetInterface_VLANs = VLanNetworkInterfaceCollection_VLanNetworkInterfaceCollection
    EthernetInterface_1_0_0_EthernetInterface_VLANs = restplus.fields.Nested(inner_EthernetInterface_1_0_0_EthernetInterface_VLANs,
            readonly=True,
            description="This is a reference to a collection of VLANs and is only used if the interface supports more than one VLANs.")


    EthernetInterface_1_0_0_EthernetInterface = namespace.model("EthernetInterface_1_0_0_EthernetInterface",
    {
        "MaxIPv6StaticAddresses": EthernetInterface_1_0_0_EthernetInterface_MaxIPv6StaticAddresses,
        "InterfaceEnabled": EthernetInterface_1_0_0_EthernetInterface_InterfaceEnabled,
        "@odata.context": EthernetInterface_1_0_0_EthernetInterface_odata_context,
        "NameServers": EthernetInterface_1_0_0_EthernetInterface_NameServers,
        "AutoNeg": EthernetInterface_1_0_0_EthernetInterface_AutoNeg,
        "UefiDevicePath": EthernetInterface_1_0_0_EthernetInterface_UefiDevicePath,
        "Name": EthernetInterface_1_0_0_EthernetInterface_Name,
        "Id": EthernetInterface_1_0_0_EthernetInterface_Id,
        "Status": EthernetInterface_1_0_0_EthernetInterface_Status,
        "IPv6AddressPolicyTable": EthernetInterface_1_0_0_EthernetInterface_IPv6AddressPolicyTable,
        "FullDuplex": EthernetInterface_1_0_0_EthernetInterface_FullDuplex,
        "MACAddress": EthernetInterface_1_0_0_EthernetInterface_MACAddress,
        "IPv6Addresses": EthernetInterface_1_0_0_EthernetInterface_IPv6Addresses,
        "IPv4Addresses": EthernetInterface_1_0_0_EthernetInterface_IPv4Addresses,
        "VLAN": EthernetInterface_1_0_0_EthernetInterface_VLAN,
        "Description": EthernetInterface_1_0_0_EthernetInterface_Description,
        "MTUSize": EthernetInterface_1_0_0_EthernetInterface_MTUSize,
        "PermanentMACAddress": EthernetInterface_1_0_0_EthernetInterface_PermanentMACAddress,
        "@odata.type": EthernetInterface_1_0_0_EthernetInterface_odata_type,
        "Oem": EthernetInterface_1_0_0_EthernetInterface_Oem,
        "@odata.id": EthernetInterface_1_0_0_EthernetInterface_odata_id,
        "IPv6StaticAddresses": EthernetInterface_1_0_0_EthernetInterface_IPv6StaticAddresses,
        "SpeedMbps": EthernetInterface_1_0_0_EthernetInterface_SpeedMbps,
        "VLANs": EthernetInterface_1_0_0_EthernetInterface_VLANs,
        "FQDN": EthernetInterface_1_0_0_EthernetInterface_FQDN,
        "IPv6DefaultGateway": EthernetInterface_1_0_0_EthernetInterface_IPv6DefaultGateway,
        "HostName": EthernetInterface_1_0_0_EthernetInterface_HostName,
    })

    #
    # EventService_1_0_0_EventService
    #

    EventService_1_0_0_EventService_DeliveryRetryIntervalSeconds = restplus.fields.Float(
            readonly=True,
            description="This represents the number of seconds between retry attempts for sending any given Event")
    EventService_1_0_0_EventService_ServiceEnabled = restplus.fields.Boolean(
            description="This indicates whether this service is enabled.")
    EventService_1_0_0_EventService_DeliveryRetryAttempts = restplus.fields.Float(
            readonly=True,
            description="This is the number of attempts an event posting is retried before the subscription is terminated.")
    EventService_1_0_0_EventService_Actions = restplus.fields.Nested(EventService_1_0_0_EventService_Actions,
            readonly=True,
            description="The Actions object contains the available custom actions on this resource.")
    inner_EventService_1_0_0_EventService_EventTypesForSubscription = restplus.fields.String(
            enum=Event_1_0_0_EventType,
            readonly=True,
            description="This is the types of Events that can be subscribed to.")
    EventService_1_0_0_EventService_EventTypesForSubscription = restplus.fields.List(inner_EventService_1_0_0_EventService_EventTypesForSubscription,
            readonly=True,
            description="This is the types of Events that can be subscribed to.")

    inner_EventService_1_0_0_EventService_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    EventService_1_0_0_EventService_odata_context = inner_EventService_1_0_0_EventService_odata_context

    inner_EventService_1_0_0_EventService_Subscriptions = EventDestinationCollection_EventDestinationCollection
    EventService_1_0_0_EventService_Subscriptions = restplus.fields.Nested(inner_EventService_1_0_0_EventService_Subscriptions,
            readonly=True,
            description="This is a reference to a collection of Event Destination resources.")

    inner_EventService_1_0_0_EventService_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    EventService_1_0_0_EventService_odata_type = inner_EventService_1_0_0_EventService_odata_type

    inner_EventService_1_0_0_EventService_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    EventService_1_0_0_EventService_odata_id = inner_EventService_1_0_0_EventService_odata_id

    inner_EventService_1_0_0_EventService_Status = Resource_Status
    EventService_1_0_0_EventService_Status = restplus.fields.Nested(inner_EventService_1_0_0_EventService_Status,
            )

    inner_EventService_1_0_0_EventService_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    EventService_1_0_0_EventService_Name = inner_EventService_1_0_0_EventService_Name

    inner_EventService_1_0_0_EventService_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    EventService_1_0_0_EventService_Id = inner_EventService_1_0_0_EventService_Id

    inner_EventService_1_0_0_EventService_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    EventService_1_0_0_EventService_Description = inner_EventService_1_0_0_EventService_Description

    inner_EventService_1_0_0_EventService_Oem = Resource_Oem
    EventService_1_0_0_EventService_Oem = restplus.fields.Nested(inner_EventService_1_0_0_EventService_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")


    EventService_1_0_0_EventService = namespace.model("EventService_1_0_0_EventService",
    {
        "@odata.context": EventService_1_0_0_EventService_odata_context,
        "DeliveryRetryIntervalSeconds": EventService_1_0_0_EventService_DeliveryRetryIntervalSeconds,
        "EventTypesForSubscription": EventService_1_0_0_EventService_EventTypesForSubscription,
        "Subscriptions": EventService_1_0_0_EventService_Subscriptions,
        "@odata.type": EventService_1_0_0_EventService_odata_type,
        "@odata.id": EventService_1_0_0_EventService_odata_id,
        "ServiceEnabled": EventService_1_0_0_EventService_ServiceEnabled,
        "Status": EventService_1_0_0_EventService_Status,
        "DeliveryRetryAttempts": EventService_1_0_0_EventService_DeliveryRetryAttempts,
        "Name": EventService_1_0_0_EventService_Name,
        "Id": EventService_1_0_0_EventService_Id,
        "Description": EventService_1_0_0_EventService_Description,
        "Actions": EventService_1_0_0_EventService_Actions,
        "Oem": EventService_1_0_0_EventService_Oem,
    })

    #
    # Event_1_0_0_Event
    #

    inner_Event_1_0_0_Event_Events = Event_1_0_0_EventRecord
    Event_1_0_0_Event_Events = restplus.fields.Nested(inner_Event_1_0_0_Event_Events, as_list=True,
            description="Each event in this array has a set of properties that describe the event.  Since this is an array, more than one event can be sent simultaneously.")

    inner_Event_1_0_0_Event_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Event_1_0_0_Event_odata_context = inner_Event_1_0_0_Event_odata_context

    inner_Event_1_0_0_Event_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Event_1_0_0_Event_Name = inner_Event_1_0_0_Event_Name

    inner_Event_1_0_0_Event_Eventsodata_count = restplus.fields.Float(
            attribute="Eventsodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Event_1_0_0_Event_Eventsodata_count = inner_Event_1_0_0_Event_Eventsodata_count

    inner_Event_1_0_0_Event_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Event_1_0_0_Event_odata_type = inner_Event_1_0_0_Event_odata_type

    inner_Event_1_0_0_Event_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Event_1_0_0_Event_odata_id = inner_Event_1_0_0_Event_odata_id

    inner_Event_1_0_0_Event_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Event_1_0_0_Event_Id = inner_Event_1_0_0_Event_Id

    inner_Event_1_0_0_Event_Eventsodata_navigationLink = odata_4_0_0_idRef
    Event_1_0_0_Event_Eventsodata_navigationLink = restplus.fields.Nested(inner_Event_1_0_0_Event_Eventsodata_navigationLink,
            attribute="Eventsodata_navigationLink")

    inner_Event_1_0_0_Event_Oem = Resource_Oem
    Event_1_0_0_Event_Oem = restplus.fields.Nested(inner_Event_1_0_0_Event_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Event_1_0_0_Event_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Event_1_0_0_Event_Description = inner_Event_1_0_0_Event_Description


    Event_1_0_0_Event = namespace.model("Event_1_0_0_Event",
    {
        "@odata.context": Event_1_0_0_Event_odata_context,
        "Name": Event_1_0_0_Event_Name,
        "Events@odata.count": Event_1_0_0_Event_Eventsodata_count,
        "@odata.type": Event_1_0_0_Event_odata_type,
        "@odata.id": Event_1_0_0_Event_odata_id,
        "Id": Event_1_0_0_Event_Id,
        "Events@odata.navigationLink": Event_1_0_0_Event_Eventsodata_navigationLink,
        "Events": Event_1_0_0_Event_Events,
        "Oem": Event_1_0_0_Event_Oem,
        "Description": Event_1_0_0_Event_Description,
    })

    #
    # LogEntry_1_0_0_LogEntry
    #

    LogEntry_1_0_0_LogEntry_OemRecordFormat = restplus.fields.String(
            readonly=True,
            description="If the entry type is Oem, this will contain more information about the record format from the Oem.")
    LogEntry_1_0_0_LogEntry_Created = restplus.fields.String(
            readonly=True,
            description="The time the log entry was created.")
    LogEntry_1_0_0_LogEntry_Message = restplus.fields.String(
            readonly=True,
            description="This property decodes from EntryType:  If it is Event then it is a message string.  Otherwise, it is SEL or Oem specific.  In most cases, this will be the actual Log Entry.")
    LogEntry_1_0_0_LogEntry_SensorNumber = restplus.fields.Float(
            readonly=True,
            description="This property decodes from EntryType:  If it is SEL, it is the sensor number; if Event then the count of events.  Otherwise, it is Oem specific.")
    LogEntry_1_0_0_LogEntry_MessageId = restplus.fields.String(
            readonly=True,
            description="This property decodes from EntryType:  If it is Event then it is a message id.  Otherwise, it is SEL or Oem specific.  This value is only used for registries - for more information, see the specification.")
    LogEntry_1_0_0_LogEntry_Links = restplus.fields.Nested(LogEntry_1_0_0_LogEntry_Links,
            readonly=True,
            description="The links object contains the links to other resources that are related to this resource.")
    inner_LogEntry_1_0_0_LogEntry_MessageArgs = restplus.fields.String(
            readonly=True,
            description="The values of this property shall be any arguments for the message.")
    LogEntry_1_0_0_LogEntry_MessageArgs = restplus.fields.List(inner_LogEntry_1_0_0_LogEntry_MessageArgs,
            readonly=True,
            description="The values of this property shall be any arguments for the message.")

    inner_LogEntry_1_0_0_LogEntry_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    LogEntry_1_0_0_LogEntry_odata_type = inner_LogEntry_1_0_0_LogEntry_odata_type

    inner_LogEntry_1_0_0_LogEntry_Severity = restplus.fields.String(
            enum=LogEntry_1_0_0_EventSeverity)
    LogEntry_1_0_0_LogEntry_Severity = inner_LogEntry_1_0_0_LogEntry_Severity

    inner_LogEntry_1_0_0_LogEntry_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    LogEntry_1_0_0_LogEntry_odata_id = inner_LogEntry_1_0_0_LogEntry_odata_id

    inner_LogEntry_1_0_0_LogEntry_EntryType = restplus.fields.String(
            enum=LogEntry_1_0_0_LogEntryType)
    LogEntry_1_0_0_LogEntry_EntryType = inner_LogEntry_1_0_0_LogEntry_EntryType

    inner_LogEntry_1_0_0_LogEntry_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    LogEntry_1_0_0_LogEntry_odata_context = inner_LogEntry_1_0_0_LogEntry_odata_context

    inner_LogEntry_1_0_0_LogEntry_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    LogEntry_1_0_0_LogEntry_Id = inner_LogEntry_1_0_0_LogEntry_Id

    inner_LogEntry_1_0_0_LogEntry_EntryCode = restplus.fields.String(
            enum=LogEntry_1_0_0_LogEntryCode)
    LogEntry_1_0_0_LogEntry_EntryCode = inner_LogEntry_1_0_0_LogEntry_EntryCode

    inner_LogEntry_1_0_0_LogEntry_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    LogEntry_1_0_0_LogEntry_Description = inner_LogEntry_1_0_0_LogEntry_Description

    inner_LogEntry_1_0_0_LogEntry_Oem = LogEntry_1_0_0_LogEntryOem
    LogEntry_1_0_0_LogEntry_Oem = restplus.fields.Nested(inner_LogEntry_1_0_0_LogEntry_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_LogEntry_1_0_0_LogEntry_SensorType = restplus.fields.String(
            enum=LogEntry_1_0_0_SensorType)
    LogEntry_1_0_0_LogEntry_SensorType = inner_LogEntry_1_0_0_LogEntry_SensorType

    inner_LogEntry_1_0_0_LogEntry_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    LogEntry_1_0_0_LogEntry_Name = inner_LogEntry_1_0_0_LogEntry_Name


    LogEntry_1_0_0_LogEntry = namespace.model("LogEntry_1_0_0_LogEntry",
    {
        "@odata.type": LogEntry_1_0_0_LogEntry_odata_type,
        "MessageArgs": LogEntry_1_0_0_LogEntry_MessageArgs,
        "Severity": LogEntry_1_0_0_LogEntry_Severity,
        "@odata.id": LogEntry_1_0_0_LogEntry_odata_id,
        "EntryType": LogEntry_1_0_0_LogEntry_EntryType,
        "@odata.context": LogEntry_1_0_0_LogEntry_odata_context,
        "OemRecordFormat": LogEntry_1_0_0_LogEntry_OemRecordFormat,
        "Id": LogEntry_1_0_0_LogEntry_Id,
        "EntryCode": LogEntry_1_0_0_LogEntry_EntryCode,
        "Created": LogEntry_1_0_0_LogEntry_Created,
        "Description": LogEntry_1_0_0_LogEntry_Description,
        "Oem": LogEntry_1_0_0_LogEntry_Oem,
        "Message": LogEntry_1_0_0_LogEntry_Message,
        "SensorNumber": LogEntry_1_0_0_LogEntry_SensorNumber,
        "Links": LogEntry_1_0_0_LogEntry_Links,
        "MessageId": LogEntry_1_0_0_LogEntry_MessageId,
        "SensorType": LogEntry_1_0_0_LogEntry_SensorType,
        "Name": LogEntry_1_0_0_LogEntry_Name,
    })

    #
    # ManagerAccount_1_0_0_ManagerAccount
    #

    ManagerAccount_1_0_0_ManagerAccount_Enabled = restplus.fields.Boolean(
            description="This property is used by a User Administrator to disable an account w/o having to delet the user information.  When set to true, the user can login.  When set to false, the account is administratively disabled and the user cannot login.")
    ManagerAccount_1_0_0_ManagerAccount_UserName = restplus.fields.String(
            description="This property contains the user name for the account.")
    ManagerAccount_1_0_0_ManagerAccount_RoleId = restplus.fields.String(
            description="This property contains the Role for this account.")
    ManagerAccount_1_0_0_ManagerAccount_Locked = restplus.fields.Boolean(
            description="This property indicates that the account has been auto-locked by the account service because the lockout threshold has been exceeded.  When set to true, the account is locked. A user admin can write the property to false to manually unlock, or the account service will unlock it once the lockout duration period has passed.")
    ManagerAccount_1_0_0_ManagerAccount_Password = restplus.fields.String(
            description="This property is used with a PATCH or PUT to write the password for the account.  This property is null on a GET.")
    ManagerAccount_1_0_0_ManagerAccount_Links = restplus.fields.Nested(ManagerAccount_1_0_0_ManagerAccount_Links,
            readonly=True,
            description="The links object contains the links to other resources that are related to this resource.")
    inner_ManagerAccount_1_0_0_ManagerAccount_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    ManagerAccount_1_0_0_ManagerAccount_Id = inner_ManagerAccount_1_0_0_ManagerAccount_Id

    inner_ManagerAccount_1_0_0_ManagerAccount_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    ManagerAccount_1_0_0_ManagerAccount_odata_context = inner_ManagerAccount_1_0_0_ManagerAccount_odata_context

    inner_ManagerAccount_1_0_0_ManagerAccount_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    ManagerAccount_1_0_0_ManagerAccount_Description = inner_ManagerAccount_1_0_0_ManagerAccount_Description

    inner_ManagerAccount_1_0_0_ManagerAccount_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    ManagerAccount_1_0_0_ManagerAccount_Name = inner_ManagerAccount_1_0_0_ManagerAccount_Name

    inner_ManagerAccount_1_0_0_ManagerAccount_Oem = Resource_Oem
    ManagerAccount_1_0_0_ManagerAccount_Oem = restplus.fields.Nested(inner_ManagerAccount_1_0_0_ManagerAccount_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_ManagerAccount_1_0_0_ManagerAccount_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    ManagerAccount_1_0_0_ManagerAccount_odata_id = inner_ManagerAccount_1_0_0_ManagerAccount_odata_id

    inner_ManagerAccount_1_0_0_ManagerAccount_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    ManagerAccount_1_0_0_ManagerAccount_odata_type = inner_ManagerAccount_1_0_0_ManagerAccount_odata_type


    ManagerAccount_1_0_0_ManagerAccount = namespace.model("ManagerAccount_1_0_0_ManagerAccount",
    {
        "Id": ManagerAccount_1_0_0_ManagerAccount_Id,
        "Enabled": ManagerAccount_1_0_0_ManagerAccount_Enabled,
        "UserName": ManagerAccount_1_0_0_ManagerAccount_UserName,
        "RoleId": ManagerAccount_1_0_0_ManagerAccount_RoleId,
        "@odata.context": ManagerAccount_1_0_0_ManagerAccount_odata_context,
        "Description": ManagerAccount_1_0_0_ManagerAccount_Description,
        "Locked": ManagerAccount_1_0_0_ManagerAccount_Locked,
        "Password": ManagerAccount_1_0_0_ManagerAccount_Password,
        "Name": ManagerAccount_1_0_0_ManagerAccount_Name,
        "Oem": ManagerAccount_1_0_0_ManagerAccount_Oem,
        "Links": ManagerAccount_1_0_0_ManagerAccount_Links,
        "@odata.id": ManagerAccount_1_0_0_ManagerAccount_odata_id,
        "@odata.type": ManagerAccount_1_0_0_ManagerAccount_odata_type,
    })

    #
    # ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol
    #

    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_FQDN = restplus.fields.String(
            readonly=True,
            description="This is the fully qualified domain name for the manager obtained by DNS including the host name and top-level domain name.")
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_HostName = restplus.fields.String(
            readonly=True,
            description="The DNS Host Name of this manager, without any domain information")
    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_IPMI = ManagerNetworkProtocol_1_0_0_Protocol
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_IPMI = restplus.fields.Nested(inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_IPMI,
            readonly=True,
            description="Settings for this Manager's IPMI-over-LAN protocol support")

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_SSDP = ManagerNetworkProtocol_1_0_0_SSDProtocol
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_SSDP = restplus.fields.Nested(inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_SSDP,
            readonly=True,
            description="Settings for this Manager's SSDP support")

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Oem = Resource_Oem
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Oem = restplus.fields.Nested(inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_HTTPS = ManagerNetworkProtocol_1_0_0_Protocol
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_HTTPS = restplus.fields.Nested(inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_HTTPS,
            readonly=True,
            description="Settings for this Manager's HTTPS protocol support")

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_KVMIP = ManagerNetworkProtocol_1_0_0_Protocol
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_KVMIP = restplus.fields.Nested(inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_KVMIP,
            readonly=True,
            description="Settings for this Manager's KVM-IP protocol support")

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_odata_type = inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_odata_type

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_odata_id = inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_odata_id

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_VirtualMedia = ManagerNetworkProtocol_1_0_0_Protocol
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_VirtualMedia = restplus.fields.Nested(inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_VirtualMedia,
            readonly=True,
            description="Settings for this Manager's Virtual Media support")

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Id = inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Id

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_SNMP = ManagerNetworkProtocol_1_0_0_Protocol
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_SNMP = restplus.fields.Nested(inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_SNMP,
            readonly=True,
            description="Settings for this Manager's SNMP support")

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_SSH = ManagerNetworkProtocol_1_0_0_Protocol
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_SSH = restplus.fields.Nested(inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_SSH,
            readonly=True,
            description="Settings for this Manager's SSH (Secure Shell) protocol support")

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Telnet = ManagerNetworkProtocol_1_0_0_Protocol
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Telnet = restplus.fields.Nested(inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Telnet,
            readonly=True,
            description="Settings for this Manager's Telnet protocol support")

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Status = Resource_Status
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Status = restplus.fields.Nested(inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Status,
            )

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_HTTP = ManagerNetworkProtocol_1_0_0_Protocol
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_HTTP = restplus.fields.Nested(inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_HTTP,
            readonly=True,
            description="Settings for this Manager's HTTP protocol support")

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Description = inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Description

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_odata_context = inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_odata_context

    inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Name = inner_ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Name


    ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol = namespace.model("ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol",
    {
        "IPMI": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_IPMI,
        "SSDP": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_SSDP,
        "Oem": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Oem,
        "HTTPS": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_HTTPS,
        "KVMIP": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_KVMIP,
        "@odata.type": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_odata_type,
        "@odata.id": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_odata_id,
        "VirtualMedia": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_VirtualMedia,
        "FQDN": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_FQDN,
        "Id": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Id,
        "HostName": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_HostName,
        "SNMP": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_SNMP,
        "SSH": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_SSH,
        "Telnet": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Telnet,
        "Status": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Status,
        "HTTP": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_HTTP,
        "Description": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Description,
        "@odata.context": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_odata_context,
        "Name": ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol_Name,
    })

    #
    # Manager_1_0_0_Interface
    #

    inner_Manager_1_0_0_Interface_IPv4Addresses = IPAddresses_1_0_0_IPv4Address
    Manager_1_0_0_Interface_IPv4Addresses = restplus.fields.Nested(inner_Manager_1_0_0_Interface_IPv4Addresses, as_list=True,
            readonly=True,
            description="The IPv4 addresses assigned to this interface")

    inner_Manager_1_0_0_Interface_MACAddress = restplus.fields.String(
            )
    Manager_1_0_0_Interface_MACAddress = inner_Manager_1_0_0_Interface_MACAddress


    Manager_1_0_0_Interface = namespace.model("Manager_1_0_0_Interface",
    {
        "MACAddress": Manager_1_0_0_Interface_MACAddress,
        "IPv4Addresses": Manager_1_0_0_Interface_IPv4Addresses,
    })

    #
    # Manager_1_0_0_Manager_Links
    #

    Manager_1_0_0_Manager_Links_Oem = restplus.fields.Nested(Manager_1_0_0_Manager_Links_Oem,
            description="Oem extension object.")
    inner_Manager_1_0_0_Manager_Links_ManagerForChassis = odata_4_0_0_idRef
    Manager_1_0_0_Manager_Links_ManagerForChassis = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Links_ManagerForChassis, as_list=True,
            readonly=True,
            description="This property is an array of references to the chasis that this manager has control over.")

    inner_Manager_1_0_0_Manager_Links_ManagerForServers = odata_4_0_0_idRef
    Manager_1_0_0_Manager_Links_ManagerForServers = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Links_ManagerForServers, as_list=True,
            readonly=True,
            description="This property is an array of references to the systems that this manager has control over.")

    inner_Manager_1_0_0_Manager_Links_ManagerForServersodata_navigationLink = odata_4_0_0_idRef
    Manager_1_0_0_Manager_Links_ManagerForServersodata_navigationLink = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Links_ManagerForServersodata_navigationLink,
            attribute="ManagerForServersodata_navigationLink")

    inner_Manager_1_0_0_Manager_Links_ManagerForServersodata_count = restplus.fields.Float(
            attribute="ManagerForServersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Manager_1_0_0_Manager_Links_ManagerForServersodata_count = inner_Manager_1_0_0_Manager_Links_ManagerForServersodata_count

    inner_Manager_1_0_0_Manager_Links_ManagerForChassisodata_navigationLink = odata_4_0_0_idRef
    Manager_1_0_0_Manager_Links_ManagerForChassisodata_navigationLink = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Links_ManagerForChassisodata_navigationLink,
            attribute="ManagerForChassisodata_navigationLink")

    inner_Manager_1_0_0_Manager_Links_ManagerForChassisodata_count = restplus.fields.Float(
            attribute="ManagerForChassisodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Manager_1_0_0_Manager_Links_ManagerForChassisodata_count = inner_Manager_1_0_0_Manager_Links_ManagerForChassisodata_count


    Manager_1_0_0_Manager_Links = namespace.model("Manager_1_0_0_Manager_Links",
    {
        "Oem": Manager_1_0_0_Manager_Links_Oem,
        "ManagerForChassis": Manager_1_0_0_Manager_Links_ManagerForChassis,
        "ManagerForServers@odata.navigationLink": Manager_1_0_0_Manager_Links_ManagerForServersodata_navigationLink,
        "ManagerForServers": Manager_1_0_0_Manager_Links_ManagerForServers,
        "ManagerForServers@odata.count": Manager_1_0_0_Manager_Links_ManagerForServersodata_count,
        "ManagerForChassis@odata.navigationLink": Manager_1_0_0_Manager_Links_ManagerForChassisodata_navigationLink,
        "ManagerForChassis@odata.count": Manager_1_0_0_Manager_Links_ManagerForChassisodata_count,
    })

    #
    # Onrack_BootImageParam
    #

    Onrack_BootImageParam_version = restplus.fields.String(
            readonly=False,
            description="(Required) The version number of target OS that needs to install.")
    Onrack_BootImageParam_repo = restplus.fields.String(
            readonly=False,
            description="(Required) The external OS repository address, currently only supports HTTP")
    Onrack_BootImageParam_rootSshKey = restplus.fields.String(
            readonly=False,
            description="(Optional) This is the SshKey for the OS root account.")
    Onrack_BootImageParam_domain = restplus.fields.String(
            readonly=False,
            description="(Required) This is the domain for the target OS")
    Onrack_BootImageParam_osName = restplus.fields.String(
            readonly=False,
            description="(Required) Name of the target OS to be installed")
    Onrack_BootImageParam_rootPassword = restplus.fields.String(
            readonly=False,
            description="(Required) The password for the OS root account.")
    Onrack_BootImageParam_hostname = restplus.fields.String(
            readonly=False,
            description="(Required) The hostname for target OS.")
    inner_Onrack_BootImageParam_users = Onrack_BootImageParamUser
    Onrack_BootImageParam_users = restplus.fields.Nested(inner_Onrack_BootImageParam_users, as_list=True,
            description="(Optional) This is a list of user account information that will created after OS installation")

    inner_Onrack_BootImageParam_dnsServers = restplus.fields.String(
            readonly=False,
            description="(Required) This is a list of Domain Name Servers.")
    Onrack_BootImageParam_dnsServers = restplus.fields.List(inner_Onrack_BootImageParam_dnsServers,
            readonly=False,
            description="(Required) This is a list of Domain Name Servers.")

    inner_Onrack_BootImageParam_networkDevices = Onrack_BootImageParamNetworkDevice
    Onrack_BootImageParam_networkDevices = restplus.fields.Nested(inner_Onrack_BootImageParam_networkDevices, as_list=True,
            description="(Optional) List of device names and static IP settings for network devices after OS installation.")


    Onrack_BootImageParam = namespace.model("Onrack_BootImageParam",
    {
        "users": Onrack_BootImageParam_users,
        "version": Onrack_BootImageParam_version,
        "repo": Onrack_BootImageParam_repo,
        "dnsServers": Onrack_BootImageParam_dnsServers,
        "networkDevices": Onrack_BootImageParam_networkDevices,
        "rootSshKey": Onrack_BootImageParam_rootSshKey,
        "domain": Onrack_BootImageParam_domain,
        "osName": Onrack_BootImageParam_osName,
        "rootPassword": Onrack_BootImageParam_rootPassword,
        "hostname": Onrack_BootImageParam_hostname,
    })

    #
    # PDUMetric_1_0_0_PDUMetric
    #

    inner_PDUMetric_1_0_0_PDUMetric_Members = PDUMetric_1_0_0_PDUPower
    PDUMetric_1_0_0_PDUMetric_Members = restplus.fields.Nested(inner_PDUMetric_1_0_0_PDUMetric_Members, as_list=True,
            readonly=True,
            description="This property shall specify an array of elements present on this PDU ")

    inner_PDUMetric_1_0_0_PDUMetric_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    PDUMetric_1_0_0_PDUMetric_odata_type = inner_PDUMetric_1_0_0_PDUMetric_odata_type

    inner_PDUMetric_1_0_0_PDUMetric_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    PDUMetric_1_0_0_PDUMetric_Name = inner_PDUMetric_1_0_0_PDUMetric_Name

    inner_PDUMetric_1_0_0_PDUMetric_Oem = PDUMetric_1_0_0_PDUOem
    PDUMetric_1_0_0_PDUMetric_Oem = restplus.fields.Nested(inner_PDUMetric_1_0_0_PDUMetric_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_PDUMetric_1_0_0_PDUMetric_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    PDUMetric_1_0_0_PDUMetric_odata_id = inner_PDUMetric_1_0_0_PDUMetric_odata_id

    inner_PDUMetric_1_0_0_PDUMetric_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    PDUMetric_1_0_0_PDUMetric_Membersodata_count = inner_PDUMetric_1_0_0_PDUMetric_Membersodata_count

    inner_PDUMetric_1_0_0_PDUMetric_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    PDUMetric_1_0_0_PDUMetric_Id = inner_PDUMetric_1_0_0_PDUMetric_Id

    inner_PDUMetric_1_0_0_PDUMetric_Membersodata_navigationLink = odata_4_0_0_idRef
    PDUMetric_1_0_0_PDUMetric_Membersodata_navigationLink = restplus.fields.Nested(inner_PDUMetric_1_0_0_PDUMetric_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_PDUMetric_1_0_0_PDUMetric_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    PDUMetric_1_0_0_PDUMetric_odata_context = inner_PDUMetric_1_0_0_PDUMetric_odata_context

    inner_PDUMetric_1_0_0_PDUMetric_Status = Resource_Status
    PDUMetric_1_0_0_PDUMetric_Status = restplus.fields.Nested(inner_PDUMetric_1_0_0_PDUMetric_Status,
            )

    inner_PDUMetric_1_0_0_PDUMetric_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    PDUMetric_1_0_0_PDUMetric_Description = inner_PDUMetric_1_0_0_PDUMetric_Description


    PDUMetric_1_0_0_PDUMetric = namespace.model("PDUMetric_1_0_0_PDUMetric",
    {
        "@odata.type": PDUMetric_1_0_0_PDUMetric_odata_type,
        "Name": PDUMetric_1_0_0_PDUMetric_Name,
        "Oem": PDUMetric_1_0_0_PDUMetric_Oem,
        "@odata.id": PDUMetric_1_0_0_PDUMetric_odata_id,
        "Members@odata.count": PDUMetric_1_0_0_PDUMetric_Membersodata_count,
        "Id": PDUMetric_1_0_0_PDUMetric_Id,
        "Members": PDUMetric_1_0_0_PDUMetric_Members,
        "Members@odata.navigationLink": PDUMetric_1_0_0_PDUMetric_Membersodata_navigationLink,
        "@odata.context": PDUMetric_1_0_0_PDUMetric_odata_context,
        "Status": PDUMetric_1_0_0_PDUMetric_Status,
        "Description": PDUMetric_1_0_0_PDUMetric_Description,
    })

    #
    # PDU_1_0_0_PDU
    #

    PDU_1_0_0_PDU_Location = restplus.fields.String(
            readonly=True,
            description="This is the location information for this PDU")
    PDU_1_0_0_PDU_Contact = restplus.fields.String(
            readonly=True,
            description="This is the contact information for this PDU")
    inner_PDU_1_0_0_PDU_Members = PDU_1_0_0_PDUs
    PDU_1_0_0_PDU_Members = restplus.fields.Nested(inner_PDU_1_0_0_PDU_Members, as_list=True,
            readonly=True,
            description="")

    inner_PDU_1_0_0_PDU_VendorInformation = PDU_1_0_0_VendorInformation
    PDU_1_0_0_PDU_VendorInformation = restplus.fields.Nested(inner_PDU_1_0_0_PDU_VendorInformation,
            )

    inner_PDU_1_0_0_PDU_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    PDU_1_0_0_PDU_Membersodata_count = inner_PDU_1_0_0_PDU_Membersodata_count

    inner_PDU_1_0_0_PDU_Status = Resource_Status
    PDU_1_0_0_PDU_Status = restplus.fields.Nested(inner_PDU_1_0_0_PDU_Status,
            )

    inner_PDU_1_0_0_PDU_Oem = Resource_Oem
    PDU_1_0_0_PDU_Oem = restplus.fields.Nested(inner_PDU_1_0_0_PDU_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_PDU_1_0_0_PDU_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    PDU_1_0_0_PDU_Description = inner_PDU_1_0_0_PDU_Description

    inner_PDU_1_0_0_PDU_Membersodata_navigationLink = odata_4_0_0_idRef
    PDU_1_0_0_PDU_Membersodata_navigationLink = restplus.fields.Nested(inner_PDU_1_0_0_PDU_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_PDU_1_0_0_PDU_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    PDU_1_0_0_PDU_odata_id = inner_PDU_1_0_0_PDU_odata_id

    inner_PDU_1_0_0_PDU_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    PDU_1_0_0_PDU_odata_context = inner_PDU_1_0_0_PDU_odata_context

    inner_PDU_1_0_0_PDU_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    PDU_1_0_0_PDU_Id = inner_PDU_1_0_0_PDU_Id

    inner_PDU_1_0_0_PDU_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    PDU_1_0_0_PDU_Name = inner_PDU_1_0_0_PDU_Name

    inner_PDU_1_0_0_PDU_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    PDU_1_0_0_PDU_odata_type = inner_PDU_1_0_0_PDU_odata_type


    PDU_1_0_0_PDU = namespace.model("PDU_1_0_0_PDU",
    {
        "VendorInformation": PDU_1_0_0_PDU_VendorInformation,
        "Members@odata.count": PDU_1_0_0_PDU_Membersodata_count,
        "Status": PDU_1_0_0_PDU_Status,
        "Oem": PDU_1_0_0_PDU_Oem,
        "Description": PDU_1_0_0_PDU_Description,
        "Members@odata.navigationLink": PDU_1_0_0_PDU_Membersodata_navigationLink,
        "Location": PDU_1_0_0_PDU_Location,
        "@odata.id": PDU_1_0_0_PDU_odata_id,
        "@odata.context": PDU_1_0_0_PDU_odata_context,
        "Contact": PDU_1_0_0_PDU_Contact,
        "Members": PDU_1_0_0_PDU_Members,
        "Id": PDU_1_0_0_PDU_Id,
        "Name": PDU_1_0_0_PDU_Name,
        "@odata.type": PDU_1_0_0_PDU_odata_type,
    })

    #
    # Power_1_0_0_PowerControl
    #

    Power_1_0_0_PowerControl_PowerRequestedWatts = restplus.fields.Float(
            readonly=True,
            description="The potential power that the chassis resources are requesting which may be higher than the current level being consumed since requested power includes budget that the chassis resource wants for future use.")
    Power_1_0_0_PowerControl_Name = restplus.fields.String(
            readonly=True,
            description="Power Control Function name.")
    Power_1_0_0_PowerControl_PowerConsumedWatts = restplus.fields.Float(
            readonly=True,
            description="The actual power being consumed by the chassis.")
    Power_1_0_0_PowerControl_PowerAvailableWatts = restplus.fields.Float(
            readonly=True,
            description="The amount of power not already budgeted and therefore available for additional allocation. (powerCapacity - powerAllocated).  This indicates how much reserve power capacity is left.")
    Power_1_0_0_PowerControl_PowerCapacityWatts = restplus.fields.Float(
            readonly=True,
            description="The total amount of power available to the chassis for allocation. This may the power supply capacity, or power budget assigned to the chassis from an up-stream chassis.")
    Power_1_0_0_PowerControl_PowerAllocatedWatts = restplus.fields.Float(
            readonly=True,
            description="The total amount of power that has been allocated (or budegeted)to  chassis resources.")
    Power_1_0_0_PowerControl_MemberId = restplus.fields.String(
            description="This is the identifier for the member within the collection.")
    inner_Power_1_0_0_PowerControl_RelatedItem = odata_4_0_0_idRef
    Power_1_0_0_PowerControl_RelatedItem = restplus.fields.Nested(inner_Power_1_0_0_PowerControl_RelatedItem, as_list=True,
            description="The ID(s) of the resources associated with this Power Limit")

    inner_Power_1_0_0_PowerControl_PowerLimit = Power_1_0_0_PowerLimit
    Power_1_0_0_PowerControl_PowerLimit = restplus.fields.Nested(inner_Power_1_0_0_PowerControl_PowerLimit,
            description="Power limit status and configuration information for this chassis")

    inner_Power_1_0_0_PowerControl_RelatedItemodata_navigationLink = odata_4_0_0_idRef
    Power_1_0_0_PowerControl_RelatedItemodata_navigationLink = restplus.fields.Nested(inner_Power_1_0_0_PowerControl_RelatedItemodata_navigationLink,
            attribute="RelatedItemodata_navigationLink")

    inner_Power_1_0_0_PowerControl_Oem = Resource_Oem
    Power_1_0_0_PowerControl_Oem = restplus.fields.Nested(inner_Power_1_0_0_PowerControl_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Power_1_0_0_PowerControl_Status = Resource_Status
    Power_1_0_0_PowerControl_Status = restplus.fields.Nested(inner_Power_1_0_0_PowerControl_Status,
            )

    inner_Power_1_0_0_PowerControl_PowerMetrics = Power_1_0_0_PowerMetric
    Power_1_0_0_PowerControl_PowerMetrics = restplus.fields.Nested(inner_Power_1_0_0_PowerControl_PowerMetrics,
            description="Power readings for this chassis.")

    inner_Power_1_0_0_PowerControl_RelatedItemodata_count = restplus.fields.Float(
            attribute="RelatedItemodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Power_1_0_0_PowerControl_RelatedItemodata_count = inner_Power_1_0_0_PowerControl_RelatedItemodata_count


    Power_1_0_0_PowerControl = namespace.model("Power_1_0_0_PowerControl",
    {
        "PowerLimit": Power_1_0_0_PowerControl_PowerLimit,
        "RelatedItem": Power_1_0_0_PowerControl_RelatedItem,
        "PowerRequestedWatts": Power_1_0_0_PowerControl_PowerRequestedWatts,
        "Name": Power_1_0_0_PowerControl_Name,
        "PowerConsumedWatts": Power_1_0_0_PowerControl_PowerConsumedWatts,
        "PowerAvailableWatts": Power_1_0_0_PowerControl_PowerAvailableWatts,
        "RelatedItem@odata.navigationLink": Power_1_0_0_PowerControl_RelatedItemodata_navigationLink,
        "Oem": Power_1_0_0_PowerControl_Oem,
        "PowerCapacityWatts": Power_1_0_0_PowerControl_PowerCapacityWatts,
        "Status": Power_1_0_0_PowerControl_Status,
        "PowerMetrics": Power_1_0_0_PowerControl_PowerMetrics,
        "PowerAllocatedWatts": Power_1_0_0_PowerControl_PowerAllocatedWatts,
        "RelatedItem@odata.count": Power_1_0_0_PowerControl_RelatedItemodata_count,
        "MemberId": Power_1_0_0_PowerControl_MemberId,
    })

    #
    # Power_1_0_0_PowerSupply
    #

    Power_1_0_0_PowerSupply_Name = restplus.fields.String(
            readonly=True,
            description="The name of the Power Supply")
    Power_1_0_0_PowerSupply_LineInputVoltage = restplus.fields.Float(
            readonly=True,
            description="The line input voltage at which the Power Supply is operating")
    Power_1_0_0_PowerSupply_PowerCapacityWatts = restplus.fields.Float(
            readonly=True,
            description="The maximum capacity of this Power Supply")
    Power_1_0_0_PowerSupply_Model = restplus.fields.String(
            readonly=True,
            description="The model number for this Power Supply")
    Power_1_0_0_PowerSupply_PartNumber = restplus.fields.String(
            readonly=True,
            description="The part number for this Power Supply")
    Power_1_0_0_PowerSupply_FirmwareVersion = restplus.fields.String(
            readonly=True,
            description="The firmware version for this Power Supply")
    Power_1_0_0_PowerSupply_SerialNumber = restplus.fields.String(
            readonly=True,
            description="The serial number for this Power Supply")
    Power_1_0_0_PowerSupply_MemberId = restplus.fields.String(
            description="This is the identifier for the member within the collection.")
    Power_1_0_0_PowerSupply_LastPowerOutputWatts = restplus.fields.Float(
            readonly=True,
            description="The average power output of this Power Supply")
    Power_1_0_0_PowerSupply_SparePartNumber = restplus.fields.String(
            readonly=True,
            description="The spare part number for this Power Supply")
    inner_Power_1_0_0_PowerSupply_RelatedItem = odata_4_0_0_idRef
    Power_1_0_0_PowerSupply_RelatedItem = restplus.fields.Nested(inner_Power_1_0_0_PowerSupply_RelatedItem, as_list=True,
            description="The ID(s) of the resources associated with this Power Limit")

    inner_Power_1_0_0_PowerSupply_Redundancy = odata_4_0_0_idRef
    Power_1_0_0_PowerSupply_Redundancy = restplus.fields.Nested(inner_Power_1_0_0_PowerSupply_Redundancy, as_list=True,
            readonly=True,
            description="This structure is used to show redundancy for fans.  The Component ids will reference the members of the redundancy groups.")

    inner_Power_1_0_0_PowerSupply_Oem = Resource_Oem
    Power_1_0_0_PowerSupply_Oem = restplus.fields.Nested(inner_Power_1_0_0_PowerSupply_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Power_1_0_0_PowerSupply_RelatedItemodata_count = restplus.fields.Float(
            attribute="RelatedItemodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Power_1_0_0_PowerSupply_RelatedItemodata_count = inner_Power_1_0_0_PowerSupply_RelatedItemodata_count

    inner_Power_1_0_0_PowerSupply_PowerSupplyType = restplus.fields.String(
            enum=Power_1_0_0_PowerSupplyType,
            description="Unknown: The power supply type cannot be determined, AC: Alternating Current (AC) power supply, DC: Direct Current (DC) power supply")
    Power_1_0_0_PowerSupply_PowerSupplyType = inner_Power_1_0_0_PowerSupply_PowerSupplyType

    inner_Power_1_0_0_PowerSupply_Status = Resource_Status
    Power_1_0_0_PowerSupply_Status = restplus.fields.Nested(inner_Power_1_0_0_PowerSupply_Status,
            )

    inner_Power_1_0_0_PowerSupply_Redundancyodata_navigationLink = odata_4_0_0_idRef
    Power_1_0_0_PowerSupply_Redundancyodata_navigationLink = restplus.fields.Nested(inner_Power_1_0_0_PowerSupply_Redundancyodata_navigationLink,
            attribute="Redundancyodata_navigationLink")

    inner_Power_1_0_0_PowerSupply_RelatedItemodata_navigationLink = odata_4_0_0_idRef
    Power_1_0_0_PowerSupply_RelatedItemodata_navigationLink = restplus.fields.Nested(inner_Power_1_0_0_PowerSupply_RelatedItemodata_navigationLink,
            attribute="RelatedItemodata_navigationLink")

    inner_Power_1_0_0_PowerSupply_LineInputVoltageType = restplus.fields.String(
            enum=Power_1_0_0_LineInputVoltageType,
            description="ACHighLine: 277V AC input, Unknown: The power supply line input voltage type cannot be determined, DC480V: High Voltage DC input (380V), ACMidLine: 200-240V AC input, DCNeg48V: -48V DC input, ACLowLine: 100-127V AC input")
    Power_1_0_0_PowerSupply_LineInputVoltageType = inner_Power_1_0_0_PowerSupply_LineInputVoltageType

    inner_Power_1_0_0_PowerSupply_Redundancyodata_count = restplus.fields.Float(
            attribute="Redundancyodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Power_1_0_0_PowerSupply_Redundancyodata_count = inner_Power_1_0_0_PowerSupply_Redundancyodata_count


    Power_1_0_0_PowerSupply = namespace.model("Power_1_0_0_PowerSupply",
    {
        "Oem": Power_1_0_0_PowerSupply_Oem,
        "RelatedItem@odata.count": Power_1_0_0_PowerSupply_RelatedItemodata_count,
        "RelatedItem": Power_1_0_0_PowerSupply_RelatedItem,
        "Name": Power_1_0_0_PowerSupply_Name,
        "LineInputVoltage": Power_1_0_0_PowerSupply_LineInputVoltage,
        "PowerCapacityWatts": Power_1_0_0_PowerSupply_PowerCapacityWatts,
        "Model": Power_1_0_0_PowerSupply_Model,
        "PartNumber": Power_1_0_0_PowerSupply_PartNumber,
        "FirmwareVersion": Power_1_0_0_PowerSupply_FirmwareVersion,
        "SerialNumber": Power_1_0_0_PowerSupply_SerialNumber,
        "PowerSupplyType": Power_1_0_0_PowerSupply_PowerSupplyType,
        "MemberId": Power_1_0_0_PowerSupply_MemberId,
        "Status": Power_1_0_0_PowerSupply_Status,
        "Redundancy@odata.navigationLink": Power_1_0_0_PowerSupply_Redundancyodata_navigationLink,
        "LastPowerOutputWatts": Power_1_0_0_PowerSupply_LastPowerOutputWatts,
        "RelatedItem@odata.navigationLink": Power_1_0_0_PowerSupply_RelatedItemodata_navigationLink,
        "LineInputVoltageType": Power_1_0_0_PowerSupply_LineInputVoltageType,
        "Redundancy@odata.count": Power_1_0_0_PowerSupply_Redundancyodata_count,
        "Redundancy": Power_1_0_0_PowerSupply_Redundancy,
        "SparePartNumber": Power_1_0_0_PowerSupply_SparePartNumber,
    })

    #
    # Power_1_0_0_Voltage
    #

    Power_1_0_0_Voltage_LowerThresholdNonCritical = restplus.fields.Float(
            readonly=True,
            description="Below normal range")
    Power_1_0_0_Voltage_UpperThresholdFatal = restplus.fields.Float(
            readonly=True,
            description="Above normal range and is fatal")
    Power_1_0_0_Voltage_MemberId = restplus.fields.String(
            description="This is the identifier for the member within the collection.")
    Power_1_0_0_Voltage_ReadingVolts = restplus.fields.Float(
            readonly=True,
            description="The current value of the voltage sensor.")
    Power_1_0_0_Voltage_MinReadingRange = restplus.fields.Float(
            readonly=True,
            description="Minimum value for CurrentReading")
    Power_1_0_0_Voltage_LowerThresholdFatal = restplus.fields.Float(
            readonly=True,
            description="Below normal range and is fatal")
    Power_1_0_0_Voltage_SensorNumber = restplus.fields.Float(
            readonly=True,
            description="A numerical identifier to represent the voltage sensor")
    Power_1_0_0_Voltage_MaxReadingRange = restplus.fields.Float(
            readonly=True,
            description="Maximum value for CurrentReading")
    Power_1_0_0_Voltage_LowerThresholdCritical = restplus.fields.Float(
            readonly=True,
            description="Below normal range but not yet fatal.")
    Power_1_0_0_Voltage_Name = restplus.fields.String(
            readonly=True,
            description="Voltage sensor name.")
    Power_1_0_0_Voltage_UpperThresholdCritical = restplus.fields.Float(
            readonly=True,
            description="Above normal range but not yet fatal.")
    Power_1_0_0_Voltage_UpperThresholdNonCritical = restplus.fields.Float(
            readonly=True,
            description="Above normal range")
    inner_Power_1_0_0_Voltage_RelatedItem = odata_4_0_0_idRef
    Power_1_0_0_Voltage_RelatedItem = restplus.fields.Nested(inner_Power_1_0_0_Voltage_RelatedItem, as_list=True,
            readonly=True,
            description="Describes the areas or devices to which this voltage measurement applies.")

    inner_Power_1_0_0_Voltage_Oem = Resource_Oem
    Power_1_0_0_Voltage_Oem = restplus.fields.Nested(inner_Power_1_0_0_Voltage_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Power_1_0_0_Voltage_RelatedItemodata_count = restplus.fields.Float(
            attribute="RelatedItemodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Power_1_0_0_Voltage_RelatedItemodata_count = inner_Power_1_0_0_Voltage_RelatedItemodata_count

    inner_Power_1_0_0_Voltage_Status = Resource_Status
    Power_1_0_0_Voltage_Status = restplus.fields.Nested(inner_Power_1_0_0_Voltage_Status,
            )

    inner_Power_1_0_0_Voltage_PhysicalContext = restplus.fields.String(
            enum=PhysicalContext_1_0_0_PhysicalContext,
            description="Exhaust: The exhaust point of the chassis, Intake: The intake point of the chassis, PowerSupplyBay: Within a power supply bay, Room: The room, Upper: The upper portion of the chassis, StorageBay: Within a storage bay, StorageDevice: A storage device, Back: The back of the chassis, SystemBoard: The system board (PCB), PowerSupply: A power supply, Lower: The lower portion of the chassis, Backplane: A backplane within the chassis, ComputeBay: Within a compute bay, NetworkingDevice: A networking device, ExpansionBay: Within an expansion bay, Front: The front of the chassis, GPU: A Graphics Processor (GPU), NetworkBay: Within a networking bay, CPU: A Processor (CPU), VoltageRegulator: A voltage regulator device")
    Power_1_0_0_Voltage_PhysicalContext = inner_Power_1_0_0_Voltage_PhysicalContext

    inner_Power_1_0_0_Voltage_RelatedItemodata_navigationLink = odata_4_0_0_idRef
    Power_1_0_0_Voltage_RelatedItemodata_navigationLink = restplus.fields.Nested(inner_Power_1_0_0_Voltage_RelatedItemodata_navigationLink,
            attribute="RelatedItemodata_navigationLink")


    Power_1_0_0_Voltage = namespace.model("Power_1_0_0_Voltage",
    {
        "LowerThresholdNonCritical": Power_1_0_0_Voltage_LowerThresholdNonCritical,
        "UpperThresholdFatal": Power_1_0_0_Voltage_UpperThresholdFatal,
        "MemberId": Power_1_0_0_Voltage_MemberId,
        "Oem": Power_1_0_0_Voltage_Oem,
        "ReadingVolts": Power_1_0_0_Voltage_ReadingVolts,
        "MinReadingRange": Power_1_0_0_Voltage_MinReadingRange,
        "RelatedItem@odata.count": Power_1_0_0_Voltage_RelatedItemodata_count,
        "Status": Power_1_0_0_Voltage_Status,
        "PhysicalContext": Power_1_0_0_Voltage_PhysicalContext,
        "LowerThresholdFatal": Power_1_0_0_Voltage_LowerThresholdFatal,
        "SensorNumber": Power_1_0_0_Voltage_SensorNumber,
        "RelatedItem@odata.navigationLink": Power_1_0_0_Voltage_RelatedItemodata_navigationLink,
        "MaxReadingRange": Power_1_0_0_Voltage_MaxReadingRange,
        "LowerThresholdCritical": Power_1_0_0_Voltage_LowerThresholdCritical,
        "Name": Power_1_0_0_Voltage_Name,
        "UpperThresholdCritical": Power_1_0_0_Voltage_UpperThresholdCritical,
        "UpperThresholdNonCritical": Power_1_0_0_Voltage_UpperThresholdNonCritical,
        "RelatedItem": Power_1_0_0_Voltage_RelatedItem,
    })

    #
    # Processor_1_0_0_Processor
    #

    Processor_1_0_0_Processor_Model = restplus.fields.String(
            readonly=True,
            description="The product model number of this device")
    Processor_1_0_0_Processor_MaxSpeedMHz = restplus.fields.Float(
            readonly=True,
            description="The maximum clock speed of the processor")
    Processor_1_0_0_Processor_TotalThreads = restplus.fields.Float(
            readonly=True,
            description="The total number of execution threads supported by this processor")
    Processor_1_0_0_Processor_Socket = restplus.fields.String(
            readonly=True,
            description="The socket or location of the processor")
    Processor_1_0_0_Processor_TotalCores = restplus.fields.Float(
            readonly=True,
            description="The total number of cores contained in this processor")
    Processor_1_0_0_Processor_Manufacturer = restplus.fields.String(
            readonly=True,
            description="The processor manufacturer")
    inner_Processor_1_0_0_Processor_Status = Resource_Status
    Processor_1_0_0_Processor_Status = restplus.fields.Nested(inner_Processor_1_0_0_Processor_Status,
            )

    inner_Processor_1_0_0_Processor_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Processor_1_0_0_Processor_odata_type = inner_Processor_1_0_0_Processor_odata_type

    inner_Processor_1_0_0_Processor_InstructionSet = restplus.fields.String(
            enum=Processor_1_0_0_InstructionSet,
            description="x86: x86 32-bit, ARM-A32: ARM 32-bit, IA-64: Intel IA-64, MIPS64: MIPS 64-bit, x86-64: x86 64-bit, OEM: OEM-defined, MIPS32: MIPS 32-bit, ARM-A64: ARM 64-bit")
    Processor_1_0_0_Processor_InstructionSet = inner_Processor_1_0_0_Processor_InstructionSet

    inner_Processor_1_0_0_Processor_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Processor_1_0_0_Processor_Description = inner_Processor_1_0_0_Processor_Description

    inner_Processor_1_0_0_Processor_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Processor_1_0_0_Processor_odata_context = inner_Processor_1_0_0_Processor_odata_context

    inner_Processor_1_0_0_Processor_Oem = Resource_Oem
    Processor_1_0_0_Processor_Oem = restplus.fields.Nested(inner_Processor_1_0_0_Processor_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Processor_1_0_0_Processor_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Processor_1_0_0_Processor_Id = inner_Processor_1_0_0_Processor_Id

    inner_Processor_1_0_0_Processor_ProcessorType = restplus.fields.String(
            enum=Processor_1_0_0_ProcessorType,
            description="FPGA: A Field Programmable Gate Array, Accelerator: An Accelerator, DSP: A Digital Signal Processor, OEM: An OEM-defined Processing Unit, GPU: A Graphics Processing Unit, CPU: A Central Processing Unit")
    Processor_1_0_0_Processor_ProcessorType = inner_Processor_1_0_0_Processor_ProcessorType

    inner_Processor_1_0_0_Processor_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Processor_1_0_0_Processor_odata_id = inner_Processor_1_0_0_Processor_odata_id

    inner_Processor_1_0_0_Processor_ProcessorArchitecture = restplus.fields.String(
            enum=Processor_1_0_0_ProcessorArchitecture,
            description="MIPS: MIPS, IA-64: Intel Itanium, x86: x86 or x86-64, OEM: OEM-defined, ARM: ARM")
    Processor_1_0_0_Processor_ProcessorArchitecture = inner_Processor_1_0_0_Processor_ProcessorArchitecture

    inner_Processor_1_0_0_Processor_ProcessorId = Processor_1_0_0_ProcessorId
    Processor_1_0_0_Processor_ProcessorId = restplus.fields.Nested(inner_Processor_1_0_0_Processor_ProcessorId,
            description="Identification information for this processor.")

    inner_Processor_1_0_0_Processor_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Processor_1_0_0_Processor_Name = inner_Processor_1_0_0_Processor_Name


    Processor_1_0_0_Processor = namespace.model("Processor_1_0_0_Processor",
    {
        "Model": Processor_1_0_0_Processor_Model,
        "MaxSpeedMHz": Processor_1_0_0_Processor_MaxSpeedMHz,
        "TotalThreads": Processor_1_0_0_Processor_TotalThreads,
        "Status": Processor_1_0_0_Processor_Status,
        "@odata.type": Processor_1_0_0_Processor_odata_type,
        "Socket": Processor_1_0_0_Processor_Socket,
        "InstructionSet": Processor_1_0_0_Processor_InstructionSet,
        "TotalCores": Processor_1_0_0_Processor_TotalCores,
        "Description": Processor_1_0_0_Processor_Description,
        "@odata.context": Processor_1_0_0_Processor_odata_context,
        "Oem": Processor_1_0_0_Processor_Oem,
        "Id": Processor_1_0_0_Processor_Id,
        "Manufacturer": Processor_1_0_0_Processor_Manufacturer,
        "ProcessorType": Processor_1_0_0_Processor_ProcessorType,
        "@odata.id": Processor_1_0_0_Processor_odata_id,
        "ProcessorArchitecture": Processor_1_0_0_Processor_ProcessorArchitecture,
        "ProcessorId": Processor_1_0_0_Processor_ProcessorId,
        "Name": Processor_1_0_0_Processor_Name,
    })

    #
    # Redundancy_1_0_0_Redundancy
    #

    Redundancy_1_0_0_Redundancy_MemberId = restplus.fields.String(
            description="This is the identifier for the member within the collection.")
    Redundancy_1_0_0_Redundancy_MinNumNeeded = restplus.fields.Float(
            readonly=True,
            description="This is the minumum number of managers needed for this manager to be redundant.")
    Redundancy_1_0_0_Redundancy_MaxNumSupported = restplus.fields.Float(
            readonly=True,
            description="This is the maximum number of members allowable for this particular managers redundancy, including this manager.")
    Redundancy_1_0_0_Redundancy_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    inner_Redundancy_1_0_0_Redundancy_RedundancySet = odata_4_0_0_idRef
    Redundancy_1_0_0_Redundancy_RedundancySet = restplus.fields.Nested(inner_Redundancy_1_0_0_Redundancy_RedundancySet, as_list=True,
            readonly=True,
            description="Contains any ids that represent components of this reduncancy set.")

    inner_Redundancy_1_0_0_Redundancy_Status = Resource_Status
    Redundancy_1_0_0_Redundancy_Status = restplus.fields.Nested(inner_Redundancy_1_0_0_Redundancy_Status,
            )

    inner_Redundancy_1_0_0_Redundancy_Mode = restplus.fields.String(
            enum=Redundancy_1_0_0_RedundancyMode,
            description="Failover: Failure of one unit will automatically cause its functions to be taken over by a standby or offline unit in the redundancy set, Sharing: Multiple units contribute or share such that operation will continue, but at a reduced capacity, if one or more units fail, N+m: Multiple units are available and active such that normal operation will continue if one or more units fail, Sparing: One or more spare units are available to take over the function of a failed unit, but takeover is not automatic")
    Redundancy_1_0_0_Redundancy_Mode = inner_Redundancy_1_0_0_Redundancy_Mode

    inner_Redundancy_1_0_0_Redundancy_RedundancySetodata_navigationLink = odata_4_0_0_idRef
    Redundancy_1_0_0_Redundancy_RedundancySetodata_navigationLink = restplus.fields.Nested(inner_Redundancy_1_0_0_Redundancy_RedundancySetodata_navigationLink,
            attribute="RedundancySetodata_navigationLink")

    inner_Redundancy_1_0_0_Redundancy_RedundancySetodata_count = restplus.fields.Float(
            attribute="RedundancySetodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Redundancy_1_0_0_Redundancy_RedundancySetodata_count = inner_Redundancy_1_0_0_Redundancy_RedundancySetodata_count

    inner_Redundancy_1_0_0_Redundancy_Oem = Resource_Oem
    Redundancy_1_0_0_Redundancy_Oem = restplus.fields.Nested(inner_Redundancy_1_0_0_Redundancy_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")


    Redundancy_1_0_0_Redundancy = namespace.model("Redundancy_1_0_0_Redundancy",
    {
        "MemberId": Redundancy_1_0_0_Redundancy_MemberId,
        "RedundancySet": Redundancy_1_0_0_Redundancy_RedundancySet,
        "MinNumNeeded": Redundancy_1_0_0_Redundancy_MinNumNeeded,
        "Status": Redundancy_1_0_0_Redundancy_Status,
        "MaxNumSupported": Redundancy_1_0_0_Redundancy_MaxNumSupported,
        "Mode": Redundancy_1_0_0_Redundancy_Mode,
        "RedundancySet@odata.navigationLink": Redundancy_1_0_0_Redundancy_RedundancySetodata_navigationLink,
        "RedundancySet@odata.count": Redundancy_1_0_0_Redundancy_RedundancySetodata_count,
        "Oem": Redundancy_1_0_0_Redundancy_Oem,
        "Name": Redundancy_1_0_0_Redundancy_Name,
    })

    #
    # ServiceRoot_1_0_0_ServiceRoot_Links
    #

    inner_ServiceRoot_1_0_0_ServiceRoot_Links_Oem = Resource_Oem
    ServiceRoot_1_0_0_ServiceRoot_Links_Oem = restplus.fields.Nested(inner_ServiceRoot_1_0_0_ServiceRoot_Links_Oem,
            description="Oem extension object.")

    inner_ServiceRoot_1_0_0_ServiceRoot_Links_Sessions = SessionCollection_SessionCollection
    ServiceRoot_1_0_0_ServiceRoot_Links_Sessions = restplus.fields.Nested(inner_ServiceRoot_1_0_0_ServiceRoot_Links_Sessions,
            readonly=True,
            description="Link to a collection of Sessions")


    ServiceRoot_1_0_0_ServiceRoot_Links = namespace.model("ServiceRoot_1_0_0_ServiceRoot_Links",
    {
        "Oem": ServiceRoot_1_0_0_ServiceRoot_Links_Oem,
        "Sessions": ServiceRoot_1_0_0_ServiceRoot_Links_Sessions,
    })

    #
    # SessionService_1_0_0_SessionService
    #

    SessionService_1_0_0_SessionService_ServiceEnabled = restplus.fields.Boolean(
            description="This indicates whether this service is enabled.")
    SessionService_1_0_0_SessionService_SessionTimeout = restplus.fields.Float(
            readonly=False,
            description="This is the number of seconds of inactivity that a session may have before the session service closes the session due to inactivity.")
    inner_SessionService_1_0_0_SessionService_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    SessionService_1_0_0_SessionService_odata_type = inner_SessionService_1_0_0_SessionService_odata_type

    inner_SessionService_1_0_0_SessionService_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    SessionService_1_0_0_SessionService_odata_id = inner_SessionService_1_0_0_SessionService_odata_id

    inner_SessionService_1_0_0_SessionService_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    SessionService_1_0_0_SessionService_Id = inner_SessionService_1_0_0_SessionService_Id

    inner_SessionService_1_0_0_SessionService_Oem = Resource_Oem
    SessionService_1_0_0_SessionService_Oem = restplus.fields.Nested(inner_SessionService_1_0_0_SessionService_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_SessionService_1_0_0_SessionService_Sessions = SessionCollection_SessionCollection
    SessionService_1_0_0_SessionService_Sessions = restplus.fields.Nested(inner_SessionService_1_0_0_SessionService_Sessions,
            readonly=True,
            description="Link to a collection of Sessions")

    inner_SessionService_1_0_0_SessionService_Status = Resource_Status
    SessionService_1_0_0_SessionService_Status = restplus.fields.Nested(inner_SessionService_1_0_0_SessionService_Status,
            )

    inner_SessionService_1_0_0_SessionService_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    SessionService_1_0_0_SessionService_Description = inner_SessionService_1_0_0_SessionService_Description

    inner_SessionService_1_0_0_SessionService_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    SessionService_1_0_0_SessionService_odata_context = inner_SessionService_1_0_0_SessionService_odata_context

    inner_SessionService_1_0_0_SessionService_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    SessionService_1_0_0_SessionService_Name = inner_SessionService_1_0_0_SessionService_Name


    SessionService_1_0_0_SessionService = namespace.model("SessionService_1_0_0_SessionService",
    {
        "@odata.type": SessionService_1_0_0_SessionService_odata_type,
        "@odata.id": SessionService_1_0_0_SessionService_odata_id,
        "ServiceEnabled": SessionService_1_0_0_SessionService_ServiceEnabled,
        "Id": SessionService_1_0_0_SessionService_Id,
        "Oem": SessionService_1_0_0_SessionService_Oem,
        "Sessions": SessionService_1_0_0_SessionService_Sessions,
        "Status": SessionService_1_0_0_SessionService_Status,
        "SessionTimeout": SessionService_1_0_0_SessionService_SessionTimeout,
        "Description": SessionService_1_0_0_SessionService_Description,
        "@odata.context": SessionService_1_0_0_SessionService_odata_context,
        "Name": SessionService_1_0_0_SessionService_Name,
    })

    #
    # Settings_1_0_0_Settings
    #

    Settings_1_0_0_Settings_Time = restplus.fields.String(
            readonly=True,
            description="Indicates the time the settings were applied.")
    Settings_1_0_0_Settings_ETag = restplus.fields.String(
            readonly=True,
            description="The ETag of the resource to which the settings were applied, after the application.")
    inner_Settings_1_0_0_Settings_Messages = Message_1_0_0_Message
    Settings_1_0_0_Settings_Messages = restplus.fields.Nested(inner_Settings_1_0_0_Settings_Messages, as_list=True,
            readonly=True,
            description="This is an array of messages associated with the task.")

    inner_Settings_1_0_0_Settings_SettingsObject = odata_4_0_0_idRef
    Settings_1_0_0_Settings_SettingsObject = restplus.fields.Nested(inner_Settings_1_0_0_Settings_SettingsObject,
            description="Reference to the resource the client may PUT/PATCH to in order to change this resource.")


    Settings_1_0_0_Settings = namespace.model("Settings_1_0_0_Settings",
    {
        "Messages": Settings_1_0_0_Settings_Messages,
        "Time": Settings_1_0_0_Settings_Time,
        "SettingsObject": Settings_1_0_0_Settings_SettingsObject,
        "ETag": Settings_1_0_0_Settings_ETag,
    })

    #
    # SimpleStorage_1_0_0_Device
    #

    SimpleStorage_1_0_0_Device_Model = restplus.fields.String(
            readonly=True,
            description="The product model number of this device")
    SimpleStorage_1_0_0_Device_Manufacturer = restplus.fields.String(
            readonly=True,
            description="The name of the manufacturer of this device")
    SimpleStorage_1_0_0_Device_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    inner_SimpleStorage_1_0_0_Device_Oem = SimpleStorage_1_0_0_DeviceOem
    SimpleStorage_1_0_0_Device_Oem = restplus.fields.Nested(inner_SimpleStorage_1_0_0_Device_Oem,
            )

    inner_SimpleStorage_1_0_0_Device_Status = SimpleStorage_1_0_0_DeviceStatus
    SimpleStorage_1_0_0_Device_Status = restplus.fields.Nested(inner_SimpleStorage_1_0_0_Device_Status,
            )


    SimpleStorage_1_0_0_Device = namespace.model("SimpleStorage_1_0_0_Device",
    {
        "Model": SimpleStorage_1_0_0_Device_Model,
        "Oem": SimpleStorage_1_0_0_Device_Oem,
        "Manufacturer": SimpleStorage_1_0_0_Device_Manufacturer,
        "Status": SimpleStorage_1_0_0_Device_Status,
        "Name": SimpleStorage_1_0_0_Device_Name,
    })

    #
    # Switch_1_0_0_Switch
    #

    Switch_1_0_0_Switch_HWRevision = restplus.fields.String(
            readonly=True,
            description="This is the vendor specific firmware revision string")
    Switch_1_0_0_Switch_FWRevision = restplus.fields.String(
            readonly=True,
            description="This is the vendor specific hardware revision string")
    Switch_1_0_0_Switch_Model = restplus.fields.String(
            readonly=True,
            description="This is the vendor specific model name identifier string.")
    Switch_1_0_0_Switch_ManufactureName = restplus.fields.String(
            readonly=True,
            description="This is the name of the manufacturer of this physical component")
    Switch_1_0_0_Switch_SerialNumber = restplus.fields.String(
            readonly=True,
            description="This is the vendor specific serial number string")
    Switch_1_0_0_Switch_PlatformDescription = restplus.fields.String(
            readonly=True,
            description="This is a textual description of physical entity")
    inner_Switch_1_0_0_Switch_Ports = Switch_1_0_0_Ports
    Switch_1_0_0_Switch_Ports = restplus.fields.Nested(inner_Switch_1_0_0_Switch_Ports, as_list=True,
            readonly=True,
            description="This is the definition for switch ports.")

    inner_Switch_1_0_0_Switch_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Switch_1_0_0_Switch_odata_context = inner_Switch_1_0_0_Switch_odata_context

    inner_Switch_1_0_0_Switch_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Switch_1_0_0_Switch_Description = inner_Switch_1_0_0_Switch_Description

    inner_Switch_1_0_0_Switch_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Switch_1_0_0_Switch_Name = inner_Switch_1_0_0_Switch_Name

    inner_Switch_1_0_0_Switch_Status = Resource_Status
    Switch_1_0_0_Switch_Status = restplus.fields.Nested(inner_Switch_1_0_0_Switch_Status,
            )

    inner_Switch_1_0_0_Switch_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Switch_1_0_0_Switch_odata_id = inner_Switch_1_0_0_Switch_odata_id

    inner_Switch_1_0_0_Switch_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Switch_1_0_0_Switch_odata_type = inner_Switch_1_0_0_Switch_odata_type

    inner_Switch_1_0_0_Switch_Portsodata_count = restplus.fields.Float(
            attribute="Portsodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Switch_1_0_0_Switch_Portsodata_count = inner_Switch_1_0_0_Switch_Portsodata_count

    inner_Switch_1_0_0_Switch_Portsodata_navigationLink = odata_4_0_0_idRef
    Switch_1_0_0_Switch_Portsodata_navigationLink = restplus.fields.Nested(inner_Switch_1_0_0_Switch_Portsodata_navigationLink,
            attribute="Portsodata_navigationLink")

    inner_Switch_1_0_0_Switch_Oem = Resource_Oem
    Switch_1_0_0_Switch_Oem = restplus.fields.Nested(inner_Switch_1_0_0_Switch_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Switch_1_0_0_Switch_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Switch_1_0_0_Switch_Id = inner_Switch_1_0_0_Switch_Id


    Switch_1_0_0_Switch = namespace.model("Switch_1_0_0_Switch",
    {
        "HWRevision": Switch_1_0_0_Switch_HWRevision,
        "@odata.context": Switch_1_0_0_Switch_odata_context,
        "FWRevision": Switch_1_0_0_Switch_FWRevision,
        "Description": Switch_1_0_0_Switch_Description,
        "Name": Switch_1_0_0_Switch_Name,
        "Model": Switch_1_0_0_Switch_Model,
        "Status": Switch_1_0_0_Switch_Status,
        "ManufactureName": Switch_1_0_0_Switch_ManufactureName,
        "SerialNumber": Switch_1_0_0_Switch_SerialNumber,
        "@odata.id": Switch_1_0_0_Switch_odata_id,
        "@odata.type": Switch_1_0_0_Switch_odata_type,
        "Ports": Switch_1_0_0_Switch_Ports,
        "PlatformDescription": Switch_1_0_0_Switch_PlatformDescription,
        "Ports@odata.count": Switch_1_0_0_Switch_Portsodata_count,
        "Ports@odata.navigationLink": Switch_1_0_0_Switch_Portsodata_navigationLink,
        "Oem": Switch_1_0_0_Switch_Oem,
        "Id": Switch_1_0_0_Switch_Id,
    })

    #
    # Task_1_0_0_Task
    #

    Task_1_0_0_Task_StartTime = restplus.fields.String(
            readonly=True,
            description="The date-time stamp that the task was last started.")
    Task_1_0_0_Task_EndTime = restplus.fields.String(
            readonly=True,
            description="The date-time stamp that the task was last completed.")
    inner_Task_1_0_0_Task_Messages = Message_1_0_0_Message
    Task_1_0_0_Task_Messages = restplus.fields.Nested(inner_Task_1_0_0_Task_Messages, as_list=True,
            readonly=True,
            description="This is an array of messages associated with the task.")

    inner_Task_1_0_0_Task_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Task_1_0_0_Task_Description = inner_Task_1_0_0_Task_Description

    inner_Task_1_0_0_Task_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Task_1_0_0_Task_Name = inner_Task_1_0_0_Task_Name

    inner_Task_1_0_0_Task_TaskStatus = restplus.fields.String(
            enum=Resource_Health,
            description="Critical: A critical condition exists that requires immediate attention, Warning: A condition exists that requires attention, OK: Normal")
    Task_1_0_0_Task_TaskStatus = inner_Task_1_0_0_Task_TaskStatus

    inner_Task_1_0_0_Task_Oem = Task_1_0_0_TaskOem
    Task_1_0_0_Task_Oem = restplus.fields.Nested(inner_Task_1_0_0_Task_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Task_1_0_0_Task_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Task_1_0_0_Task_Id = inner_Task_1_0_0_Task_Id

    inner_Task_1_0_0_Task_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Task_1_0_0_Task_odata_type = inner_Task_1_0_0_Task_odata_type

    inner_Task_1_0_0_Task_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Task_1_0_0_Task_odata_id = inner_Task_1_0_0_Task_odata_id

    inner_Task_1_0_0_Task_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Task_1_0_0_Task_odata_context = inner_Task_1_0_0_Task_odata_context

    inner_Task_1_0_0_Task_TaskState = restplus.fields.String(
            enum=Task_1_0_0_TaskState,
            description="Exception: Task has stopped due to an exception condition, Service: Task is running as a service, Completed: Task has completed, Interrupted: Task has been interrupted, Running: Task is running normally, Suspended: Task has been suspended, Stopping: Task is in the process of stopping, New: A new task, Starting: Task is starting, Killed: Task was terminated, Pending: Task is pending and has not started")
    Task_1_0_0_Task_TaskState = inner_Task_1_0_0_Task_TaskState


    Task_1_0_0_Task = namespace.model("Task_1_0_0_Task",
    {
        "Description": Task_1_0_0_Task_Description,
        "Name": Task_1_0_0_Task_Name,
        "Messages": Task_1_0_0_Task_Messages,
        "TaskStatus": Task_1_0_0_Task_TaskStatus,
        "Oem": Task_1_0_0_Task_Oem,
        "Id": Task_1_0_0_Task_Id,
        "StartTime": Task_1_0_0_Task_StartTime,
        "@odata.type": Task_1_0_0_Task_odata_type,
        "@odata.id": Task_1_0_0_Task_odata_id,
        "EndTime": Task_1_0_0_Task_EndTime,
        "@odata.context": Task_1_0_0_Task_odata_context,
        "TaskState": Task_1_0_0_Task_TaskState,
    })

    #
    # Thermal_1_0_0_Fan
    #

    Thermal_1_0_0_Fan_LowerThresholdCritical = restplus.fields.Float(
            readonly=True,
            description="Below normal range but not yet fatal")
    Thermal_1_0_0_Fan_MaxReadingRange = restplus.fields.Float(
            readonly=True,
            description="Maximum value for ReadingRPM")
    Thermal_1_0_0_Fan_UpperThresholdNonCritical = restplus.fields.Float(
            readonly=True,
            description="Above normal range")
    Thermal_1_0_0_Fan_MemberId = restplus.fields.String(
            description="This is the identifier for the member within the collection.")
    Thermal_1_0_0_Fan_UpperThresholdCritical = restplus.fields.Float(
            readonly=True,
            description="Above normal range but not yet fatal")
    Thermal_1_0_0_Fan_MinReadingRange = restplus.fields.Float(
            readonly=True,
            description="Minimum value for ReadingRPM")
    Thermal_1_0_0_Fan_ReadingRPM = restplus.fields.Float(
            readonly=True,
            description="Current fan speed in RPM")
    Thermal_1_0_0_Fan_LowerThresholdNonCritical = restplus.fields.Float(
            readonly=True,
            description="Below normal range")
    Thermal_1_0_0_Fan_LowerThresholdFatal = restplus.fields.Float(
            readonly=True,
            description="Below normal range and is fatal")
    Thermal_1_0_0_Fan_FanName = restplus.fields.String(
            readonly=True,
            description="Name of the fan")
    Thermal_1_0_0_Fan_UpperThresholdFatal = restplus.fields.Float(
            readonly=True,
            description="Above normal range and is fatal")
    inner_Thermal_1_0_0_Fan_RelatedItem = odata_4_0_0_idRef
    Thermal_1_0_0_Fan_RelatedItem = restplus.fields.Nested(inner_Thermal_1_0_0_Fan_RelatedItem, as_list=True,
            description="The ID(s) of the resources serviced with this fan")

    inner_Thermal_1_0_0_Fan_Redundancy = odata_4_0_0_idRef
    Thermal_1_0_0_Fan_Redundancy = restplus.fields.Nested(inner_Thermal_1_0_0_Fan_Redundancy, as_list=True,
            readonly=True,
            description="This structure is used to show redundancy for fans.  The Component ids will reference the members of the redundancy groups.")

    inner_Thermal_1_0_0_Fan_RelatedItemodata_count = restplus.fields.Float(
            attribute="RelatedItemodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Thermal_1_0_0_Fan_RelatedItemodata_count = inner_Thermal_1_0_0_Fan_RelatedItemodata_count

    inner_Thermal_1_0_0_Fan_PhysicalContext = restplus.fields.String(
            enum=PhysicalContext_1_0_0_PhysicalContext,
            description="Exhaust: The exhaust point of the chassis, Intake: The intake point of the chassis, PowerSupplyBay: Within a power supply bay, Room: The room, Upper: The upper portion of the chassis, StorageBay: Within a storage bay, StorageDevice: A storage device, Back: The back of the chassis, SystemBoard: The system board (PCB), PowerSupply: A power supply, Lower: The lower portion of the chassis, Backplane: A backplane within the chassis, ComputeBay: Within a compute bay, NetworkingDevice: A networking device, ExpansionBay: Within an expansion bay, Front: The front of the chassis, GPU: A Graphics Processor (GPU), NetworkBay: Within a networking bay, CPU: A Processor (CPU), VoltageRegulator: A voltage regulator device")
    Thermal_1_0_0_Fan_PhysicalContext = inner_Thermal_1_0_0_Fan_PhysicalContext

    inner_Thermal_1_0_0_Fan_Redundancyodata_count = restplus.fields.Float(
            attribute="Redundancyodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Thermal_1_0_0_Fan_Redundancyodata_count = inner_Thermal_1_0_0_Fan_Redundancyodata_count

    inner_Thermal_1_0_0_Fan_RelatedItemodata_navigationLink = odata_4_0_0_idRef
    Thermal_1_0_0_Fan_RelatedItemodata_navigationLink = restplus.fields.Nested(inner_Thermal_1_0_0_Fan_RelatedItemodata_navigationLink,
            attribute="RelatedItemodata_navigationLink")

    inner_Thermal_1_0_0_Fan_Status = Resource_Status
    Thermal_1_0_0_Fan_Status = restplus.fields.Nested(inner_Thermal_1_0_0_Fan_Status,
            )

    inner_Thermal_1_0_0_Fan_Redundancyodata_navigationLink = odata_4_0_0_idRef
    Thermal_1_0_0_Fan_Redundancyodata_navigationLink = restplus.fields.Nested(inner_Thermal_1_0_0_Fan_Redundancyodata_navigationLink,
            attribute="Redundancyodata_navigationLink")

    inner_Thermal_1_0_0_Fan_Oem = Resource_Oem
    Thermal_1_0_0_Fan_Oem = restplus.fields.Nested(inner_Thermal_1_0_0_Fan_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")


    Thermal_1_0_0_Fan = namespace.model("Thermal_1_0_0_Fan",
    {
        "RelatedItem@odata.count": Thermal_1_0_0_Fan_RelatedItemodata_count,
        "PhysicalContext": Thermal_1_0_0_Fan_PhysicalContext,
        "LowerThresholdCritical": Thermal_1_0_0_Fan_LowerThresholdCritical,
        "MaxReadingRange": Thermal_1_0_0_Fan_MaxReadingRange,
        "Redundancy@odata.count": Thermal_1_0_0_Fan_Redundancyodata_count,
        "RelatedItem@odata.navigationLink": Thermal_1_0_0_Fan_RelatedItemodata_navigationLink,
        "Status": Thermal_1_0_0_Fan_Status,
        "RelatedItem": Thermal_1_0_0_Fan_RelatedItem,
        "UpperThresholdNonCritical": Thermal_1_0_0_Fan_UpperThresholdNonCritical,
        "MemberId": Thermal_1_0_0_Fan_MemberId,
        "UpperThresholdCritical": Thermal_1_0_0_Fan_UpperThresholdCritical,
        "Redundancy": Thermal_1_0_0_Fan_Redundancy,
        "MinReadingRange": Thermal_1_0_0_Fan_MinReadingRange,
        "ReadingRPM": Thermal_1_0_0_Fan_ReadingRPM,
        "LowerThresholdNonCritical": Thermal_1_0_0_Fan_LowerThresholdNonCritical,
        "LowerThresholdFatal": Thermal_1_0_0_Fan_LowerThresholdFatal,
        "FanName": Thermal_1_0_0_Fan_FanName,
        "UpperThresholdFatal": Thermal_1_0_0_Fan_UpperThresholdFatal,
        "Redundancy@odata.navigationLink": Thermal_1_0_0_Fan_Redundancyodata_navigationLink,
        "Oem": Thermal_1_0_0_Fan_Oem,
    })

    #
    # Thermal_1_0_0_Temperature
    #

    Thermal_1_0_0_Temperature_SensorNumber = restplus.fields.Float(
            readonly=True,
            description="A numerical identifier to represent the temperature sensor")
    Thermal_1_0_0_Temperature_UpperThresholdNonCritical = restplus.fields.Float(
            readonly=True,
            description="Above normal range")
    Thermal_1_0_0_Temperature_MemberId = restplus.fields.String(
            description="This is the identifier for the member within the collection.")
    Thermal_1_0_0_Temperature_MinReadingRangeTemp = restplus.fields.Float(
            readonly=True,
            description="Minimum value for ReadingCelsius")
    Thermal_1_0_0_Temperature_LowerThresholdFatal = restplus.fields.Float(
            readonly=True,
            description="Below normal range and is fatal")
    Thermal_1_0_0_Temperature_MaxReadingRangeTemp = restplus.fields.Float(
            readonly=True,
            description="Maximum value for ReadingCelsius")
    Thermal_1_0_0_Temperature_UpperThresholdCritical = restplus.fields.Float(
            readonly=True,
            description="Above normal range but not yet fatal.")
    Thermal_1_0_0_Temperature_LowerThresholdNonCritical = restplus.fields.Float(
            readonly=True,
            description="Below normal range")
    Thermal_1_0_0_Temperature_UpperThresholdFatal = restplus.fields.Float(
            readonly=True,
            description="Above normal range and is fatal")
    Thermal_1_0_0_Temperature_LowerThresholdCritical = restplus.fields.Float(
            readonly=True,
            description="Below normal range but not yet fatal.")
    Thermal_1_0_0_Temperature_ReadingCelsius = restplus.fields.Float(
            readonly=True,
            description="Temperature")
    Thermal_1_0_0_Temperature_Name = restplus.fields.String(
            readonly=True,
            description="Temperature sensor name.")
    inner_Thermal_1_0_0_Temperature_RelatedItem = odata_4_0_0_idRef
    Thermal_1_0_0_Temperature_RelatedItem = restplus.fields.Nested(inner_Thermal_1_0_0_Temperature_RelatedItem, as_list=True,
            readonly=True,
            description="Describes the areas or devices to which this temperature measurement applies.")

    inner_Thermal_1_0_0_Temperature_PhysicalContext = restplus.fields.String(
            enum=PhysicalContext_1_0_0_PhysicalContext,
            description="Exhaust: The exhaust point of the chassis, Intake: The intake point of the chassis, PowerSupplyBay: Within a power supply bay, Room: The room, Upper: The upper portion of the chassis, StorageBay: Within a storage bay, StorageDevice: A storage device, Back: The back of the chassis, SystemBoard: The system board (PCB), PowerSupply: A power supply, Lower: The lower portion of the chassis, Backplane: A backplane within the chassis, ComputeBay: Within a compute bay, NetworkingDevice: A networking device, ExpansionBay: Within an expansion bay, Front: The front of the chassis, GPU: A Graphics Processor (GPU), NetworkBay: Within a networking bay, CPU: A Processor (CPU), VoltageRegulator: A voltage regulator device")
    Thermal_1_0_0_Temperature_PhysicalContext = inner_Thermal_1_0_0_Temperature_PhysicalContext

    inner_Thermal_1_0_0_Temperature_RelatedItemodata_count = restplus.fields.Float(
            attribute="RelatedItemodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Thermal_1_0_0_Temperature_RelatedItemodata_count = inner_Thermal_1_0_0_Temperature_RelatedItemodata_count

    inner_Thermal_1_0_0_Temperature_RelatedItemodata_navigationLink = odata_4_0_0_idRef
    Thermal_1_0_0_Temperature_RelatedItemodata_navigationLink = restplus.fields.Nested(inner_Thermal_1_0_0_Temperature_RelatedItemodata_navigationLink,
            attribute="RelatedItemodata_navigationLink")

    inner_Thermal_1_0_0_Temperature_Oem = Resource_Oem
    Thermal_1_0_0_Temperature_Oem = restplus.fields.Nested(inner_Thermal_1_0_0_Temperature_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Thermal_1_0_0_Temperature_Status = Resource_Status
    Thermal_1_0_0_Temperature_Status = restplus.fields.Nested(inner_Thermal_1_0_0_Temperature_Status,
            )


    Thermal_1_0_0_Temperature = namespace.model("Thermal_1_0_0_Temperature",
    {
        "SensorNumber": Thermal_1_0_0_Temperature_SensorNumber,
        "UpperThresholdNonCritical": Thermal_1_0_0_Temperature_UpperThresholdNonCritical,
        "MemberId": Thermal_1_0_0_Temperature_MemberId,
        "MinReadingRangeTemp": Thermal_1_0_0_Temperature_MinReadingRangeTemp,
        "LowerThresholdFatal": Thermal_1_0_0_Temperature_LowerThresholdFatal,
        "MaxReadingRangeTemp": Thermal_1_0_0_Temperature_MaxReadingRangeTemp,
        "PhysicalContext": Thermal_1_0_0_Temperature_PhysicalContext,
        "UpperThresholdCritical": Thermal_1_0_0_Temperature_UpperThresholdCritical,
        "LowerThresholdNonCritical": Thermal_1_0_0_Temperature_LowerThresholdNonCritical,
        "RelatedItem": Thermal_1_0_0_Temperature_RelatedItem,
        "UpperThresholdFatal": Thermal_1_0_0_Temperature_UpperThresholdFatal,
        "LowerThresholdCritical": Thermal_1_0_0_Temperature_LowerThresholdCritical,
        "ReadingCelsius": Thermal_1_0_0_Temperature_ReadingCelsius,
        "RelatedItem@odata.count": Thermal_1_0_0_Temperature_RelatedItemodata_count,
        "RelatedItem@odata.navigationLink": Thermal_1_0_0_Temperature_RelatedItemodata_navigationLink,
        "Oem": Thermal_1_0_0_Temperature_Oem,
        "Name": Thermal_1_0_0_Temperature_Name,
        "Status": Thermal_1_0_0_Temperature_Status,
    })

    #
    # ComputerSystem_1_0_0_ComputerSystem
    #

    ComputerSystem_1_0_0_ComputerSystem_PartNumber = restplus.fields.String(
            readonly=True,
            description="The part number for this system")
    ComputerSystem_1_0_0_ComputerSystem_SKU = restplus.fields.String(
            readonly=True,
            description="The manufacturer SKU for this system")
    ComputerSystem_1_0_0_ComputerSystem_Manufacturer = restplus.fields.String(
            readonly=True,
            description="The manufacturer or OEM of this system.")
    ComputerSystem_1_0_0_ComputerSystem_SerialNumber = restplus.fields.String(
            readonly=True,
            description="The serial number for this system")
    ComputerSystem_1_0_0_ComputerSystem_Model = restplus.fields.String(
            readonly=True,
            description="The model number for this system")
    ComputerSystem_1_0_0_ComputerSystem_AssetTag = restplus.fields.String(
            readonly=False,
            description="The user definable tag that can be used to track this computer system for inventory or other client purposes")
    ComputerSystem_1_0_0_ComputerSystem_HostName = restplus.fields.String(
            description="The DNS Host Name, without any domain information")
    ComputerSystem_1_0_0_ComputerSystem_BiosVersion = restplus.fields.String(
            description="The version of the system BIOS or primary system firmware.")
    ComputerSystem_1_0_0_ComputerSystem_Oem = restplus.fields.Nested(ComputerSystem_1_0_0_ComputerSystem_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")
    ComputerSystem_1_0_0_ComputerSystem_Links = restplus.fields.Nested(ComputerSystem_1_0_0_ComputerSystem_Links,
            readonly=True,
            description="Contains links to other resources that are related to this resource.")
    ComputerSystem_1_0_0_ComputerSystem_Actions = restplus.fields.Nested(ComputerSystem_1_0_0_ComputerSystem_Actions,
            readonly=True,
            description="The Actions object contains the available custom actions on this resource.")
    inner_ComputerSystem_1_0_0_ComputerSystem_EthernetInterfaces = EthernetInterfaceCollection_EthernetInterfaceCollection
    ComputerSystem_1_0_0_ComputerSystem_EthernetInterfaces = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_EthernetInterfaces,
            readonly=True,
            description="A reference to the collection of Ethernet interfaces associated with this system")

    inner_ComputerSystem_1_0_0_ComputerSystem_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    ComputerSystem_1_0_0_ComputerSystem_odata_type = inner_ComputerSystem_1_0_0_ComputerSystem_odata_type

    inner_ComputerSystem_1_0_0_ComputerSystem_Processors = ProcessorCollection_ProcessorCollection
    ComputerSystem_1_0_0_ComputerSystem_Processors = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_Processors,
            readonly=True,
            description="A reference to the collection of Processors associated with this system")

    inner_ComputerSystem_1_0_0_ComputerSystem_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    ComputerSystem_1_0_0_ComputerSystem_Description = inner_ComputerSystem_1_0_0_ComputerSystem_Description

    inner_ComputerSystem_1_0_0_ComputerSystem_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    ComputerSystem_1_0_0_ComputerSystem_odata_id = inner_ComputerSystem_1_0_0_ComputerSystem_odata_id

    inner_ComputerSystem_1_0_0_ComputerSystem_ProcessorSummary = ComputerSystem_1_0_0_ProcessorSummary
    ComputerSystem_1_0_0_ComputerSystem_ProcessorSummary = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_ProcessorSummary,
            description="This object describes the central processors of the system in general detail.")

    inner_ComputerSystem_1_0_0_ComputerSystem_SystemType = restplus.fields.String(
            enum=ComputerSystem_1_0_0_SystemType,
            description="PhysicallyPartitioned: A hardware-based partition of a computer system, OS: An operating system instance, VirtuallyPartitioned: A virtual or software-based partition of a computer system, Virtual: A virtual machine instance running on this system, Physical: A computer system")
    ComputerSystem_1_0_0_ComputerSystem_SystemType = inner_ComputerSystem_1_0_0_ComputerSystem_SystemType

    inner_ComputerSystem_1_0_0_ComputerSystem_LogServices = LogServiceCollection_LogServiceCollection
    ComputerSystem_1_0_0_ComputerSystem_LogServices = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_LogServices,
            readonly=True,
            description="A reference to the collection of Log Services associated with this system")

    inner_ComputerSystem_1_0_0_ComputerSystem_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    ComputerSystem_1_0_0_ComputerSystem_odata_context = inner_ComputerSystem_1_0_0_ComputerSystem_odata_context

    inner_ComputerSystem_1_0_0_ComputerSystem_SimpleStorage = SimpleStorageCollection_SimpleStorageCollection
    ComputerSystem_1_0_0_ComputerSystem_SimpleStorage = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_SimpleStorage,
            readonly=True,
            description="A reference to the collection of storage devices associated with this system")

    inner_ComputerSystem_1_0_0_ComputerSystem_Status = Resource_Status
    ComputerSystem_1_0_0_ComputerSystem_Status = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_Status,
            )

    inner_ComputerSystem_1_0_0_ComputerSystem_UUID = restplus.fields.String(
            )
    ComputerSystem_1_0_0_ComputerSystem_UUID = inner_ComputerSystem_1_0_0_ComputerSystem_UUID

    inner_ComputerSystem_1_0_0_ComputerSystem_PowerState = restplus.fields.String(
            enum=ComputerSystem_1_0_0_PowerState)
    ComputerSystem_1_0_0_ComputerSystem_PowerState = inner_ComputerSystem_1_0_0_ComputerSystem_PowerState

    inner_ComputerSystem_1_0_0_ComputerSystem_IndicatorLED = restplus.fields.String(
            enum=ComputerSystem_1_0_0_IndicatorLED,
            description="Lit: The Indicator LED is lit., Unknown: The state of the Indicator LED cannot be determined., Off: The Indicator LED is off., Blinking: The Indicator LED is blinking.")
    ComputerSystem_1_0_0_ComputerSystem_IndicatorLED = inner_ComputerSystem_1_0_0_ComputerSystem_IndicatorLED

    inner_ComputerSystem_1_0_0_ComputerSystem_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    ComputerSystem_1_0_0_ComputerSystem_Name = inner_ComputerSystem_1_0_0_ComputerSystem_Name

    inner_ComputerSystem_1_0_0_ComputerSystem_Boot = ComputerSystem_1_0_0_Boot
    ComputerSystem_1_0_0_ComputerSystem_Boot = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_Boot,
            description="Information about the boot settings for this system")

    inner_ComputerSystem_1_0_0_ComputerSystem_MemorySummary = ComputerSystem_1_0_0_MemorySummary
    ComputerSystem_1_0_0_ComputerSystem_MemorySummary = restplus.fields.Nested(inner_ComputerSystem_1_0_0_ComputerSystem_MemorySummary,
            description="This object describes the central memory of the system in general detail.")

    inner_ComputerSystem_1_0_0_ComputerSystem_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    ComputerSystem_1_0_0_ComputerSystem_Id = inner_ComputerSystem_1_0_0_ComputerSystem_Id


    ComputerSystem_1_0_0_ComputerSystem = namespace.model("ComputerSystem_1_0_0_ComputerSystem",
    {
        "EthernetInterfaces": ComputerSystem_1_0_0_ComputerSystem_EthernetInterfaces,
        "@odata.type": ComputerSystem_1_0_0_ComputerSystem_odata_type,
        "Processors": ComputerSystem_1_0_0_ComputerSystem_Processors,
        "PartNumber": ComputerSystem_1_0_0_ComputerSystem_PartNumber,
        "Description": ComputerSystem_1_0_0_ComputerSystem_Description,
        "@odata.id": ComputerSystem_1_0_0_ComputerSystem_odata_id,
        "SKU": ComputerSystem_1_0_0_ComputerSystem_SKU,
        "Oem": ComputerSystem_1_0_0_ComputerSystem_Oem,
        "ProcessorSummary": ComputerSystem_1_0_0_ComputerSystem_ProcessorSummary,
        "Manufacturer": ComputerSystem_1_0_0_ComputerSystem_Manufacturer,
        "SystemType": ComputerSystem_1_0_0_ComputerSystem_SystemType,
        "SerialNumber": ComputerSystem_1_0_0_ComputerSystem_SerialNumber,
        "LogServices": ComputerSystem_1_0_0_ComputerSystem_LogServices,
        "@odata.context": ComputerSystem_1_0_0_ComputerSystem_odata_context,
        "SimpleStorage": ComputerSystem_1_0_0_ComputerSystem_SimpleStorage,
        "Status": ComputerSystem_1_0_0_ComputerSystem_Status,
        "Model": ComputerSystem_1_0_0_ComputerSystem_Model,
        "Links": ComputerSystem_1_0_0_ComputerSystem_Links,
        "UUID": ComputerSystem_1_0_0_ComputerSystem_UUID,
        "AssetTag": ComputerSystem_1_0_0_ComputerSystem_AssetTag,
        "Actions": ComputerSystem_1_0_0_ComputerSystem_Actions,
        "PowerState": ComputerSystem_1_0_0_ComputerSystem_PowerState,
        "IndicatorLED": ComputerSystem_1_0_0_ComputerSystem_IndicatorLED,
        "Name": ComputerSystem_1_0_0_ComputerSystem_Name,
        "Boot": ComputerSystem_1_0_0_ComputerSystem_Boot,
        "MemorySummary": ComputerSystem_1_0_0_ComputerSystem_MemorySummary,
        "HostName": ComputerSystem_1_0_0_ComputerSystem_HostName,
        "BiosVersion": ComputerSystem_1_0_0_ComputerSystem_BiosVersion,
        "Id": ComputerSystem_1_0_0_ComputerSystem_Id,
    })

    #
    # LogEntryCollection_LogEntryCollection
    #

    inner_LogEntryCollection_LogEntryCollection_Members = LogEntry_1_0_0_LogEntry
    LogEntryCollection_LogEntryCollection_Members = restplus.fields.Nested(inner_LogEntryCollection_LogEntryCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_LogEntryCollection_LogEntryCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    LogEntryCollection_LogEntryCollection_Membersodata_count = inner_LogEntryCollection_LogEntryCollection_Membersodata_count

    inner_LogEntryCollection_LogEntryCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    LogEntryCollection_LogEntryCollection_odata_type = inner_LogEntryCollection_LogEntryCollection_odata_type

    inner_LogEntryCollection_LogEntryCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    LogEntryCollection_LogEntryCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_LogEntryCollection_LogEntryCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")

    inner_LogEntryCollection_LogEntryCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    LogEntryCollection_LogEntryCollection_odata_id = inner_LogEntryCollection_LogEntryCollection_odata_id

    inner_LogEntryCollection_LogEntryCollection_Oem = LogEntryCollection_LogEntryCollectionOem
    LogEntryCollection_LogEntryCollection_Oem = restplus.fields.Nested(inner_LogEntryCollection_LogEntryCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_LogEntryCollection_LogEntryCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    LogEntryCollection_LogEntryCollection_odata_context = inner_LogEntryCollection_LogEntryCollection_odata_context

    inner_LogEntryCollection_LogEntryCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    LogEntryCollection_LogEntryCollection_Description = inner_LogEntryCollection_LogEntryCollection_Description

    inner_LogEntryCollection_LogEntryCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    LogEntryCollection_LogEntryCollection_Name = inner_LogEntryCollection_LogEntryCollection_Name


    LogEntryCollection_LogEntryCollection = namespace.model("LogEntryCollection_LogEntryCollection",
    {
        "Members@odata.count": LogEntryCollection_LogEntryCollection_Membersodata_count,
        "@odata.type": LogEntryCollection_LogEntryCollection_odata_type,
        "Members@odata.navigationLink": LogEntryCollection_LogEntryCollection_Membersodata_navigationLink,
        "@odata.id": LogEntryCollection_LogEntryCollection_odata_id,
        "Oem": LogEntryCollection_LogEntryCollection_Oem,
        "@odata.context": LogEntryCollection_LogEntryCollection_odata_context,
        "Description": LogEntryCollection_LogEntryCollection_Description,
        "Name": LogEntryCollection_LogEntryCollection_Name,
        "Members": LogEntryCollection_LogEntryCollection_Members,
    })

    #
    # Manager_1_0_0_Manager_Oem
    #

    inner_Manager_1_0_0_Manager_Oem_Chassis = odata_4_0_0_idRef
    Manager_1_0_0_Manager_Oem_Chassis = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Oem_Chassis,
            readonly=True,
            description="A reference to the chassis that contains this manager")

    inner_Manager_1_0_0_Manager_Oem_ComputeSystem = odata_4_0_0_idRef
    Manager_1_0_0_Manager_Oem_ComputeSystem = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Oem_ComputeSystem,
            readonly=True,
            description="A reference to the system that contains this manager")

    inner_Manager_1_0_0_Manager_Oem_Interface = Manager_1_0_0_Interface
    Manager_1_0_0_Manager_Oem_Interface = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Oem_Interface,
            description="This is a the IPv4 information the the BMC")


    Manager_1_0_0_Manager_Oem = namespace.model("Manager_1_0_0_Manager_Oem",
    {
        "Chassis": Manager_1_0_0_Manager_Oem_Chassis,
        "ComputeSystem": Manager_1_0_0_Manager_Oem_ComputeSystem,
        "Interface": Manager_1_0_0_Manager_Oem_Interface,
    })

    #
    # Power_1_0_0_Power
    #

    inner_Power_1_0_0_Power_Redundancy = odata_4_0_0_idRef
    Power_1_0_0_Power_Redundancy = restplus.fields.Nested(inner_Power_1_0_0_Power_Redundancy, as_list=True,
            readonly=True,
            description="Redundancy information for the power subsystem of this system or device")

    inner_Power_1_0_0_Power_PowerControl = Power_1_0_0_PowerControl
    Power_1_0_0_Power_PowerControl = restplus.fields.Nested(inner_Power_1_0_0_Power_PowerControl, as_list=True,
            readonly=True,
            description="This is the definition for power control function (power reading/limiting).")

    inner_Power_1_0_0_Power_PowerSupplies = Power_1_0_0_PowerSupply
    Power_1_0_0_Power_PowerSupplies = restplus.fields.Nested(inner_Power_1_0_0_Power_PowerSupplies, as_list=True,
            readonly=True,
            description="Details of the power supplies associated with this system or device")

    inner_Power_1_0_0_Power_Voltages = Power_1_0_0_Voltage
    Power_1_0_0_Power_Voltages = restplus.fields.Nested(inner_Power_1_0_0_Power_Voltages, as_list=True,
            readonly=True,
            description="This is the definition for voltage sensors.")

    inner_Power_1_0_0_Power_PowerControlodata_navigationLink = odata_4_0_0_idRef
    Power_1_0_0_Power_PowerControlodata_navigationLink = restplus.fields.Nested(inner_Power_1_0_0_Power_PowerControlodata_navigationLink,
            attribute="PowerControlodata_navigationLink")

    inner_Power_1_0_0_Power_PowerSuppliesodata_count = restplus.fields.Float(
            attribute="PowerSuppliesodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Power_1_0_0_Power_PowerSuppliesodata_count = inner_Power_1_0_0_Power_PowerSuppliesodata_count

    inner_Power_1_0_0_Power_Redundancyodata_navigationLink = odata_4_0_0_idRef
    Power_1_0_0_Power_Redundancyodata_navigationLink = restplus.fields.Nested(inner_Power_1_0_0_Power_Redundancyodata_navigationLink,
            attribute="Redundancyodata_navigationLink")

    inner_Power_1_0_0_Power_PowerControlodata_count = restplus.fields.Float(
            attribute="PowerControlodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Power_1_0_0_Power_PowerControlodata_count = inner_Power_1_0_0_Power_PowerControlodata_count

    inner_Power_1_0_0_Power_PowerSuppliesodata_navigationLink = odata_4_0_0_idRef
    Power_1_0_0_Power_PowerSuppliesodata_navigationLink = restplus.fields.Nested(inner_Power_1_0_0_Power_PowerSuppliesodata_navigationLink,
            attribute="PowerSuppliesodata_navigationLink")

    inner_Power_1_0_0_Power_Voltagesodata_count = restplus.fields.Float(
            attribute="Voltagesodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Power_1_0_0_Power_Voltagesodata_count = inner_Power_1_0_0_Power_Voltagesodata_count

    inner_Power_1_0_0_Power_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Power_1_0_0_Power_Name = inner_Power_1_0_0_Power_Name

    inner_Power_1_0_0_Power_Oem = Power_1_0_0_PowerOem
    Power_1_0_0_Power_Oem = restplus.fields.Nested(inner_Power_1_0_0_Power_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Power_1_0_0_Power_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Power_1_0_0_Power_Description = inner_Power_1_0_0_Power_Description

    inner_Power_1_0_0_Power_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Power_1_0_0_Power_odata_context = inner_Power_1_0_0_Power_odata_context

    inner_Power_1_0_0_Power_Redundancyodata_count = restplus.fields.Float(
            attribute="Redundancyodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Power_1_0_0_Power_Redundancyodata_count = inner_Power_1_0_0_Power_Redundancyodata_count

    inner_Power_1_0_0_Power_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Power_1_0_0_Power_odata_type = inner_Power_1_0_0_Power_odata_type

    inner_Power_1_0_0_Power_Voltagesodata_navigationLink = odata_4_0_0_idRef
    Power_1_0_0_Power_Voltagesodata_navigationLink = restplus.fields.Nested(inner_Power_1_0_0_Power_Voltagesodata_navigationLink,
            attribute="Voltagesodata_navigationLink")

    inner_Power_1_0_0_Power_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Power_1_0_0_Power_Id = inner_Power_1_0_0_Power_Id

    inner_Power_1_0_0_Power_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Power_1_0_0_Power_odata_id = inner_Power_1_0_0_Power_odata_id


    Power_1_0_0_Power = namespace.model("Power_1_0_0_Power",
    {
        "PowerControl@odata.navigationLink": Power_1_0_0_Power_PowerControlodata_navigationLink,
        "Redundancy": Power_1_0_0_Power_Redundancy,
        "PowerSupplies@odata.count": Power_1_0_0_Power_PowerSuppliesodata_count,
        "PowerControl": Power_1_0_0_Power_PowerControl,
        "Redundancy@odata.navigationLink": Power_1_0_0_Power_Redundancyodata_navigationLink,
        "PowerControl@odata.count": Power_1_0_0_Power_PowerControlodata_count,
        "PowerSupplies@odata.navigationLink": Power_1_0_0_Power_PowerSuppliesodata_navigationLink,
        "Voltages@odata.count": Power_1_0_0_Power_Voltagesodata_count,
        "Name": Power_1_0_0_Power_Name,
        "Oem": Power_1_0_0_Power_Oem,
        "PowerSupplies": Power_1_0_0_Power_PowerSupplies,
        "Description": Power_1_0_0_Power_Description,
        "@odata.context": Power_1_0_0_Power_odata_context,
        "Voltages": Power_1_0_0_Power_Voltages,
        "Redundancy@odata.count": Power_1_0_0_Power_Redundancyodata_count,
        "@odata.type": Power_1_0_0_Power_odata_type,
        "Voltages@odata.navigationLink": Power_1_0_0_Power_Voltagesodata_navigationLink,
        "Id": Power_1_0_0_Power_Id,
        "@odata.id": Power_1_0_0_Power_odata_id,
    })

    #
    # ServiceRoot_1_0_0_ServiceRoot
    #

    ServiceRoot_1_0_0_ServiceRoot_RedfishVersion = restplus.fields.String(
            readonly=True,
            description="The version of the Redfish service")
    ServiceRoot_1_0_0_ServiceRoot_Links = restplus.fields.Nested(ServiceRoot_1_0_0_ServiceRoot_Links,
            readonly=True,
            description="The links object contains the links to other resources that are related to this resource.")
    inner_ServiceRoot_1_0_0_ServiceRoot_Tasks = odata_4_0_0_idRef
    ServiceRoot_1_0_0_ServiceRoot_Tasks = restplus.fields.Nested(inner_ServiceRoot_1_0_0_ServiceRoot_Tasks,
            readonly=True,
            description="This is a link to the Task Service.")

    inner_ServiceRoot_1_0_0_ServiceRoot_Systems = ComputerSystemCollection_ComputerSystemCollection
    ServiceRoot_1_0_0_ServiceRoot_Systems = restplus.fields.Nested(inner_ServiceRoot_1_0_0_ServiceRoot_Systems,
            readonly=True,
            description="This is a link to a collection of Systems.")

    inner_ServiceRoot_1_0_0_ServiceRoot_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    ServiceRoot_1_0_0_ServiceRoot_Description = inner_ServiceRoot_1_0_0_ServiceRoot_Description

    inner_ServiceRoot_1_0_0_ServiceRoot_AccountService = odata_4_0_0_idRef
    ServiceRoot_1_0_0_ServiceRoot_AccountService = restplus.fields.Nested(inner_ServiceRoot_1_0_0_ServiceRoot_AccountService,
            readonly=True,
            description="This is a link to the Account Service.")

    inner_ServiceRoot_1_0_0_ServiceRoot_UUID = restplus.fields.String(
            )
    ServiceRoot_1_0_0_ServiceRoot_UUID = inner_ServiceRoot_1_0_0_ServiceRoot_UUID

    inner_ServiceRoot_1_0_0_ServiceRoot_Registries = odata_4_0_0_idRef
    ServiceRoot_1_0_0_ServiceRoot_Registries = restplus.fields.Nested(inner_ServiceRoot_1_0_0_ServiceRoot_Registries,
            readonly=True,
            description="This is a link to a collection of Registries.")

    inner_ServiceRoot_1_0_0_ServiceRoot_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    ServiceRoot_1_0_0_ServiceRoot_Name = inner_ServiceRoot_1_0_0_ServiceRoot_Name

    inner_ServiceRoot_1_0_0_ServiceRoot_SessionService = odata_4_0_0_idRef
    ServiceRoot_1_0_0_ServiceRoot_SessionService = restplus.fields.Nested(inner_ServiceRoot_1_0_0_ServiceRoot_SessionService,
            readonly=True,
            description="This is a link to the Sessions Service.")

    inner_ServiceRoot_1_0_0_ServiceRoot_EventService = odata_4_0_0_idRef
    ServiceRoot_1_0_0_ServiceRoot_EventService = restplus.fields.Nested(inner_ServiceRoot_1_0_0_ServiceRoot_EventService,
            readonly=True,
            description="This is a link to the EventService.")

    inner_ServiceRoot_1_0_0_ServiceRoot_Oem = Resource_Oem
    ServiceRoot_1_0_0_ServiceRoot_Oem = restplus.fields.Nested(inner_ServiceRoot_1_0_0_ServiceRoot_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_ServiceRoot_1_0_0_ServiceRoot_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    ServiceRoot_1_0_0_ServiceRoot_Id = inner_ServiceRoot_1_0_0_ServiceRoot_Id

    inner_ServiceRoot_1_0_0_ServiceRoot_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    ServiceRoot_1_0_0_ServiceRoot_odata_type = inner_ServiceRoot_1_0_0_ServiceRoot_odata_type

    inner_ServiceRoot_1_0_0_ServiceRoot_JsonSchemas = JsonSchemaFileCollection_JsonSchemaFileCollection
    ServiceRoot_1_0_0_ServiceRoot_JsonSchemas = restplus.fields.Nested(inner_ServiceRoot_1_0_0_ServiceRoot_JsonSchemas,
            readonly=True,
            description="This is a link to a collection of Json-Schema files.")

    inner_ServiceRoot_1_0_0_ServiceRoot_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    ServiceRoot_1_0_0_ServiceRoot_odata_id = inner_ServiceRoot_1_0_0_ServiceRoot_odata_id

    inner_ServiceRoot_1_0_0_ServiceRoot_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    ServiceRoot_1_0_0_ServiceRoot_odata_context = inner_ServiceRoot_1_0_0_ServiceRoot_odata_context

    inner_ServiceRoot_1_0_0_ServiceRoot_Chassis = ChassisCollection_ChassisCollection
    ServiceRoot_1_0_0_ServiceRoot_Chassis = restplus.fields.Nested(inner_ServiceRoot_1_0_0_ServiceRoot_Chassis,
            readonly=True,
            description="This is a link to a collection of Chassis.")

    inner_ServiceRoot_1_0_0_ServiceRoot_Managers = ManagerCollection_ManagerCollection
    ServiceRoot_1_0_0_ServiceRoot_Managers = restplus.fields.Nested(inner_ServiceRoot_1_0_0_ServiceRoot_Managers,
            readonly=True,
            description="This is a link to a collection of Managers.")


    ServiceRoot_1_0_0_ServiceRoot = namespace.model("ServiceRoot_1_0_0_ServiceRoot",
    {
        "Tasks": ServiceRoot_1_0_0_ServiceRoot_Tasks,
        "Systems": ServiceRoot_1_0_0_ServiceRoot_Systems,
        "Description": ServiceRoot_1_0_0_ServiceRoot_Description,
        "AccountService": ServiceRoot_1_0_0_ServiceRoot_AccountService,
        "UUID": ServiceRoot_1_0_0_ServiceRoot_UUID,
        "Registries": ServiceRoot_1_0_0_ServiceRoot_Registries,
        "Name": ServiceRoot_1_0_0_ServiceRoot_Name,
        "SessionService": ServiceRoot_1_0_0_ServiceRoot_SessionService,
        "EventService": ServiceRoot_1_0_0_ServiceRoot_EventService,
        "Oem": ServiceRoot_1_0_0_ServiceRoot_Oem,
        "Id": ServiceRoot_1_0_0_ServiceRoot_Id,
        "Links": ServiceRoot_1_0_0_ServiceRoot_Links,
        "RedfishVersion": ServiceRoot_1_0_0_ServiceRoot_RedfishVersion,
        "@odata.type": ServiceRoot_1_0_0_ServiceRoot_odata_type,
        "JsonSchemas": ServiceRoot_1_0_0_ServiceRoot_JsonSchemas,
        "@odata.id": ServiceRoot_1_0_0_ServiceRoot_odata_id,
        "@odata.context": ServiceRoot_1_0_0_ServiceRoot_odata_context,
        "Chassis": ServiceRoot_1_0_0_ServiceRoot_Chassis,
        "Managers": ServiceRoot_1_0_0_ServiceRoot_Managers,
    })

    #
    # SimpleStorage_1_0_0_SimpleStorage
    #

    SimpleStorage_1_0_0_SimpleStorage_UefiDevicePath = restplus.fields.String(
            readonly=True,
            description="The UEFI device path used to access this storage controller.")
    SimpleStorage_1_0_0_SimpleStorage_Oem = restplus.fields.Nested(SimpleStorage_1_0_0_SimpleStorage_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")
    inner_SimpleStorage_1_0_0_SimpleStorage_Devices = SimpleStorage_1_0_0_Device
    SimpleStorage_1_0_0_SimpleStorage_Devices = restplus.fields.Nested(inner_SimpleStorage_1_0_0_SimpleStorage_Devices, as_list=True,
            readonly=True,
            description="The storage devices associated with this resource")

    inner_SimpleStorage_1_0_0_SimpleStorage_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    SimpleStorage_1_0_0_SimpleStorage_odata_context = inner_SimpleStorage_1_0_0_SimpleStorage_odata_context

    inner_SimpleStorage_1_0_0_SimpleStorage_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    SimpleStorage_1_0_0_SimpleStorage_Name = inner_SimpleStorage_1_0_0_SimpleStorage_Name

    inner_SimpleStorage_1_0_0_SimpleStorage_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    SimpleStorage_1_0_0_SimpleStorage_odata_type = inner_SimpleStorage_1_0_0_SimpleStorage_odata_type

    inner_SimpleStorage_1_0_0_SimpleStorage_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    SimpleStorage_1_0_0_SimpleStorage_odata_id = inner_SimpleStorage_1_0_0_SimpleStorage_odata_id

    inner_SimpleStorage_1_0_0_SimpleStorage_Status = Resource_Status
    SimpleStorage_1_0_0_SimpleStorage_Status = restplus.fields.Nested(inner_SimpleStorage_1_0_0_SimpleStorage_Status,
            )

    inner_SimpleStorage_1_0_0_SimpleStorage_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    SimpleStorage_1_0_0_SimpleStorage_Id = inner_SimpleStorage_1_0_0_SimpleStorage_Id

    inner_SimpleStorage_1_0_0_SimpleStorage_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    SimpleStorage_1_0_0_SimpleStorage_Description = inner_SimpleStorage_1_0_0_SimpleStorage_Description


    SimpleStorage_1_0_0_SimpleStorage = namespace.model("SimpleStorage_1_0_0_SimpleStorage",
    {
        "@odata.context": SimpleStorage_1_0_0_SimpleStorage_odata_context,
        "Name": SimpleStorage_1_0_0_SimpleStorage_Name,
        "Oem": SimpleStorage_1_0_0_SimpleStorage_Oem,
        "@odata.type": SimpleStorage_1_0_0_SimpleStorage_odata_type,
        "@odata.id": SimpleStorage_1_0_0_SimpleStorage_odata_id,
        "Status": SimpleStorage_1_0_0_SimpleStorage_Status,
        "Id": SimpleStorage_1_0_0_SimpleStorage_Id,
        "Devices": SimpleStorage_1_0_0_SimpleStorage_Devices,
        "UefiDevicePath": SimpleStorage_1_0_0_SimpleStorage_UefiDevicePath,
        "Description": SimpleStorage_1_0_0_SimpleStorage_Description,
    })

    #
    # TaskCollection_TaskCollection
    #

    inner_TaskCollection_TaskCollection_Members = Task_1_0_0_Task
    TaskCollection_TaskCollection_Members = restplus.fields.Nested(inner_TaskCollection_TaskCollection_Members, as_list=True,
            readonly=True,
            description="Contains the members of this collection.")

    inner_TaskCollection_TaskCollection_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    TaskCollection_TaskCollection_odata_context = inner_TaskCollection_TaskCollection_odata_context

    inner_TaskCollection_TaskCollection_Oem = Resource_Oem
    TaskCollection_TaskCollection_Oem = restplus.fields.Nested(inner_TaskCollection_TaskCollection_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_TaskCollection_TaskCollection_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    TaskCollection_TaskCollection_Name = inner_TaskCollection_TaskCollection_Name

    inner_TaskCollection_TaskCollection_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    TaskCollection_TaskCollection_Description = inner_TaskCollection_TaskCollection_Description

    inner_TaskCollection_TaskCollection_Membersodata_count = restplus.fields.Float(
            attribute="Membersodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    TaskCollection_TaskCollection_Membersodata_count = inner_TaskCollection_TaskCollection_Membersodata_count

    inner_TaskCollection_TaskCollection_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    TaskCollection_TaskCollection_odata_type = inner_TaskCollection_TaskCollection_odata_type

    inner_TaskCollection_TaskCollection_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    TaskCollection_TaskCollection_odata_id = inner_TaskCollection_TaskCollection_odata_id

    inner_TaskCollection_TaskCollection_Membersodata_navigationLink = odata_4_0_0_idRef
    TaskCollection_TaskCollection_Membersodata_navigationLink = restplus.fields.Nested(inner_TaskCollection_TaskCollection_Membersodata_navigationLink,
            attribute="Membersodata_navigationLink")


    TaskCollection_TaskCollection = namespace.model("TaskCollection_TaskCollection",
    {
        "@odata.context": TaskCollection_TaskCollection_odata_context,
        "Oem": TaskCollection_TaskCollection_Oem,
        "Name": TaskCollection_TaskCollection_Name,
        "Members": TaskCollection_TaskCollection_Members,
        "Description": TaskCollection_TaskCollection_Description,
        "Members@odata.count": TaskCollection_TaskCollection_Membersodata_count,
        "@odata.type": TaskCollection_TaskCollection_odata_type,
        "@odata.id": TaskCollection_TaskCollection_odata_id,
        "Members@odata.navigationLink": TaskCollection_TaskCollection_Membersodata_navigationLink,
    })

    #
    # Thermal_1_0_0_Thermal
    #

    inner_Thermal_1_0_0_Thermal_Redundancy = odata_4_0_0_idRef
    Thermal_1_0_0_Thermal_Redundancy = restplus.fields.Nested(inner_Thermal_1_0_0_Thermal_Redundancy, as_list=True,
            readonly=True,
            description="This structure is used to show redundancy for fans.  The Component ids will reference the members of the redundancy groups.")

    inner_Thermal_1_0_0_Thermal_Temperatures = Thermal_1_0_0_Temperature
    Thermal_1_0_0_Thermal_Temperatures = restplus.fields.Nested(inner_Thermal_1_0_0_Thermal_Temperatures, as_list=True,
            readonly=True,
            description="This is the definition for temperature sensors.")

    inner_Thermal_1_0_0_Thermal_Fans = Thermal_1_0_0_Fan
    Thermal_1_0_0_Thermal_Fans = restplus.fields.Nested(inner_Thermal_1_0_0_Thermal_Fans, as_list=True,
            readonly=True,
            description="This is the definition for fans.")

    inner_Thermal_1_0_0_Thermal_Temperaturesodata_navigationLink = odata_4_0_0_idRef
    Thermal_1_0_0_Thermal_Temperaturesodata_navigationLink = restplus.fields.Nested(inner_Thermal_1_0_0_Thermal_Temperaturesodata_navigationLink,
            attribute="Temperaturesodata_navigationLink")

    inner_Thermal_1_0_0_Thermal_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Thermal_1_0_0_Thermal_Name = inner_Thermal_1_0_0_Thermal_Name

    inner_Thermal_1_0_0_Thermal_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Thermal_1_0_0_Thermal_Id = inner_Thermal_1_0_0_Thermal_Id

    inner_Thermal_1_0_0_Thermal_Fansodata_navigationLink = odata_4_0_0_idRef
    Thermal_1_0_0_Thermal_Fansodata_navigationLink = restplus.fields.Nested(inner_Thermal_1_0_0_Thermal_Fansodata_navigationLink,
            attribute="Fansodata_navigationLink")

    inner_Thermal_1_0_0_Thermal_Redundancyodata_count = restplus.fields.Float(
            attribute="Redundancyodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Thermal_1_0_0_Thermal_Redundancyodata_count = inner_Thermal_1_0_0_Thermal_Redundancyodata_count

    inner_Thermal_1_0_0_Thermal_Temperaturesodata_count = restplus.fields.Float(
            attribute="Temperaturesodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Thermal_1_0_0_Thermal_Temperaturesodata_count = inner_Thermal_1_0_0_Thermal_Temperaturesodata_count

    inner_Thermal_1_0_0_Thermal_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Thermal_1_0_0_Thermal_odata_type = inner_Thermal_1_0_0_Thermal_odata_type

    inner_Thermal_1_0_0_Thermal_Oem = Thermal_1_0_0_ThermalOem
    Thermal_1_0_0_Thermal_Oem = restplus.fields.Nested(inner_Thermal_1_0_0_Thermal_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_Thermal_1_0_0_Thermal_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Thermal_1_0_0_Thermal_odata_id = inner_Thermal_1_0_0_Thermal_odata_id

    inner_Thermal_1_0_0_Thermal_Status = Resource_Status
    Thermal_1_0_0_Thermal_Status = restplus.fields.Nested(inner_Thermal_1_0_0_Thermal_Status,
            )

    inner_Thermal_1_0_0_Thermal_Redundancyodata_navigationLink = odata_4_0_0_idRef
    Thermal_1_0_0_Thermal_Redundancyodata_navigationLink = restplus.fields.Nested(inner_Thermal_1_0_0_Thermal_Redundancyodata_navigationLink,
            attribute="Redundancyodata_navigationLink")

    inner_Thermal_1_0_0_Thermal_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Thermal_1_0_0_Thermal_odata_context = inner_Thermal_1_0_0_Thermal_odata_context

    inner_Thermal_1_0_0_Thermal_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Thermal_1_0_0_Thermal_Description = inner_Thermal_1_0_0_Thermal_Description

    inner_Thermal_1_0_0_Thermal_Fansodata_count = restplus.fields.Float(
            attribute="Fansodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Thermal_1_0_0_Thermal_Fansodata_count = inner_Thermal_1_0_0_Thermal_Fansodata_count


    Thermal_1_0_0_Thermal = namespace.model("Thermal_1_0_0_Thermal",
    {
        "Temperatures@odata.navigationLink": Thermal_1_0_0_Thermal_Temperaturesodata_navigationLink,
        "Name": Thermal_1_0_0_Thermal_Name,
        "Id": Thermal_1_0_0_Thermal_Id,
        "Fans@odata.navigationLink": Thermal_1_0_0_Thermal_Fansodata_navigationLink,
        "Redundancy": Thermal_1_0_0_Thermal_Redundancy,
        "Redundancy@odata.count": Thermal_1_0_0_Thermal_Redundancyodata_count,
        "Temperatures@odata.count": Thermal_1_0_0_Thermal_Temperaturesodata_count,
        "@odata.type": Thermal_1_0_0_Thermal_odata_type,
        "Temperatures": Thermal_1_0_0_Thermal_Temperatures,
        "Oem": Thermal_1_0_0_Thermal_Oem,
        "@odata.id": Thermal_1_0_0_Thermal_odata_id,
        "Status": Thermal_1_0_0_Thermal_Status,
        "Redundancy@odata.navigationLink": Thermal_1_0_0_Thermal_Redundancyodata_navigationLink,
        "Fans": Thermal_1_0_0_Thermal_Fans,
        "@odata.context": Thermal_1_0_0_Thermal_odata_context,
        "Description": Thermal_1_0_0_Thermal_Description,
        "Fans@odata.count": Thermal_1_0_0_Thermal_Fansodata_count,
    })

    #
    # LogService_1_0_0_LogService
    #

    LogService_1_0_0_LogService_DateTimeLocalOffset = restplus.fields.String(
            readonly=False,
            description="The time offset from UTC that the DateTime property is set to in format: +06:00 .")
    LogService_1_0_0_LogService_ServiceEnabled = restplus.fields.Boolean(
            description="This indicates whether this service is enabled.")
    LogService_1_0_0_LogService_DateTime = restplus.fields.String(
            readonly=False,
            description="The current DateTime (with offset) for the log service, used to set or read time.")
    LogService_1_0_0_LogService_MaxNumberOfRecords = restplus.fields.Float(
            readonly=True,
            description="The maximum number of log entries this service can have.")
    LogService_1_0_0_LogService_Actions = restplus.fields.Nested(LogService_1_0_0_LogService_Actions,
            readonly=True,
            description="The Actions object contains the available custom actions on this resource.")
    inner_LogService_1_0_0_LogService_Entries = LogEntryCollection_LogEntryCollection
    LogService_1_0_0_LogService_Entries = restplus.fields.Nested(inner_LogService_1_0_0_LogService_Entries,
            readonly=True,
            description="References to the log entry collection.")

    inner_LogService_1_0_0_LogService_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    LogService_1_0_0_LogService_odata_type = inner_LogService_1_0_0_LogService_odata_type

    inner_LogService_1_0_0_LogService_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    LogService_1_0_0_LogService_odata_id = inner_LogService_1_0_0_LogService_odata_id

    inner_LogService_1_0_0_LogService_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    LogService_1_0_0_LogService_odata_context = inner_LogService_1_0_0_LogService_odata_context

    inner_LogService_1_0_0_LogService_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    LogService_1_0_0_LogService_Id = inner_LogService_1_0_0_LogService_Id

    inner_LogService_1_0_0_LogService_Status = Resource_Status
    LogService_1_0_0_LogService_Status = restplus.fields.Nested(inner_LogService_1_0_0_LogService_Status,
            )

    inner_LogService_1_0_0_LogService_OverWritePolicy = restplus.fields.String(
            enum=LogService_1_0_0_OverWritePolicy,
            description="Unknown: The overwrite policy is not known or is undefined, NeverOverWrites: When full, new entries to the Log will be discarded, WrapsWhenFull: When full, new entries to the Log will overwrite previous entries")
    LogService_1_0_0_LogService_OverWritePolicy = inner_LogService_1_0_0_LogService_OverWritePolicy

    inner_LogService_1_0_0_LogService_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    LogService_1_0_0_LogService_Description = inner_LogService_1_0_0_LogService_Description

    inner_LogService_1_0_0_LogService_Oem = Resource_Oem
    LogService_1_0_0_LogService_Oem = restplus.fields.Nested(inner_LogService_1_0_0_LogService_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_LogService_1_0_0_LogService_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    LogService_1_0_0_LogService_Name = inner_LogService_1_0_0_LogService_Name


    LogService_1_0_0_LogService = namespace.model("LogService_1_0_0_LogService",
    {
        "DateTimeLocalOffset": LogService_1_0_0_LogService_DateTimeLocalOffset,
        "Entries": LogService_1_0_0_LogService_Entries,
        "@odata.type": LogService_1_0_0_LogService_odata_type,
        "@odata.id": LogService_1_0_0_LogService_odata_id,
        "@odata.context": LogService_1_0_0_LogService_odata_context,
        "Id": LogService_1_0_0_LogService_Id,
        "Status": LogService_1_0_0_LogService_Status,
        "OverWritePolicy": LogService_1_0_0_LogService_OverWritePolicy,
        "ServiceEnabled": LogService_1_0_0_LogService_ServiceEnabled,
        "Actions": LogService_1_0_0_LogService_Actions,
        "DateTime": LogService_1_0_0_LogService_DateTime,
        "MaxNumberOfRecords": LogService_1_0_0_LogService_MaxNumberOfRecords,
        "Description": LogService_1_0_0_LogService_Description,
        "Oem": LogService_1_0_0_LogService_Oem,
        "Name": LogService_1_0_0_LogService_Name,
    })

    #
    # Manager_1_0_0_Manager
    #

    Manager_1_0_0_Manager_FirmwareVersion = restplus.fields.String(
            readonly=True,
            description="The firmware version of this Manager")
    Manager_1_0_0_Manager_DateTime = restplus.fields.String(
            readonly=False,
            description="The current DateTime (with offset) for the manager, used to set or read time.")
    Manager_1_0_0_Manager_Model = restplus.fields.String(
            readonly=True,
            description="The model information of this Manager as defined by the manufacturer")
    Manager_1_0_0_Manager_DateTimeLocalOffset = restplus.fields.String(
            readonly=False,
            description="The time offset from UTC that the DateTime property is set to in format: +06:00 .")
    Manager_1_0_0_Manager_Links = restplus.fields.Nested(Manager_1_0_0_Manager_Links,
            readonly=True,
            description="This object contains the links to other resources that are related to this resource.")
    Manager_1_0_0_Manager_Oem = restplus.fields.Nested(Manager_1_0_0_Manager_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")
    Manager_1_0_0_Manager_Actions = restplus.fields.Nested(Manager_1_0_0_Manager_Actions,
            readonly=True,
            description="The Actions object contains the available custom actions on this resource.")
    inner_Manager_1_0_0_Manager_Redundancy = odata_4_0_0_idRef
    Manager_1_0_0_Manager_Redundancy = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Redundancy, as_list=True,
            readonly=True,
            description="Redundancy information for the managers of this system")

    inner_Manager_1_0_0_Manager_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    Manager_1_0_0_Manager_Id = inner_Manager_1_0_0_Manager_Id

    inner_Manager_1_0_0_Manager_ServiceEntryPointUUID = restplus.fields.String(
            )
    Manager_1_0_0_Manager_ServiceEntryPointUUID = inner_Manager_1_0_0_Manager_ServiceEntryPointUUID

    inner_Manager_1_0_0_Manager_VirtualMedia = VirtualMediaCollection_VirtualMediaCollection
    Manager_1_0_0_Manager_VirtualMedia = restplus.fields.Nested(inner_Manager_1_0_0_Manager_VirtualMedia,
            readonly=True,
            description="This is a reference to the Virtual Media services for this particular manager.")

    inner_Manager_1_0_0_Manager_GraphicalConsole = Manager_1_0_0_GraphicalConsole
    Manager_1_0_0_Manager_GraphicalConsole = restplus.fields.Nested(inner_Manager_1_0_0_Manager_GraphicalConsole,
            description="The value of this property shall contain the information about the Graphical Console (KVM-IP) service of this manager.")

    inner_Manager_1_0_0_Manager_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    Manager_1_0_0_Manager_odata_context = inner_Manager_1_0_0_Manager_odata_context

    inner_Manager_1_0_0_Manager_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    Manager_1_0_0_Manager_odata_id = inner_Manager_1_0_0_Manager_odata_id

    inner_Manager_1_0_0_Manager_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    Manager_1_0_0_Manager_Description = inner_Manager_1_0_0_Manager_Description

    inner_Manager_1_0_0_Manager_CommandShell = Manager_1_0_0_CommandShell
    Manager_1_0_0_Manager_CommandShell = restplus.fields.Nested(inner_Manager_1_0_0_Manager_CommandShell,
            description="Information about the Command Shell service provided by this manager.")

    inner_Manager_1_0_0_Manager_Redundancyodata_count = restplus.fields.Float(
            attribute="Redundancyodata_count",
            readonly=True,
            description="The value of this property shall be an integer representing the number of items in a collection.")
    Manager_1_0_0_Manager_Redundancyodata_count = inner_Manager_1_0_0_Manager_Redundancyodata_count

    inner_Manager_1_0_0_Manager_SerialConsole = Manager_1_0_0_SerialConsole
    Manager_1_0_0_Manager_SerialConsole = restplus.fields.Nested(inner_Manager_1_0_0_Manager_SerialConsole,
            description="Information about the Serial Console service provided by this manager.")

    inner_Manager_1_0_0_Manager_NetworkProtocol = ManagerNetworkProtocol_1_0_0_ManagerNetworkProtocol
    Manager_1_0_0_Manager_NetworkProtocol = restplus.fields.Nested(inner_Manager_1_0_0_Manager_NetworkProtocol,
            readonly=True,
            description="This is a reference to the network services and their settings that the manager controls.  It is here that clients will find network configuration options as well as network services.")

    inner_Manager_1_0_0_Manager_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    Manager_1_0_0_Manager_odata_type = inner_Manager_1_0_0_Manager_odata_type

    inner_Manager_1_0_0_Manager_Status = Resource_Status
    Manager_1_0_0_Manager_Status = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Status,
            )

    inner_Manager_1_0_0_Manager_Redundancyodata_navigationLink = odata_4_0_0_idRef
    Manager_1_0_0_Manager_Redundancyodata_navigationLink = restplus.fields.Nested(inner_Manager_1_0_0_Manager_Redundancyodata_navigationLink,
            attribute="Redundancyodata_navigationLink")

    inner_Manager_1_0_0_Manager_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    Manager_1_0_0_Manager_Name = inner_Manager_1_0_0_Manager_Name

    inner_Manager_1_0_0_Manager_SerialInterfaces = SerialInterfaceCollection_SerialInterfaceCollection
    Manager_1_0_0_Manager_SerialInterfaces = restplus.fields.Nested(inner_Manager_1_0_0_Manager_SerialInterfaces,
            readonly=True,
            description="This is a reference to a collection of serial interfaces that this manager uses for serial and console communication.  It is here that clients will find serial configuration options and settings.")

    inner_Manager_1_0_0_Manager_LogServices = odata_4_0_0_idRef
    Manager_1_0_0_Manager_LogServices = restplus.fields.Nested(inner_Manager_1_0_0_Manager_LogServices,
            readonly=True,
            description="This is a reference to a collection of Logs used by the manager.")

    inner_Manager_1_0_0_Manager_ManagerType = restplus.fields.String(
            enum=Manager_1_0_0_ManagerType,
            description="ManagementController: A controller used primarily to monitor or manage the operation of a device or system, BMC: A controller which provides management functions for a single computer system, AuxiliaryController: A controller which provides management functions for a particular subsystem or group of devices, RackManager: A controller which provides management functions for a whole or part of a rack, EnclosureManager: A controller which provides management functions for a chassis or group of devices or systems")
    Manager_1_0_0_Manager_ManagerType = inner_Manager_1_0_0_Manager_ManagerType

    inner_Manager_1_0_0_Manager_EthernetInterfaces = EthernetInterfaceCollection_EthernetInterfaceCollection
    Manager_1_0_0_Manager_EthernetInterfaces = restplus.fields.Nested(inner_Manager_1_0_0_Manager_EthernetInterfaces,
            readonly=True,
            description="This is a reference to a collection of NICs that this manager uses for network communication.  It is here that clients will find NIC configuration options and settings.")

    inner_Manager_1_0_0_Manager_UUID = restplus.fields.String(
            )
    Manager_1_0_0_Manager_UUID = inner_Manager_1_0_0_Manager_UUID


    Manager_1_0_0_Manager = namespace.model("Manager_1_0_0_Manager",
    {
        "FirmwareVersion": Manager_1_0_0_Manager_FirmwareVersion,
        "Id": Manager_1_0_0_Manager_Id,
        "ServiceEntryPointUUID": Manager_1_0_0_Manager_ServiceEntryPointUUID,
        "VirtualMedia": Manager_1_0_0_Manager_VirtualMedia,
        "GraphicalConsole": Manager_1_0_0_Manager_GraphicalConsole,
        "@odata.context": Manager_1_0_0_Manager_odata_context,
        "@odata.id": Manager_1_0_0_Manager_odata_id,
        "Description": Manager_1_0_0_Manager_Description,
        "CommandShell": Manager_1_0_0_Manager_CommandShell,
        "Redundancy@odata.count": Manager_1_0_0_Manager_Redundancyodata_count,
        "SerialConsole": Manager_1_0_0_Manager_SerialConsole,
        "NetworkProtocol": Manager_1_0_0_Manager_NetworkProtocol,
        "DateTime": Manager_1_0_0_Manager_DateTime,
        "@odata.type": Manager_1_0_0_Manager_odata_type,
        "Model": Manager_1_0_0_Manager_Model,
        "Status": Manager_1_0_0_Manager_Status,
        "Redundancy@odata.navigationLink": Manager_1_0_0_Manager_Redundancyodata_navigationLink,
        "Links": Manager_1_0_0_Manager_Links,
        "Redundancy": Manager_1_0_0_Manager_Redundancy,
        "Name": Manager_1_0_0_Manager_Name,
        "Oem": Manager_1_0_0_Manager_Oem,
        "SerialInterfaces": Manager_1_0_0_Manager_SerialInterfaces,
        "LogServices": Manager_1_0_0_Manager_LogServices,
        "ManagerType": Manager_1_0_0_Manager_ManagerType,
        "DateTimeLocalOffset": Manager_1_0_0_Manager_DateTimeLocalOffset,
        "Actions": Manager_1_0_0_Manager_Actions,
        "EthernetInterfaces": Manager_1_0_0_Manager_EthernetInterfaces,
        "UUID": Manager_1_0_0_Manager_UUID,
    })

    #
    # TaskService_1_0_0_TaskService
    #

    TaskService_1_0_0_TaskService_DateTime = restplus.fields.String(
            readonly=True,
            description="The current DateTime (with offset) setting that the task service is using.")
    TaskService_1_0_0_TaskService_ServiceEnabled = restplus.fields.Boolean(
            description="This indicates whether this service is enabled.")
    TaskService_1_0_0_TaskService_LifeCycleEventOnTaskStateChange = restplus.fields.Boolean(
            readonly=True,
            description="Send an Event upon Task State Change.")
    inner_TaskService_1_0_0_TaskService_odata_context = restplus.fields.String(
            attribute="odata_context",
            readonly=True,
            description="The value of this property shall be the context URL that describes the resource according to OData-Protocol and shall be of the form defined in the Redfish specification.")
    TaskService_1_0_0_TaskService_odata_context = inner_TaskService_1_0_0_TaskService_odata_context

    inner_TaskService_1_0_0_TaskService_Status = Resource_Status
    TaskService_1_0_0_TaskService_Status = restplus.fields.Nested(inner_TaskService_1_0_0_TaskService_Status,
            )

    inner_TaskService_1_0_0_TaskService_Name = restplus.fields.String(
            readonly=True,
            description="The name of the resource or array element.")
    TaskService_1_0_0_TaskService_Name = inner_TaskService_1_0_0_TaskService_Name

    inner_TaskService_1_0_0_TaskService_Tasks = TaskCollection_TaskCollection
    TaskService_1_0_0_TaskService_Tasks = restplus.fields.Nested(inner_TaskService_1_0_0_TaskService_Tasks,
            readonly=True,
            description="References to the Tasks collection.")

    inner_TaskService_1_0_0_TaskService_Description = restplus.fields.String(
            readonly=True,
            description="Provides a description of this resource and is used for commonality  in the schema definitions.")
    TaskService_1_0_0_TaskService_Description = inner_TaskService_1_0_0_TaskService_Description

    inner_TaskService_1_0_0_TaskService_odata_type = restplus.fields.String(
            attribute="odata_type",
            readonly=True,
            description="The value of this property shall be an absolute URL that specifies the type of the resource and it shall be of the form defined in the Redfish specification.")
    TaskService_1_0_0_TaskService_odata_type = inner_TaskService_1_0_0_TaskService_odata_type

    inner_TaskService_1_0_0_TaskService_CompletedTaskOverWritePolicy = restplus.fields.String(
            enum=LogService_1_0_0_OverWritePolicy,
            description="Unknown: The overwrite policy is not known or is undefined, NeverOverWrites: When full, new entries to the Log will be discarded, WrapsWhenFull: When full, new entries to the Log will overwrite previous entries")
    TaskService_1_0_0_TaskService_CompletedTaskOverWritePolicy = inner_TaskService_1_0_0_TaskService_CompletedTaskOverWritePolicy

    inner_TaskService_1_0_0_TaskService_Oem = Resource_Oem
    TaskService_1_0_0_TaskService_Oem = restplus.fields.Nested(inner_TaskService_1_0_0_TaskService_Oem,
            description="This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.")

    inner_TaskService_1_0_0_TaskService_Id = restplus.fields.String(
            readonly=True,
            description="Uniquely identifies the resource within the collection of like resources.")
    TaskService_1_0_0_TaskService_Id = inner_TaskService_1_0_0_TaskService_Id

    inner_TaskService_1_0_0_TaskService_odata_id = restplus.fields.String(
            attribute="odata_id",
            readonly=True,
            description="The value of this property shall be the unique identifier for the resource and it shall be of the form defined in the Redfish specification.")
    TaskService_1_0_0_TaskService_odata_id = inner_TaskService_1_0_0_TaskService_odata_id


    TaskService_1_0_0_TaskService = namespace.model("TaskService_1_0_0_TaskService",
    {
        "@odata.context": TaskService_1_0_0_TaskService_odata_context,
        "DateTime": TaskService_1_0_0_TaskService_DateTime,
        "Status": TaskService_1_0_0_TaskService_Status,
        "Name": TaskService_1_0_0_TaskService_Name,
        "Tasks": TaskService_1_0_0_TaskService_Tasks,
        "Description": TaskService_1_0_0_TaskService_Description,
        "@odata.type": TaskService_1_0_0_TaskService_odata_type,
        "ServiceEnabled": TaskService_1_0_0_TaskService_ServiceEnabled,
        "CompletedTaskOverWritePolicy": TaskService_1_0_0_TaskService_CompletedTaskOverWritePolicy,
        "Oem": TaskService_1_0_0_TaskService_Oem,
        "Id": TaskService_1_0_0_TaskService_Id,
        "LifeCycleEventOnTaskStateChange": TaskService_1_0_0_TaskService_LifeCycleEventOnTaskStateChange,
        "@odata.id": TaskService_1_0_0_TaskService_odata_id,
    })

    fake_importer.end_record(locals())
