#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os, subprocess, sys, signal
import ConfigParser
import psutil

def ipmi_check_pid():
    cmd  = "ps ax | grep ipmi_sim"
    pipe_list = subprocess.check_output(cmd, shell=True).split("\n")
    for pipe in pipe_list:
        if len(pipe) > 100:
            return pipe
    return None

def ipmi_start(node):
    if ipmi_check_pid() is not None:
        print "inframsim_ipmi service is already running"
        return 0

    cmd = "ipmi_sim -c /etc/infrasim/vbmc.conf -f /usr/local/etc/infrasim/{0}/{0}.emu -n &"
    cmd = cmd.format(node)
    cmd_list = cmd.split(' ')
    os.system(cmd) 

def ipmi_stop(node):
    status = ipmi_check_pid()
    if status is None:
        print "infrasim-ipmi service is OFF"
        return 0

    pid = ""
    item_list = status.split(" ")
    for item in item_list:
        if item.strip() == "": 
            continue
        else:
            pid = item.strip()
            break
    os.kill(int(pid), signal.SIGTERM)

def ipmi_status(node):
    status = ipmi_check_pid()
    if status is None:
        print "infrasim-ipmi service is OFF"
        return 0

    print "infrasim-ipmi service is ON"
    return 1


def ipmi_help():
    print "inframsim_ipmi start|stop|status"

if __name__ == '__main__':
    config = ConfigParser.ConfigParser()
    config.read('/etc/infrasim/infrasim.conf')
    node = config.get('main', 'node')
    if sys.argv[1] == "start":
        ipmi_start(node)
    elif sys.argv[1] == "stop":
        ipmi_stop(node)
    elif sys.argv[1] == "status":
        ipmi_status(node)
    else:
        ipmi_help()        
