#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os, subprocess, sys, signal
import ConfigParser

def create_xml_head(node):
    xml = "<domain type=\'qemu\'>\
		<name>"

def start_vm():
    vm_xml_desc=""
    vm_xml_desc += create_xml_head()
    vm_xml_desc += create_xml_common()
    vm_xml_desc += create_xml_devices()
    vm_xml_desc += create_xml_footer()

def vm_check_pid():
    cmd  = "ps ax | grep qemu-system"
    pipe_list = subprocess.check_output(cmd, shell=True).split("\n")
    for pipe in pipe_list:
        if len(pipe) > 100:
            return pipe
    return None

def vm_start(node):
    if vm_check_pid() is not None:
        print "inframsim_vm service is already running"
        return 0
    
    start_vm()
    """
    cmd = "qemu-system-x86_64 -vnc :2 -boot order=ncd,menu=on -device sga -chardev socket,id=ipmi0,host=localhost,port=9002,reconnect=10 -m 1024 -smp 4 -smbios file=/usr/local/etc/infrasim/{0}/{0}_smbios.bin -hda /usr/local/etc/infrasim/cirros-0.3.4-x86_64-disk.img -cdrom /dev/sr0 &"
    cmd = cmd.format(node)
    cmd_list = cmd.split(' ')
    os.system(cmd) 
    """

def vm_stop(node):
    status = vm_check_pid()
    if status is None:
        print "infrasim-vm service is OFF"
        return 0
  
    pid = ""
    item_list = status.split(" ")
    for item in item_list:
        if item.strip() == "":
            continue
        else:
            pid = item.strip()
            break
    
    os.kill(int(pid), signal.SIGTERM)

def vm_status(node):
    status = vm_check_pid()
    if status is None:
        print "infrasim-vm service is OFF"
        return 0

    print "infrasim-vm service is ON"
    return 1


def vm_help():
    print "inframsim_vm start|stop|status"

if __name__ == '__main__':
    config = ConfigParser.ConfigParser()
    config.read('/etc/infrasim/infrasim.conf')
    node = config.get('main', 'node')
    if sys.argv[1] == "start":
        vm_start(node)
    elif sys.argv[1] == "stop":
        vm_stop(node)
    elif sys.argv[1] == "status":
        vm_status(node)
    else:
        vm_help()
    config.close() 
